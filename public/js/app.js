/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var uikit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uikit */ "./node_modules/uikit/dist/js/uikit.js");
/* harmony import */ var uikit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uikit__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./resources/style/app.scss":
/*!**********************************!*\
  !*** ./resources/style/app.scss ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3R5bGUvYXBwLnNjc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3N0eWxlL2FwcC5zY3NzPzg0MDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/style/app.scss\n");

/***/ }),

/***/ "./node_modules/uikit/dist/js/uikit.js":
/*!*********************************************!*\
  !*** ./node_modules/uikit/dist/js/uikit.js ***!
  \*********************************************/
/***/ (function(module) {

eval("/*! UIkit 3.15.10 | https://www.getuikit.com | (c) 2014 - 2022 YOOtheme | MIT License */\n\n(function (global, factory) {\n     true ? module.exports = factory() :\n    0;\n})(this, (function () { 'use strict';\n\n    const { hasOwnProperty, toString } = Object.prototype;\n\n    function hasOwn(obj, key) {\n      return hasOwnProperty.call(obj, key);\n    }\n\n    const hyphenateRe = /\\B([A-Z])/g;\n\n    const hyphenate = memoize((str) => str.replace(hyphenateRe, '-$1').toLowerCase());\n\n    const camelizeRe = /-(\\w)/g;\n\n    const camelize = memoize((str) => str.replace(camelizeRe, toUpper));\n\n    const ucfirst = memoize((str) =>\n    str.length ? toUpper(null, str.charAt(0)) + str.slice(1) : '');\n\n\n    function toUpper(_, c) {\n      return c ? c.toUpperCase() : '';\n    }\n\n    function startsWith(str, search) {\n      return str == null ? void 0 : str.startsWith == null ? void 0 : str.startsWith(search);\n    }\n\n    function endsWith(str, search) {\n      return str == null ? void 0 : str.endsWith == null ? void 0 : str.endsWith(search);\n    }\n\n    function includes(obj, search) {\n      return obj == null ? void 0 : obj.includes == null ? void 0 : obj.includes(search);\n    }\n\n    function findIndex(array, predicate) {\n      return array == null ? void 0 : array.findIndex == null ? void 0 : array.findIndex(predicate);\n    }\n\n    const { isArray, from: toArray } = Array;\n    const { assign } = Object;\n\n    function isFunction(obj) {\n      return typeof obj === 'function';\n    }\n\n    function isObject(obj) {\n      return obj !== null && typeof obj === 'object';\n    }\n\n    function isPlainObject(obj) {\n      return toString.call(obj) === '[object Object]';\n    }\n\n    function isWindow(obj) {\n      return isObject(obj) && obj === obj.window;\n    }\n\n    function isDocument(obj) {\n      return nodeType(obj) === 9;\n    }\n\n    function isNode(obj) {\n      return nodeType(obj) >= 1;\n    }\n\n    function isElement(obj) {\n      return nodeType(obj) === 1;\n    }\n\n    function nodeType(obj) {\n      return !isWindow(obj) && isObject(obj) && obj.nodeType;\n    }\n\n    function isBoolean(value) {\n      return typeof value === 'boolean';\n    }\n\n    function isString(value) {\n      return typeof value === 'string';\n    }\n\n    function isNumber(value) {\n      return typeof value === 'number';\n    }\n\n    function isNumeric(value) {\n      return isNumber(value) || isString(value) && !isNaN(value - parseFloat(value));\n    }\n\n    function isEmpty(obj) {\n      return !(isArray(obj) ? obj.length : isObject(obj) ? Object.keys(obj).length : false);\n    }\n\n    function isUndefined(value) {\n      return value === void 0;\n    }\n\n    function toBoolean(value) {\n      return isBoolean(value) ?\n      value :\n      value === 'true' || value === '1' || value === '' ?\n      true :\n      value === 'false' || value === '0' ?\n      false :\n      value;\n    }\n\n    function toNumber(value) {\n      const number = Number(value);\n      return isNaN(number) ? false : number;\n    }\n\n    function toFloat(value) {\n      return parseFloat(value) || 0;\n    }\n\n    function toNode(element) {\n      return toNodes(element)[0];\n    }\n\n    function toNodes(element) {\n      return element && (isNode(element) ? [element] : Array.from(element).filter(isNode)) || [];\n    }\n\n    function toWindow(element) {var _element;\n      if (isWindow(element)) {\n        return element;\n      }\n\n      element = toNode(element);\n      const document = isDocument(element) ? element : (_element = element) == null ? void 0 : _element.ownerDocument;\n\n      return (document == null ? void 0 : document.defaultView) || window;\n    }\n\n    function isEqual(value, other) {\n      return (\n        value === other ||\n        isObject(value) &&\n        isObject(other) &&\n        Object.keys(value).length === Object.keys(other).length &&\n        each(value, (val, key) => val === other[key]));\n\n    }\n\n    function swap(value, a, b) {\n      return value.replace(new RegExp(a + \"|\" + b, 'g'), (match) => match === a ? b : a);\n    }\n\n    function last(array) {\n      return array[array.length - 1];\n    }\n\n    function each(obj, cb) {\n      for (const key in obj) {\n        if (false === cb(obj[key], key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    function sortBy$1(array, prop) {\n      return array.\n      slice().\n      sort((_ref, _ref2) => {let { [prop]: propA = 0 } = _ref;let { [prop]: propB = 0 } = _ref2;return (\n          propA > propB ? 1 : propB > propA ? -1 : 0);});\n\n    }\n\n    function uniqueBy(array, prop) {\n      const seen = new Set();\n      return array.filter((_ref3) => {let { [prop]: check } = _ref3;return seen.has(check) ? false : seen.add(check);});\n    }\n\n    function clamp(number, min, max) {if (min === void 0) {min = 0;}if (max === void 0) {max = 1;}\n      return Math.min(Math.max(toNumber(number) || 0, min), max);\n    }\n\n    function noop() {}\n\n    function intersectRect() {for (var _len = arguments.length, rects = new Array(_len), _key = 0; _key < _len; _key++) {rects[_key] = arguments[_key];}\n      return [\n      ['bottom', 'top'],\n      ['right', 'left']].\n      every(\n      (_ref4) => {let [minProp, maxProp] = _ref4;return (\n          Math.min(...rects.map((_ref5) => {let { [minProp]: min } = _ref5;return min;})) -\n          Math.max(...rects.map((_ref6) => {let { [maxProp]: max } = _ref6;return max;})) >\n          0);});\n\n    }\n\n    function pointInRect(point, rect) {\n      return (\n        point.x <= rect.right &&\n        point.x >= rect.left &&\n        point.y <= rect.bottom &&\n        point.y >= rect.top);\n\n    }\n\n    function ratio(dimensions, prop, value) {\n      const aProp = prop === 'width' ? 'height' : 'width';\n\n      return {\n        [aProp]: dimensions[prop] ?\n        Math.round(value * dimensions[aProp] / dimensions[prop]) :\n        dimensions[aProp],\n        [prop]: value };\n\n    }\n\n    function contain(dimensions, maxDimensions) {\n      dimensions = { ...dimensions };\n\n      for (const prop in dimensions) {\n        dimensions =\n        dimensions[prop] > maxDimensions[prop] ?\n        ratio(dimensions, prop, maxDimensions[prop]) :\n        dimensions;\n      }\n\n      return dimensions;\n    }\n\n    function cover$1(dimensions, maxDimensions) {\n      dimensions = contain(dimensions, maxDimensions);\n\n      for (const prop in dimensions) {\n        dimensions =\n        dimensions[prop] < maxDimensions[prop] ?\n        ratio(dimensions, prop, maxDimensions[prop]) :\n        dimensions;\n      }\n\n      return dimensions;\n    }\n\n    const Dimensions = { ratio, contain, cover: cover$1 };\n\n    function getIndex(i, elements, current, finite) {if (current === void 0) {current = 0;}if (finite === void 0) {finite = false;}\n      elements = toNodes(elements);\n\n      const { length } = elements;\n\n      if (!length) {\n        return -1;\n      }\n\n      i = isNumeric(i) ?\n      toNumber(i) :\n      i === 'next' ?\n      current + 1 :\n      i === 'previous' ?\n      current - 1 :\n      elements.indexOf(toNode(i));\n\n      if (finite) {\n        return clamp(i, 0, length - 1);\n      }\n\n      i %= length;\n\n      return i < 0 ? i + length : i;\n    }\n\n    function memoize(fn) {\n      const cache = Object.create(null);\n      return (key) => cache[key] || (cache[key] = fn(key));\n    }\n\n    class Deferred {\n      constructor() {\n        this.promise = new Promise((resolve, reject) => {\n          this.reject = reject;\n          this.resolve = resolve;\n        });\n      }}\n\n    function attr(element, name, value) {\n      if (isObject(name)) {\n        for (const key in name) {\n          attr(element, key, name[key]);\n        }\n        return;\n      }\n\n      if (isUndefined(value)) {var _toNode;\n        return (_toNode = toNode(element)) == null ? void 0 : _toNode.getAttribute(name);\n      } else {\n        for (const el of toNodes(element)) {\n          if (isFunction(value)) {\n            value = value.call(el, attr(el, name));\n          }\n\n          if (value === null) {\n            removeAttr(el, name);\n          } else {\n            el.setAttribute(name, value);\n          }\n        }\n      }\n    }\n\n    function hasAttr(element, name) {\n      return toNodes(element).some((element) => element.hasAttribute(name));\n    }\n\n    function removeAttr(element, name) {\n      const elements = toNodes(element);\n      for (const attribute of name.split(' ')) {\n        for (const element of elements) {\n          element.removeAttribute(attribute);\n        }\n      }\n    }\n\n    function data(element, attribute) {\n      for (const name of [attribute, \"data-\" + attribute]) {\n        if (hasAttr(element, name)) {\n          return attr(element, name);\n        }\n      }\n    }\n\n    const voidElements = {\n      area: true,\n      base: true,\n      br: true,\n      col: true,\n      embed: true,\n      hr: true,\n      img: true,\n      input: true,\n      keygen: true,\n      link: true,\n      menuitem: true,\n      meta: true,\n      param: true,\n      source: true,\n      track: true,\n      wbr: true };\n\n    function isVoidElement(element) {\n      return toNodes(element).some((element) => voidElements[element.tagName.toLowerCase()]);\n    }\n\n    function isVisible(element) {\n      return toNodes(element).some(\n      (element) => element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n\n    }\n\n    const selInput = 'input,select,textarea,button';\n    function isInput(element) {\n      return toNodes(element).some((element) => matches(element, selInput));\n    }\n\n    const selFocusable = selInput + \",a[href],[tabindex]\";\n    function isFocusable(element) {\n      return matches(element, selFocusable);\n    }\n\n    function parent(element) {var _toNode;\n      return (_toNode = toNode(element)) == null ? void 0 : _toNode.parentElement;\n    }\n\n    function filter$1(element, selector) {\n      return toNodes(element).filter((element) => matches(element, selector));\n    }\n\n    function matches(element, selector) {\n      return toNodes(element).some((element) => element.matches(selector));\n    }\n\n    function closest(element, selector) {\n      return isElement(element) ?\n      element.closest(startsWith(selector, '>') ? selector.slice(1) : selector) :\n      toNodes(element).\n      map((element) => closest(element, selector)).\n      filter(Boolean);\n    }\n\n    function within(element, selector) {\n      return isString(selector) ?\n      !!closest(element, selector) :\n      toNode(selector).contains(toNode(element));\n    }\n\n    function parents(element, selector) {\n      const elements = [];\n\n      while (element = parent(element)) {\n        if (!selector || matches(element, selector)) {\n          elements.push(element);\n        }\n      }\n\n      return elements;\n    }\n\n    function children(element, selector) {\n      element = toNode(element);\n      const children = element ? toNodes(element.children) : [];\n      return selector ? filter$1(children, selector) : children;\n    }\n\n    function index(element, ref) {\n      return ref ? toNodes(element).indexOf(toNode(ref)) : children(parent(element)).indexOf(element);\n    }\n\n    function query(selector, context) {\n      return find(selector, getContext(selector, context));\n    }\n\n    function queryAll(selector, context) {\n      return findAll(selector, getContext(selector, context));\n    }\n\n    function find(selector, context) {\n      return toNode(_query(selector, context, 'querySelector'));\n    }\n\n    function findAll(selector, context) {\n      return toNodes(_query(selector, context, 'querySelectorAll'));\n    }\n\n    const contextSelectorRe = /(^|[^\\\\],)\\s*[!>+~-]/;\n    const isContextSelector = memoize((selector) => selector.match(contextSelectorRe));\n\n    function getContext(selector, context) {if (context === void 0) {context = document;}\n      return isString(selector) && isContextSelector(selector) || isDocument(context) ?\n      context :\n      context.ownerDocument;\n    }\n\n    const contextSanitizeRe = /([!>+~-])(?=\\s+[!>+~-]|\\s*$)/g;\n    const sanatize = memoize((selector) => selector.replace(contextSanitizeRe, '$1 *'));\n\n    function _query(selector, context, queryFn) {if (context === void 0) {context = document;}\n      if (!selector || !isString(selector)) {\n        return selector;\n      }\n\n      selector = sanatize(selector);\n\n      if (isContextSelector(selector)) {\n        const split = splitSelector(selector);\n        selector = '';\n        for (let sel of split) {\n          let ctx = context;\n\n          if (sel[0] === '!') {\n            const selectors = sel.substr(1).trim().split(' ');\n            ctx = closest(parent(context), selectors[0]);\n            sel = selectors.slice(1).join(' ').trim();\n            if (!sel.length && split.length === 1) {\n              return ctx;\n            }\n          }\n\n          if (sel[0] === '-') {\n            const selectors = sel.substr(1).trim().split(' ');\n            const prev = (ctx || context).previousElementSibling;\n            ctx = matches(prev, sel.substr(1)) ? prev : null;\n            sel = selectors.slice(1).join(' ');\n          }\n\n          if (ctx) {\n            selector += \"\" + (selector ? ',' : '') + domPath(ctx) + \" \" + sel;\n          }\n        }\n\n        context = document;\n      }\n\n      try {\n        return context[queryFn](selector);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    const selectorRe = /.*?[^\\\\](?:,|$)/g;\n\n    const splitSelector = memoize((selector) =>\n    selector.match(selectorRe).map((selector) => selector.replace(/,$/, '').trim()));\n\n\n    function domPath(element) {\n      const names = [];\n      while (element.parentNode) {\n        const id = attr(element, 'id');\n        if (id) {\n          names.unshift(\"#\" + escape(id));\n          break;\n        } else {\n          let { tagName } = element;\n          if (tagName !== 'HTML') {\n            tagName += \":nth-child(\" + (index(element) + 1) + \")\";\n          }\n          names.unshift(tagName);\n          element = element.parentNode;\n        }\n      }\n      return names.join(' > ');\n    }\n\n    function escape(css) {\n      return isString(css) ? CSS.escape(css) : '';\n    }\n\n    function on() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n      let [targets, types, selector, listener, useCapture = false] = getArgs(args);\n\n      if (listener.length > 1) {\n        listener = detail(listener);\n      }\n\n      if (useCapture != null && useCapture.self) {\n        listener = selfFilter(listener);\n      }\n\n      if (selector) {\n        listener = delegate(selector, listener);\n      }\n\n      for (const type of types) {\n        for (const target of targets) {\n          target.addEventListener(type, listener, useCapture);\n        }\n      }\n\n      return () => off(targets, types, listener, useCapture);\n    }\n\n    function off() {for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}\n      let [targets, types,, listener, useCapture = false] = getArgs(args);\n      for (const type of types) {\n        for (const target of targets) {\n          target.removeEventListener(type, listener, useCapture);\n        }\n      }\n    }\n\n    function once() {for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n      const [element, types, selector, listener, useCapture = false, condition] = getArgs(args);\n      const off = on(\n      element,\n      types,\n      selector,\n      (e) => {\n        const result = !condition || condition(e);\n        if (result) {\n          off();\n          listener(e, result);\n        }\n      },\n      useCapture);\n\n\n      return off;\n    }\n\n    function trigger(targets, event, detail) {\n      return toEventTargets(targets).every((target) =>\n      target.dispatchEvent(createEvent(event, true, true, detail)));\n\n    }\n\n    function createEvent(e, bubbles, cancelable, detail) {if (bubbles === void 0) {bubbles = true;}if (cancelable === void 0) {cancelable = false;}\n      if (isString(e)) {\n        e = new CustomEvent(e, { bubbles, cancelable, detail });\n      }\n\n      return e;\n    }\n\n    function getArgs(args) {\n      // Event targets\n      args[0] = toEventTargets(args[0]);\n\n      // Event types\n      if (isString(args[1])) {\n        args[1] = args[1].split(' ');\n      }\n\n      // Delegate?\n      if (isFunction(args[2])) {\n        args.splice(2, 0, false);\n      }\n\n      return args;\n    }\n\n    function delegate(selector, listener) {\n      return (e) => {\n        const current =\n        selector[0] === '>' ?\n        findAll(selector, e.currentTarget).\n        reverse().\n        filter((element) => within(e.target, element))[0] :\n        closest(e.target, selector);\n\n        if (current) {\n          e.current = current;\n          listener.call(this, e);\n        }\n      };\n    }\n\n    function detail(listener) {\n      return (e) => isArray(e.detail) ? listener(e, ...e.detail) : listener(e);\n    }\n\n    function selfFilter(listener) {\n      return function (e) {\n        if (e.target === e.currentTarget || e.target === e.current) {\n          return listener.call(null, e);\n        }\n      };\n    }\n\n    function isEventTarget(target) {\n      return target && 'addEventListener' in target;\n    }\n\n    function toEventTarget(target) {\n      return isEventTarget(target) ? target : toNode(target);\n    }\n\n    function toEventTargets(target) {\n      return isArray(target) ?\n      target.map(toEventTarget).filter(Boolean) :\n      isString(target) ?\n      findAll(target) :\n      isEventTarget(target) ?\n      [target] :\n      toNodes(target);\n    }\n\n    function isTouch(e) {\n      return e.pointerType === 'touch' || !!e.touches;\n    }\n\n    function getEventPos(e) {var _e$touches, _e$changedTouches;\n      const { clientX: x, clientY: y } = ((_e$touches = e.touches) == null ? void 0 : _e$touches[0]) || ((_e$changedTouches = e.changedTouches) == null ? void 0 : _e$changedTouches[0]) || e;\n\n      return { x, y };\n    }\n\n    function ajax(url, options) {\n      const env = {\n        data: null,\n        method: 'GET',\n        headers: {},\n        xhr: new XMLHttpRequest(),\n        beforeSend: noop,\n        responseType: '',\n        ...options };\n\n      return Promise.resolve().\n      then(() => env.beforeSend(env)).\n      then(() => send(url, env));\n    }\n\n    function send(url, env) {\n      return new Promise((resolve, reject) => {\n        const { xhr } = env;\n\n        for (const prop in env) {\n          if (prop in xhr) {\n            try {\n              xhr[prop] = env[prop];\n            } catch (e) {\n              // noop\n            }\n          }\n        }\n\n        xhr.open(env.method.toUpperCase(), url);\n\n        for (const header in env.headers) {\n          xhr.setRequestHeader(header, env.headers[header]);\n        }\n\n        on(xhr, 'load', () => {\n          if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n            resolve(xhr);\n          } else {\n            reject(\n            assign(Error(xhr.statusText), {\n              xhr,\n              status: xhr.status }));\n\n\n          }\n        });\n\n        on(xhr, 'error', () => reject(assign(Error('Network Error'), { xhr })));\n        on(xhr, 'timeout', () => reject(assign(Error('Network Timeout'), { xhr })));\n\n        xhr.send(env.data);\n      });\n    }\n\n    function getImage(src, srcset, sizes) {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n\n        img.onerror = (e) => {\n          reject(e);\n        };\n        img.onload = () => {\n          resolve(img);\n        };\n\n        sizes && (img.sizes = sizes);\n        srcset && (img.srcset = srcset);\n        img.src = src;\n      });\n    }\n\n    const cssNumber = {\n      'animation-iteration-count': true,\n      'column-count': true,\n      'fill-opacity': true,\n      'flex-grow': true,\n      'flex-shrink': true,\n      'font-weight': true,\n      'line-height': true,\n      opacity: true,\n      order: true,\n      orphans: true,\n      'stroke-dasharray': true,\n      'stroke-dashoffset': true,\n      widows: true,\n      'z-index': true,\n      zoom: true };\n\n\n    function css(element, property, value, priority) {if (priority === void 0) {priority = '';}\n      const elements = toNodes(element);\n      for (const element of elements) {\n        if (isString(property)) {\n          property = propName(property);\n\n          if (isUndefined(value)) {\n            return getComputedStyle(element).getPropertyValue(property);\n          } else {\n            element.style.setProperty(\n            property,\n            isNumeric(value) && !cssNumber[property] ?\n            value + \"px\" :\n            value || isNumber(value) ?\n            value :\n            '',\n            priority);\n\n          }\n        } else if (isArray(property)) {\n          const props = {};\n          for (const prop of property) {\n            props[prop] = css(element, prop);\n          }\n          return props;\n        } else if (isObject(property)) {\n          priority = value;\n          each(property, (value, property) => css(element, property, value, priority));\n        }\n      }\n      return elements[0];\n    }\n\n    // https://drafts.csswg.org/cssom/#dom-cssstyledeclaration-setproperty\n    const propName = memoize((name) => vendorPropName(name));\n\n    function vendorPropName(name) {\n      if (startsWith(name, '--')) {\n        return name;\n      }\n\n      name = hyphenate(name);\n\n      const { style } = document.documentElement;\n\n      if (name in style) {\n        return name;\n      }\n\n      for (const prefix of ['webkit', 'moz']) {\n        const prefixedName = \"-\" + prefix + \"-\" + name;\n        if (prefixedName in style) {\n          return prefixedName;\n        }\n      }\n    }\n\n    function addClass(element) {for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {args[_key - 1] = arguments[_key];}\n      apply$1(element, args, 'add');\n    }\n\n    function removeClass(element) {for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {args[_key2 - 1] = arguments[_key2];}\n      apply$1(element, args, 'remove');\n    }\n\n    function removeClasses(element, cls) {\n      attr(element, 'class', (value) =>\n      (value || '').replace(new RegExp(\"\\\\b\" + cls + \"\\\\b\\\\s?\", 'g'), ''));\n\n    }\n\n    function replaceClass(element) {\n      (arguments.length <= 1 ? undefined : arguments[1]) && removeClass(element, arguments.length <= 1 ? undefined : arguments[1]);\n      (arguments.length <= 2 ? undefined : arguments[2]) && addClass(element, arguments.length <= 2 ? undefined : arguments[2]);\n    }\n\n    function hasClass(element, cls) {\n      [cls] = getClasses(cls);\n      return !!cls && toNodes(element).some((node) => node.classList.contains(cls));\n    }\n\n    function toggleClass(element, cls, force) {\n      const classes = getClasses(cls);\n\n      if (!isUndefined(force)) {\n        force = !!force;\n      }\n\n      for (const node of toNodes(element)) {\n        for (const cls of classes) {\n          node.classList.toggle(cls, force);\n        }\n      }\n    }\n\n    function apply$1(element, args, fn) {\n      args = args.reduce((args, arg) => args.concat(getClasses(arg)), []);\n\n      for (const node of toNodes(element)) {\n        node.classList[fn](...args);\n      }\n    }\n\n    function getClasses(str) {\n      return String(str).split(/\\s|,/).filter(Boolean);\n    }\n\n    function transition$1(element, props, duration, timing) {if (duration === void 0) {duration = 400;}if (timing === void 0) {timing = 'linear';}\n      duration = Math.round(duration);\n      return Promise.all(\n      toNodes(element).map(\n      (element) =>\n      new Promise((resolve, reject) => {\n        for (const name in props) {\n          const value = css(element, name);\n          if (value === '') {\n            css(element, name, value);\n          }\n        }\n\n        const timer = setTimeout(() => trigger(element, 'transitionend'), duration);\n\n        once(\n        element,\n        'transitionend transitioncanceled',\n        (_ref) => {let { type } = _ref;\n          clearTimeout(timer);\n          removeClass(element, 'uk-transition');\n          css(element, {\n            transitionProperty: '',\n            transitionDuration: '',\n            transitionTimingFunction: '' });\n\n          type === 'transitioncanceled' ? reject() : resolve(element);\n        },\n        { self: true });\n\n\n        addClass(element, 'uk-transition');\n        css(element, {\n          transitionProperty: Object.keys(props).map(propName).join(','),\n          transitionDuration: duration + \"ms\",\n          transitionTimingFunction: timing,\n          ...props });\n\n      })));\n\n\n    }\n\n    const Transition = {\n      start: transition$1,\n\n      async stop(element) {\n        trigger(element, 'transitionend');\n        await Promise.resolve();\n      },\n\n      async cancel(element) {\n        trigger(element, 'transitioncanceled');\n        await Promise.resolve();\n      },\n\n      inProgress(element) {\n        return hasClass(element, 'uk-transition');\n      } };\n\n\n    const animationPrefix = 'uk-animation-';\n\n    function animate$2(element, animation, duration, origin, out) {if (duration === void 0) {duration = 200;}\n      return Promise.all(\n      toNodes(element).map(\n      (element) =>\n      new Promise((resolve, reject) => {\n        trigger(element, 'animationcanceled');\n        const timer = setTimeout(() => trigger(element, 'animationend'), duration);\n\n        once(\n        element,\n        'animationend animationcanceled',\n        (_ref2) => {let { type } = _ref2;\n          clearTimeout(timer);\n\n          type === 'animationcanceled' ? reject() : resolve(element);\n\n          css(element, 'animationDuration', '');\n          removeClasses(element, animationPrefix + \"\\\\S*\");\n        },\n        { self: true });\n\n\n        css(element, 'animationDuration', duration + \"ms\");\n        addClass(element, animation, animationPrefix + (out ? 'leave' : 'enter'));\n\n        if (startsWith(animation, animationPrefix)) {\n          origin && addClass(element, \"uk-transform-origin-\" + origin);\n          out && addClass(element, animationPrefix + \"reverse\");\n        }\n      })));\n\n\n    }\n\n    const inProgressRe = new RegExp(animationPrefix + \"(enter|leave)\");\n\n    const Animation = {\n      in: animate$2,\n\n      out(element, animation, duration, origin) {\n        return animate$2(element, animation, duration, origin, true);\n      },\n\n      inProgress(element) {\n        return inProgressRe.test(attr(element, 'class'));\n      },\n\n      cancel(element) {\n        trigger(element, 'animationcanceled');\n      } };\n\n    const dirs$1 = {\n      width: ['left', 'right'],\n      height: ['top', 'bottom'] };\n\n\n    function dimensions$1(element) {\n      const rect = isElement(element) ?\n      toNode(element).getBoundingClientRect() :\n      { height: height(element), width: width(element), top: 0, left: 0 };\n\n      return {\n        height: rect.height,\n        width: rect.width,\n        top: rect.top,\n        left: rect.left,\n        bottom: rect.top + rect.height,\n        right: rect.left + rect.width };\n\n    }\n\n    function offset(element, coordinates) {\n      const currentOffset = dimensions$1(element);\n\n      if (element) {\n        const { scrollY, scrollX } = toWindow(element);\n        const offsetBy = { height: scrollY, width: scrollX };\n\n        for (const dir in dirs$1) {\n          for (const prop of dirs$1[dir]) {\n            currentOffset[prop] += offsetBy[dir];\n          }\n        }\n      }\n\n      if (!coordinates) {\n        return currentOffset;\n      }\n\n      const pos = css(element, 'position');\n\n      each(css(element, ['left', 'top']), (value, prop) =>\n      css(\n      element,\n      prop,\n      coordinates[prop] -\n      currentOffset[prop] +\n      toFloat(pos === 'absolute' && value === 'auto' ? position(element)[prop] : value)));\n\n\n    }\n\n    function position(element) {\n      let { top, left } = offset(element);\n\n      const {\n        ownerDocument: { body, documentElement },\n        offsetParent } =\n      toNode(element);\n      let parent = offsetParent || documentElement;\n\n      while (\n      parent && (\n      parent === body || parent === documentElement) &&\n      css(parent, 'position') === 'static')\n      {\n        parent = parent.parentNode;\n      }\n\n      if (isElement(parent)) {\n        const parentOffset = offset(parent);\n        top -= parentOffset.top + toFloat(css(parent, 'borderTopWidth'));\n        left -= parentOffset.left + toFloat(css(parent, 'borderLeftWidth'));\n      }\n\n      return {\n        top: top - toFloat(css(element, 'marginTop')),\n        left: left - toFloat(css(element, 'marginLeft')) };\n\n    }\n\n    function offsetPosition(element) {\n      element = toNode(element);\n\n      const offset = [element.offsetTop, element.offsetLeft];\n\n      while (element = element.offsetParent) {\n        offset[0] += element.offsetTop + toFloat(css(element, \"borderTopWidth\"));\n        offset[1] += element.offsetLeft + toFloat(css(element, \"borderLeftWidth\"));\n\n        if (css(element, 'position') === 'fixed') {\n          const win = toWindow(element);\n          offset[0] += win.scrollY;\n          offset[1] += win.scrollX;\n          return offset;\n        }\n      }\n\n      return offset;\n    }\n\n    const height = dimension('height');\n    const width = dimension('width');\n\n    function dimension(prop) {\n      const propName = ucfirst(prop);\n      return (element, value) => {\n        if (isUndefined(value)) {\n          if (isWindow(element)) {\n            return element[\"inner\" + propName];\n          }\n\n          if (isDocument(element)) {\n            const doc = element.documentElement;\n            return Math.max(doc[\"offset\" + propName], doc[\"scroll\" + propName]);\n          }\n\n          element = toNode(element);\n\n          value = css(element, prop);\n          value = value === 'auto' ? element[\"offset\" + propName] : toFloat(value) || 0;\n\n          return value - boxModelAdjust(element, prop);\n        } else {\n          return css(\n          element,\n          prop,\n          !value && value !== 0 ? '' : +value + boxModelAdjust(element, prop) + 'px');\n\n        }\n      };\n    }\n\n    function boxModelAdjust(element, prop, sizing) {if (sizing === void 0) {sizing = 'border-box';}\n      return css(element, 'boxSizing') === sizing ?\n      dirs$1[prop].\n      map(ucfirst).\n      reduce(\n      (value, prop) =>\n      value +\n      toFloat(css(element, \"padding\" + prop)) +\n      toFloat(css(element, \"border\" + prop + \"Width\")),\n      0) :\n\n      0;\n    }\n\n    function flipPosition(pos) {\n      for (const dir in dirs$1) {\n        for (const i in dirs$1[dir]) {\n          if (dirs$1[dir][i] === pos) {\n            return dirs$1[dir][1 - i];\n          }\n        }\n      }\n      return pos;\n    }\n\n    function toPx(value, property, element, offsetDim) {if (property === void 0) {property = 'width';}if (element === void 0) {element = window;}if (offsetDim === void 0) {offsetDim = false;}\n      if (!isString(value)) {\n        return toFloat(value);\n      }\n\n      return parseCalc(value).reduce((result, value) => {\n        const unit = parseUnit(value);\n        if (unit) {\n          value = percent(\n          unit === 'vh' ?\n          height(toWindow(element)) :\n          unit === 'vw' ?\n          width(toWindow(element)) :\n          offsetDim ?\n          element[\"offset\" + ucfirst(property)] :\n          dimensions$1(element)[property],\n          value);\n\n        }\n\n        return result + toFloat(value);\n      }, 0);\n    }\n\n    const calcRe = /-?\\d+(?:\\.\\d+)?(?:v[wh]|%|px)?/g;\n    const parseCalc = memoize((calc) => calc.toString().replace(/\\s/g, '').match(calcRe) || []);\n    const unitRe$1 = /(?:v[hw]|%)$/;\n    const parseUnit = memoize((str) => (str.match(unitRe$1) || [])[0]);\n\n    function percent(base, value) {\n      return base * toFloat(value) / 100;\n    }\n\n    function ready(fn) {\n      if (document.readyState !== 'loading') {\n        fn();\n        return;\n      }\n\n      once(document, 'DOMContentLoaded', fn);\n    }\n\n    function isTag(element, tagName) {var _element$tagName;\n      return (element == null ? void 0 : (_element$tagName = element.tagName) == null ? void 0 : _element$tagName.toLowerCase()) === tagName.toLowerCase();\n    }\n\n    function empty(element) {\n      element = $(element);\n      element.innerHTML = '';\n      return element;\n    }\n\n    function html(parent, html) {\n      return isUndefined(html) ? $(parent).innerHTML : append(empty(parent), html);\n    }\n\n    const prepend = applyFn('prepend');\n    const append = applyFn('append');\n    const before = applyFn('before');\n    const after = applyFn('after');\n\n    function applyFn(fn) {\n      return function (ref, element) {var _$;\n        const nodes = toNodes(isString(element) ? fragment(element) : element);\n        (_$ = $(ref)) == null ? void 0 : _$[fn](...nodes);\n        return unwrapSingle(nodes);\n      };\n    }\n\n    function remove$1(element) {\n      toNodes(element).forEach((element) => element.remove());\n    }\n\n    function wrapAll(element, structure) {\n      structure = toNode(before(element, structure));\n\n      while (structure.firstChild) {\n        structure = structure.firstChild;\n      }\n\n      append(structure, element);\n\n      return structure;\n    }\n\n    function wrapInner(element, structure) {\n      return toNodes(\n      toNodes(element).map((element) =>\n      element.hasChildNodes() ?\n      wrapAll(toNodes(element.childNodes), structure) :\n      append(element, structure)));\n\n\n    }\n\n    function unwrap(element) {\n      toNodes(element).\n      map(parent).\n      filter((value, index, self) => self.indexOf(value) === index).\n      forEach((parent) => parent.replaceWith(...parent.childNodes));\n    }\n\n    const fragmentRe = /^\\s*<(\\w+|!)[^>]*>/;\n    const singleTagRe = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>)?$/;\n\n    function fragment(html) {\n      const matches = singleTagRe.exec(html);\n      if (matches) {\n        return document.createElement(matches[1]);\n      }\n\n      const container = document.createElement('div');\n      if (fragmentRe.test(html)) {\n        container.insertAdjacentHTML('beforeend', html.trim());\n      } else {\n        container.textContent = html;\n      }\n\n      return unwrapSingle(container.childNodes);\n    }\n\n    function unwrapSingle(nodes) {\n      return nodes.length > 1 ? nodes : nodes[0];\n    }\n\n    function apply(node, fn) {\n      if (!isElement(node)) {\n        return;\n      }\n\n      fn(node);\n      node = node.firstElementChild;\n      while (node) {\n        const next = node.nextElementSibling;\n        apply(node, fn);\n        node = next;\n      }\n    }\n\n    function $(selector, context) {\n      return isHtml(selector) ? toNode(fragment(selector)) : find(selector, context);\n    }\n\n    function $$(selector, context) {\n      return isHtml(selector) ? toNodes(fragment(selector)) : findAll(selector, context);\n    }\n\n    function isHtml(str) {\n      return isString(str) && startsWith(str.trim(), '<');\n    }\n\n    const inBrowser = typeof window !== 'undefined';\n    const isRtl = inBrowser && attr(document.documentElement, 'dir') === 'rtl';\n\n    const hasTouch = inBrowser && 'ontouchstart' in window;\n    const hasPointerEvents = inBrowser && window.PointerEvent;\n\n    const pointerDown$1 = hasPointerEvents ? 'pointerdown' : hasTouch ? 'touchstart' : 'mousedown';\n    const pointerMove$1 = hasPointerEvents ? 'pointermove' : hasTouch ? 'touchmove' : 'mousemove';\n    const pointerUp$1 = hasPointerEvents ? 'pointerup' : hasTouch ? 'touchend' : 'mouseup';\n    const pointerEnter = hasPointerEvents ? 'pointerenter' : hasTouch ? '' : 'mouseenter';\n    const pointerLeave = hasPointerEvents ? 'pointerleave' : hasTouch ? '' : 'mouseleave';\n    const pointerCancel = hasPointerEvents ? 'pointercancel' : 'touchcancel';\n\n    /*\n        Based on:\n        Copyright (c) 2016 Wilson Page wilsonpage@me.com\n        https://github.com/wilsonpage/fastdom\n    */\n\n    const fastdom = {\n      reads: [],\n      writes: [],\n\n      read(task) {\n        this.reads.push(task);\n        scheduleFlush();\n        return task;\n      },\n\n      write(task) {\n        this.writes.push(task);\n        scheduleFlush();\n        return task;\n      },\n\n      clear(task) {\n        remove(this.reads, task);\n        remove(this.writes, task);\n      },\n\n      flush };\n\n\n    function flush(recursion) {\n      runTasks(fastdom.reads);\n      runTasks(fastdom.writes.splice(0));\n\n      fastdom.scheduled = false;\n\n      if (fastdom.reads.length || fastdom.writes.length) {\n        scheduleFlush(recursion + 1);\n      }\n    }\n\n    const RECURSION_LIMIT = 4;\n    function scheduleFlush(recursion) {\n      if (fastdom.scheduled) {\n        return;\n      }\n\n      fastdom.scheduled = true;\n      if (recursion && recursion < RECURSION_LIMIT) {\n        Promise.resolve().then(() => flush(recursion));\n      } else {\n        requestAnimationFrame(() => flush(1));\n      }\n    }\n\n    function runTasks(tasks) {\n      let task;\n      while (task = tasks.shift()) {\n        try {\n          task();\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    function remove(array, item) {\n      const index = array.indexOf(item);\n      return ~index && array.splice(index, 1);\n    }\n\n    function MouseTracker() {}\n\n    MouseTracker.prototype = {\n      positions: [],\n\n      init() {\n        this.positions = [];\n\n        let position;\n        this.unbind = on(document, 'mousemove', (e) => position = getEventPos(e));\n        this.interval = setInterval(() => {\n          if (!position) {\n            return;\n          }\n\n          this.positions.push(position);\n\n          if (this.positions.length > 5) {\n            this.positions.shift();\n          }\n        }, 50);\n      },\n\n      cancel() {var _this$unbind;\n        (_this$unbind = this.unbind) == null ? void 0 : _this$unbind.call(this);\n        this.interval && clearInterval(this.interval);\n      },\n\n      movesTo(target) {\n        if (this.positions.length < 2) {\n          return false;\n        }\n\n        const p = target.getBoundingClientRect();\n        const { left, right, top, bottom } = p;\n\n        const [prevPosition] = this.positions;\n        const position = last(this.positions);\n        const path = [prevPosition, position];\n\n        if (pointInRect(position, p)) {\n          return false;\n        }\n\n        const diagonals = [\n        [\n        { x: left, y: top },\n        { x: right, y: bottom }],\n\n        [\n        { x: left, y: bottom },\n        { x: right, y: top }]];\n\n\n\n        return diagonals.some((diagonal) => {\n          const intersection = intersect(path, diagonal);\n          return intersection && pointInRect(intersection, p);\n        });\n      } };\n\n\n    // Inspired by http://paulbourke.net/geometry/pointlineplane/\n    function intersect(_ref, _ref2) {let [{ x: x1, y: y1 }, { x: x2, y: y2 }] = _ref;let [{ x: x3, y: y3 }, { x: x4, y: y4 }] = _ref2;\n      const denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n\n      // Lines are parallel\n      if (denominator === 0) {\n        return false;\n      }\n\n      const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\n\n      if (ua < 0) {\n        return false;\n      }\n\n      // Return an object with the x and y coordinates of the intersection\n      return { x: x1 + ua * (x2 - x1), y: y1 + ua * (y2 - y1) };\n    }\n\n    function observeIntersection(targets, cb, options, intersecting) {if (intersecting === void 0) {intersecting = true;}\n      const observer = new IntersectionObserver(\n      intersecting ?\n      (entries, observer) => {\n        if (entries.some((entry) => entry.isIntersecting)) {\n          cb(entries, observer);\n        }\n      } :\n      cb,\n      options);\n\n      for (const el of toNodes(targets)) {\n        observer.observe(el);\n      }\n\n      return observer;\n    }\n\n    const hasResizeObserver = inBrowser && window.ResizeObserver;\n    function observeResize(targets, cb, options) {if (options === void 0) {options = { box: 'border-box' };}\n      if (hasResizeObserver) {\n        return observe(ResizeObserver, targets, cb, options);\n      }\n\n      // Fallback Safari < 13.1\n      initResizeListener();\n      listeners.add(cb);\n\n      return {\n        disconnect() {\n          listeners.delete(cb);\n        } };\n\n    }\n\n    let listeners;\n    function initResizeListener() {\n      if (listeners) {\n        return;\n      }\n\n      listeners = new Set();\n\n      // throttle 'resize'\n      let pendingResize;\n      const handleResize = () => {\n        if (pendingResize) {\n          return;\n        }\n        pendingResize = true;\n        requestAnimationFrame(() => pendingResize = false);\n        for (const listener of listeners) {\n          listener();\n        }\n      };\n\n      on(window, 'load resize', handleResize);\n      on(document, 'loadedmetadata load', handleResize, true);\n    }\n\n    function observeMutation(targets, cb, options) {\n      return observe(MutationObserver, targets, cb, options);\n    }\n\n    function observe(Observer, targets, cb, options) {\n      const observer = new Observer(cb);\n      for (const el of toNodes(targets)) {\n        observer.observe(el, options);\n      }\n\n      return observer;\n    }\n\n    const strats = {};\n\n    strats.events =\n    strats.created =\n    strats.beforeConnect =\n    strats.connected =\n    strats.beforeDisconnect =\n    strats.disconnected =\n    strats.destroy =\n    concatStrat;\n\n    // args strategy\n    strats.args = function (parentVal, childVal) {\n      return childVal !== false && concatStrat(childVal || parentVal);\n    };\n\n    // update strategy\n    strats.update = function (parentVal, childVal) {\n      return sortBy$1(\n      concatStrat(parentVal, isFunction(childVal) ? { read: childVal } : childVal),\n      'order');\n\n    };\n\n    // property strategy\n    strats.props = function (parentVal, childVal) {\n      if (isArray(childVal)) {\n        const value = {};\n        for (const key of childVal) {\n          value[key] = String;\n        }\n        childVal = value;\n      }\n\n      return strats.methods(parentVal, childVal);\n    };\n\n    // extend strategy\n    strats.computed = strats.methods = function (parentVal, childVal) {\n      return childVal ? parentVal ? { ...parentVal, ...childVal } : childVal : parentVal;\n    };\n\n    // data strategy\n    strats.data = function (parentVal, childVal, vm) {\n      if (!vm) {\n        if (!childVal) {\n          return parentVal;\n        }\n\n        if (!parentVal) {\n          return childVal;\n        }\n\n        return function (vm) {\n          return mergeFnData(parentVal, childVal, vm);\n        };\n      }\n\n      return mergeFnData(parentVal, childVal, vm);\n    };\n\n    function mergeFnData(parentVal, childVal, vm) {\n      return strats.computed(\n      isFunction(parentVal) ? parentVal.call(vm, vm) : parentVal,\n      isFunction(childVal) ? childVal.call(vm, vm) : childVal);\n\n    }\n\n    // concat strategy\n    function concatStrat(parentVal, childVal) {\n      parentVal = parentVal && !isArray(parentVal) ? [parentVal] : parentVal;\n\n      return childVal ?\n      parentVal ?\n      parentVal.concat(childVal) :\n      isArray(childVal) ?\n      childVal :\n      [childVal] :\n      parentVal;\n    }\n\n    // default strategy\n    function defaultStrat(parentVal, childVal) {\n      return isUndefined(childVal) ? parentVal : childVal;\n    }\n\n    function mergeOptions(parent, child, vm) {\n      const options = {};\n\n      if (isFunction(child)) {\n        child = child.options;\n      }\n\n      if (child.extends) {\n        parent = mergeOptions(parent, child.extends, vm);\n      }\n\n      if (child.mixins) {\n        for (const mixin of child.mixins) {\n          parent = mergeOptions(parent, mixin, vm);\n        }\n      }\n\n      for (const key in parent) {\n        mergeKey(key);\n      }\n\n      for (const key in child) {\n        if (!hasOwn(parent, key)) {\n          mergeKey(key);\n        }\n      }\n\n      function mergeKey(key) {\n        options[key] = (strats[key] || defaultStrat)(parent[key], child[key], vm);\n      }\n\n      return options;\n    }\n\n    function parseOptions(options, args) {if (args === void 0) {args = [];}\n      try {\n        return options ?\n        startsWith(options, '{') ?\n        JSON.parse(options) :\n        args.length && !includes(options, ':') ?\n        { [args[0]]: options } :\n        options.split(';').reduce((options, option) => {\n          const [key, value] = option.split(/:(.*)/);\n          if (key && !isUndefined(value)) {\n            options[key.trim()] = value.trim();\n          }\n          return options;\n        }, {}) :\n        {};\n      } catch (e) {\n        return {};\n      }\n    }\n\n    function play(el) {\n      if (isIFrame(el)) {\n        call(el, { func: 'playVideo', method: 'play' });\n      }\n\n      if (isHTML5(el)) {\n        try {\n          el.play().catch(noop);\n        } catch (e) {\n          // noop\n        }\n      }\n    }\n\n    function pause(el) {\n      if (isIFrame(el)) {\n        call(el, { func: 'pauseVideo', method: 'pause' });\n      }\n\n      if (isHTML5(el)) {\n        el.pause();\n      }\n    }\n\n    function mute(el) {\n      if (isIFrame(el)) {\n        call(el, { func: 'mute', method: 'setVolume', value: 0 });\n      }\n\n      if (isHTML5(el)) {\n        el.muted = true;\n      }\n    }\n\n    function isVideo(el) {\n      return isHTML5(el) || isIFrame(el);\n    }\n\n    function isHTML5(el) {\n      return isTag(el, 'video');\n    }\n\n    function isIFrame(el) {\n      return isTag(el, 'iframe') && (isYoutube(el) || isVimeo(el));\n    }\n\n    function isYoutube(el) {\n      return !!el.src.match(\n      /\\/\\/.*?youtube(-nocookie)?\\.[a-z]+\\/(watch\\?v=[^&\\s]+|embed)|youtu\\.be\\/.*/);\n\n    }\n\n    function isVimeo(el) {\n      return !!el.src.match(/vimeo\\.com\\/video\\/.*/);\n    }\n\n    async function call(el, cmd) {\n      await enableApi(el);\n      post(el, cmd);\n    }\n\n    function post(el, cmd) {\n      try {\n        el.contentWindow.postMessage(JSON.stringify({ event: 'command', ...cmd }), '*');\n      } catch (e) {\n        // noop\n      }\n    }\n\n    const stateKey = '_ukPlayer';\n    let counter = 0;\n    function enableApi(el) {\n      if (el[stateKey]) {\n        return el[stateKey];\n      }\n\n      const youtube = isYoutube(el);\n      const vimeo = isVimeo(el);\n\n      const id = ++counter;\n      let poller;\n\n      return el[stateKey] = new Promise((resolve) => {\n        youtube &&\n        once(el, 'load', () => {\n          const listener = () => post(el, { event: 'listening', id });\n          poller = setInterval(listener, 100);\n          listener();\n        });\n\n        once(window, 'message', resolve, false, (_ref) => {let { data } = _ref;\n          try {\n            data = JSON.parse(data);\n            return (\n              data && (\n              youtube && data.id === id && data.event === 'onReady' ||\n              vimeo && Number(data.player_id) === id));\n\n          } catch (e) {\n            // noop\n          }\n        });\n\n        el.src = \"\" + el.src + (includes(el.src, '?') ? '&' : '?') + (\n        youtube ? 'enablejsapi=1' : \"api=1&player_id=\" + id);\n\n      }).then(() => clearInterval(poller));\n    }\n\n    function isInView(element, offsetTop, offsetLeft) {if (offsetTop === void 0) {offsetTop = 0;}if (offsetLeft === void 0) {offsetLeft = 0;}\n      if (!isVisible(element)) {\n        return false;\n      }\n\n      return intersectRect(\n      ...scrollParents(element).\n      map((parent) => {\n        const { top, left, bottom, right } = offsetViewport(parent);\n\n        return {\n          top: top - offsetTop,\n          left: left - offsetLeft,\n          bottom: bottom + offsetTop,\n          right: right + offsetLeft };\n\n      }).\n      concat(offset(element)));\n\n    }\n\n    function scrollIntoView(element, _temp) {let { offset: offsetBy = 0 } = _temp === void 0 ? {} : _temp;\n      const parents = isVisible(element) ? scrollParents(element) : [];\n      return parents.reduce(\n      (fn, scrollElement, i) => {\n        const { scrollTop, scrollHeight, offsetHeight } = scrollElement;\n        const viewport = offsetViewport(scrollElement);\n        const maxScroll = scrollHeight - viewport.height;\n        const { height: elHeight, top: elTop } = parents[i - 1] ?\n        offsetViewport(parents[i - 1]) :\n        offset(element);\n\n        let top = Math.ceil(elTop - viewport.top - offsetBy + scrollTop);\n\n        if (offsetBy > 0 && offsetHeight < elHeight + offsetBy) {\n          top += offsetBy;\n        } else {\n          offsetBy = 0;\n        }\n\n        if (top > maxScroll) {\n          offsetBy -= top - maxScroll;\n          top = maxScroll;\n        } else if (top < 0) {\n          offsetBy -= top;\n          top = 0;\n        }\n\n        return () => scrollTo(scrollElement, top - scrollTop).then(fn);\n      },\n      () => Promise.resolve())();\n\n\n      function scrollTo(element, top) {\n        return new Promise((resolve) => {\n          const scroll = element.scrollTop;\n          const duration = getDuration(Math.abs(top));\n          const start = Date.now();\n\n          (function step() {\n            const percent = ease(clamp((Date.now() - start) / duration));\n\n            element.scrollTop = scroll + top * percent;\n\n            // scroll more if we have not reached our destination\n            if (percent === 1) {\n              resolve();\n            } else {\n              requestAnimationFrame(step);\n            }\n          })();\n        });\n      }\n\n      function getDuration(dist) {\n        return 40 * Math.pow(dist, 0.375);\n      }\n\n      function ease(k) {\n        return 0.5 * (1 - Math.cos(Math.PI * k));\n      }\n    }\n\n    function scrolledOver(element, startOffset, endOffset) {if (startOffset === void 0) {startOffset = 0;}if (endOffset === void 0) {endOffset = 0;}\n      if (!isVisible(element)) {\n        return 0;\n      }\n\n      const [scrollElement] = scrollParents(element, /auto|scroll/, true);\n      const { scrollHeight, scrollTop } = scrollElement;\n      const { height: viewportHeight } = offsetViewport(scrollElement);\n      const maxScroll = scrollHeight - viewportHeight;\n      const elementOffsetTop = offsetPosition(element)[0] - offsetPosition(scrollElement)[0];\n\n      const start = Math.max(0, elementOffsetTop - viewportHeight + startOffset);\n      const end = Math.min(maxScroll, elementOffsetTop + element.offsetHeight - endOffset);\n\n      return clamp((scrollTop - start) / (end - start));\n    }\n\n    function scrollParents(element, overflowRe, scrollable) {if (overflowRe === void 0) {overflowRe = /auto|scroll|hidden|clip/;}if (scrollable === void 0) {scrollable = false;}\n      const scrollEl = scrollingElement(element);\n\n      let ancestors = parents(element).reverse();\n      ancestors = ancestors.slice(ancestors.indexOf(scrollEl) + 1);\n\n      const fixedIndex = findIndex(ancestors, (el) => css(el, 'position') === 'fixed');\n      if (~fixedIndex) {\n        ancestors = ancestors.slice(fixedIndex);\n      }\n\n      return [scrollEl].\n      concat(\n      ancestors.filter(\n      (parent) =>\n      overflowRe.test(css(parent, 'overflow')) && (\n      !scrollable || parent.scrollHeight > offsetViewport(parent).height))).\n\n\n      reverse();\n    }\n\n    function offsetViewport(scrollElement) {\n      const window = toWindow(scrollElement);\n      const {\n        document: { documentElement } } =\n      window;\n      let viewportElement =\n      scrollElement === scrollingElement(scrollElement) ? window : scrollElement;\n\n      const { visualViewport } = window;\n      if (isWindow(viewportElement) && visualViewport) {\n        let { height, width, scale, pageTop: top, pageLeft: left } = visualViewport;\n        height = Math.round(height * scale);\n        width = Math.round(width * scale);\n        return { height, width, top, left, bottom: top + height, right: left + width };\n      }\n\n      let rect = offset(viewportElement);\n      for (let [prop, dir, start, end] of [\n      ['width', 'x', 'left', 'right'],\n      ['height', 'y', 'top', 'bottom']])\n      {\n        if (isWindow(viewportElement)) {\n          // iOS 12 returns <body> as scrollingElement\n          viewportElement = documentElement;\n        } else {\n          rect[start] += toFloat(css(viewportElement, \"border-\" + start + \"-width\"));\n        }\n        rect[prop] = rect[dir] = viewportElement[\"client\" + ucfirst(prop)];\n        rect[end] = rect[prop] + rect[start];\n      }\n      return rect;\n    }\n\n    function scrollingElement(element) {\n      return toWindow(element).document.scrollingElement;\n    }\n\n    const dirs = [\n    ['width', 'x', 'left', 'right'],\n    ['height', 'y', 'top', 'bottom']];\n\n\n    function positionAt(element, target, options) {\n      options = {\n        attach: {\n          element: ['left', 'top'],\n          target: ['left', 'top'],\n          ...options.attach },\n\n        offset: [0, 0],\n        placement: [],\n        ...options };\n\n\n      if (!isArray(target)) {\n        target = [target, target];\n      }\n\n      offset(element, getPosition(element, target, options));\n    }\n\n    function getPosition(element, target, options) {\n      const position = attachTo(element, target, options);\n      const { boundary, viewportOffset = 0, placement } = options;\n\n      let offsetPosition = position;\n      for (const [i, [prop,, start, end]] of Object.entries(dirs)) {\n        const viewport = getViewport$1(target[i], viewportOffset, boundary, i);\n\n        if (isWithin(position, viewport, i)) {\n          continue;\n        }\n\n        let offsetBy = 0;\n\n        // Flip\n        if (placement[i] === 'flip') {\n          const attach = options.attach.target[i];\n          if (\n          attach === end && position[end] <= viewport[end] ||\n          attach === start && position[start] >= viewport[start])\n          {\n            continue;\n          }\n\n          offsetBy = flip(element, target, options, i)[start] - position[start];\n\n          const scrollArea = getScrollArea(target[i], viewportOffset, i);\n\n          if (!isWithin(applyOffset(position, offsetBy, i), scrollArea, i)) {\n            if (isWithin(position, scrollArea, i)) {\n              continue;\n            }\n\n            if (options.recursion) {\n              return false;\n            }\n\n            const newPos = flipAxis(element, target, options);\n\n            if (newPos && isWithin(newPos, scrollArea, 1 - i)) {\n              return newPos;\n            }\n\n            continue;\n          }\n\n          // Shift\n        } else if (placement[i] === 'shift') {\n          const targetDim = offset(target[i]);\n          const { offset: elOffset } = options;\n          offsetBy =\n          clamp(\n          clamp(position[start], viewport[start], viewport[end] - position[prop]),\n          targetDim[start] - position[prop] + elOffset[i],\n          targetDim[end] - elOffset[i]) -\n          position[start];\n        }\n\n        offsetPosition = applyOffset(offsetPosition, offsetBy, i);\n      }\n\n      return offsetPosition;\n    }\n\n    function attachTo(element, target, options) {\n      let { attach, offset: offsetBy } = {\n        attach: {\n          element: ['left', 'top'],\n          target: ['left', 'top'],\n          ...options.attach },\n\n        offset: [0, 0],\n        ...options };\n\n\n      let elOffset = offset(element);\n\n      for (const [i, [prop,, start, end]] of Object.entries(dirs)) {\n        const targetOffset =\n        attach.target[i] === attach.element[i] ? offsetViewport(target[i]) : offset(target[i]);\n\n        elOffset = applyOffset(\n        elOffset,\n        targetOffset[start] -\n        elOffset[start] +\n        moveBy(attach.target[i], end, targetOffset[prop]) -\n        moveBy(attach.element[i], end, elOffset[prop]) +\n        +offsetBy[i],\n        i);\n\n      }\n      return elOffset;\n    }\n\n    function applyOffset(position, offset, i) {\n      const [, dir, start, end] = dirs[i];\n      const newPos = { ...position };\n      newPos[start] = position[dir] = position[start] + offset;\n      newPos[end] += offset;\n      return newPos;\n    }\n\n    function moveBy(attach, end, dim) {\n      return attach === 'center' ? dim / 2 : attach === end ? dim : 0;\n    }\n\n    function getViewport$1(element, viewportOffset, boundary, i) {\n      let viewport = getIntersectionArea(...scrollParents(element).map(offsetViewport));\n\n      if (viewportOffset) {\n        viewport[dirs[i][2]] += viewportOffset;\n        viewport[dirs[i][3]] -= viewportOffset;\n      }\n\n      if (boundary) {\n        viewport = getIntersectionArea(\n        viewport,\n        offset(isArray(boundary) ? boundary[i] : boundary));\n\n      }\n\n      return viewport;\n    }\n\n    function getScrollArea(element, viewportOffset, i) {\n      const [prop,, start, end] = dirs[i];\n      const [scrollElement] = scrollParents(element);\n      const viewport = offsetViewport(scrollElement);\n      viewport[start] -= scrollElement[\"scroll\" + ucfirst(start)] - viewportOffset;\n      viewport[end] = viewport[start] + scrollElement[\"scroll\" + ucfirst(prop)] - viewportOffset;\n      return viewport;\n    }\n\n    function getIntersectionArea() {\n      let area = {};for (var _len = arguments.length, rects = new Array(_len), _key = 0; _key < _len; _key++) {rects[_key] = arguments[_key];}\n      for (const rect of rects) {\n        for (const [,, start, end] of dirs) {\n          area[start] = Math.max(area[start] || 0, rect[start]);\n          area[end] = Math.min(...[area[end], rect[end]].filter(Boolean));\n        }\n      }\n      return area;\n    }\n\n    function isWithin(positionA, positionB, i) {\n      const [,, start, end] = dirs[i];\n      return positionA[start] >= positionB[start] && positionA[end] <= positionB[end];\n    }\n\n    function flip(element, target, _ref, i) {let { offset, attach } = _ref;\n      return attachTo(element, target, {\n        attach: {\n          element: flipAttach(attach.element, i),\n          target: flipAttach(attach.target, i) },\n\n        offset: flipOffset(offset, i) });\n\n    }\n\n    function flipAxis(element, target, options) {\n      return getPosition(element, target, {\n        ...options,\n        attach: {\n          element: options.attach.element.map(flipAttachAxis).reverse(),\n          target: options.attach.target.map(flipAttachAxis).reverse() },\n\n        offset: options.offset.reverse(),\n        placement: options.placement.reverse(),\n        recursion: true });\n\n    }\n\n    function flipAttach(attach, i) {\n      const newAttach = [...attach];\n      const index = dirs[i].indexOf(attach[i]);\n      if (~index) {\n        newAttach[i] = dirs[i][1 - index % 2 + 2];\n      }\n      return newAttach;\n    }\n\n    function flipAttachAxis(prop) {\n      for (let i = 0; i < dirs.length; i++) {\n        const index = dirs[i].indexOf(prop);\n        if (~index) {\n          return dirs[1 - i][index % 2 + 2];\n        }\n      }\n    }\n\n    function flipOffset(offset, i) {\n      offset = [...offset];\n      offset[i] *= -1;\n      return offset;\n    }\n\n    var util = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        ajax: ajax,\n        getImage: getImage,\n        Transition: Transition,\n        Animation: Animation,\n        attr: attr,\n        hasAttr: hasAttr,\n        removeAttr: removeAttr,\n        data: data,\n        addClass: addClass,\n        removeClass: removeClass,\n        removeClasses: removeClasses,\n        replaceClass: replaceClass,\n        hasClass: hasClass,\n        toggleClass: toggleClass,\n        dimensions: dimensions$1,\n        offset: offset,\n        position: position,\n        offsetPosition: offsetPosition,\n        height: height,\n        width: width,\n        boxModelAdjust: boxModelAdjust,\n        flipPosition: flipPosition,\n        toPx: toPx,\n        ready: ready,\n        isTag: isTag,\n        empty: empty,\n        html: html,\n        prepend: prepend,\n        append: append,\n        before: before,\n        after: after,\n        remove: remove$1,\n        wrapAll: wrapAll,\n        wrapInner: wrapInner,\n        unwrap: unwrap,\n        fragment: fragment,\n        apply: apply,\n        $: $,\n        $$: $$,\n        inBrowser: inBrowser,\n        isRtl: isRtl,\n        hasTouch: hasTouch,\n        pointerDown: pointerDown$1,\n        pointerMove: pointerMove$1,\n        pointerUp: pointerUp$1,\n        pointerEnter: pointerEnter,\n        pointerLeave: pointerLeave,\n        pointerCancel: pointerCancel,\n        on: on,\n        off: off,\n        once: once,\n        trigger: trigger,\n        createEvent: createEvent,\n        toEventTargets: toEventTargets,\n        isTouch: isTouch,\n        getEventPos: getEventPos,\n        fastdom: fastdom,\n        isVoidElement: isVoidElement,\n        isVisible: isVisible,\n        selInput: selInput,\n        isInput: isInput,\n        selFocusable: selFocusable,\n        isFocusable: isFocusable,\n        parent: parent,\n        filter: filter$1,\n        matches: matches,\n        closest: closest,\n        within: within,\n        parents: parents,\n        children: children,\n        index: index,\n        hasOwn: hasOwn,\n        hyphenate: hyphenate,\n        camelize: camelize,\n        ucfirst: ucfirst,\n        startsWith: startsWith,\n        endsWith: endsWith,\n        includes: includes,\n        findIndex: findIndex,\n        isArray: isArray,\n        toArray: toArray,\n        assign: assign,\n        isFunction: isFunction,\n        isObject: isObject,\n        isPlainObject: isPlainObject,\n        isWindow: isWindow,\n        isDocument: isDocument,\n        isNode: isNode,\n        isElement: isElement,\n        isBoolean: isBoolean,\n        isString: isString,\n        isNumber: isNumber,\n        isNumeric: isNumeric,\n        isEmpty: isEmpty,\n        isUndefined: isUndefined,\n        toBoolean: toBoolean,\n        toNumber: toNumber,\n        toFloat: toFloat,\n        toNode: toNode,\n        toNodes: toNodes,\n        toWindow: toWindow,\n        isEqual: isEqual,\n        swap: swap,\n        last: last,\n        each: each,\n        sortBy: sortBy$1,\n        uniqueBy: uniqueBy,\n        clamp: clamp,\n        noop: noop,\n        intersectRect: intersectRect,\n        pointInRect: pointInRect,\n        Dimensions: Dimensions,\n        getIndex: getIndex,\n        memoize: memoize,\n        Deferred: Deferred,\n        MouseTracker: MouseTracker,\n        observeIntersection: observeIntersection,\n        observeResize: observeResize,\n        observeMutation: observeMutation,\n        mergeOptions: mergeOptions,\n        parseOptions: parseOptions,\n        play: play,\n        pause: pause,\n        mute: mute,\n        isVideo: isVideo,\n        positionAt: positionAt,\n        query: query,\n        queryAll: queryAll,\n        find: find,\n        findAll: findAll,\n        escape: escape,\n        css: css,\n        propName: propName,\n        isInView: isInView,\n        scrollIntoView: scrollIntoView,\n        scrolledOver: scrolledOver,\n        scrollParents: scrollParents,\n        offsetViewport: offsetViewport\n    });\n\n    function globalAPI (UIkit) {\n      const DATA = UIkit.data;\n\n      UIkit.use = function (plugin) {\n        if (plugin.installed) {\n          return;\n        }\n\n        plugin.call(null, this);\n        plugin.installed = true;\n\n        return this;\n      };\n\n      UIkit.mixin = function (mixin, component) {\n        component = (isString(component) ? UIkit.component(component) : component) || this;\n        component.options = mergeOptions(component.options, mixin);\n      };\n\n      UIkit.extend = function (options) {\n        options = options || {};\n\n        const Super = this;\n        const Sub = function UIkitComponent(options) {\n          this._init(options);\n        };\n\n        Sub.prototype = Object.create(Super.prototype);\n        Sub.prototype.constructor = Sub;\n        Sub.options = mergeOptions(Super.options, options);\n\n        Sub.super = Super;\n        Sub.extend = Super.extend;\n\n        return Sub;\n      };\n\n      UIkit.update = function (element, e) {\n        element = element ? toNode(element) : document.body;\n\n        for (const parentEl of parents(element).reverse()) {\n          update(parentEl[DATA], e);\n        }\n\n        apply(element, (element) => update(element[DATA], e));\n      };\n\n      let container;\n      Object.defineProperty(UIkit, 'container', {\n        get() {\n          return container || document.body;\n        },\n\n        set(element) {\n          container = $(element);\n        } });\n\n\n      function update(data, e) {\n        if (!data) {\n          return;\n        }\n\n        for (const name in data) {\n          if (data[name]._connected) {\n            data[name]._callUpdate(e);\n          }\n        }\n      }\n    }\n\n    function hooksAPI (UIkit) {\n      UIkit.prototype._callHook = function (hook) {var _this$$options$hook;\n        (_this$$options$hook = this.$options[hook]) == null ? void 0 : _this$$options$hook.forEach((handler) => handler.call(this));\n      };\n\n      UIkit.prototype._callConnected = function () {\n        if (this._connected) {\n          return;\n        }\n\n        this._data = {};\n        this._computed = {};\n\n        this._initProps();\n\n        this._callHook('beforeConnect');\n        this._connected = true;\n\n        this._initEvents();\n        this._initObservers();\n\n        this._callHook('connected');\n        this._callUpdate();\n      };\n\n      UIkit.prototype._callDisconnected = function () {\n        if (!this._connected) {\n          return;\n        }\n\n        this._callHook('beforeDisconnect');\n        this._disconnectObservers();\n        this._unbindEvents();\n        this._callHook('disconnected');\n\n        this._connected = false;\n        delete this._watch;\n      };\n\n      UIkit.prototype._callUpdate = function (e) {if (e === void 0) {e = 'update';}\n        if (!this._connected) {\n          return;\n        }\n\n        if (e === 'update' || e === 'resize') {\n          this._callWatches();\n        }\n\n        if (!this.$options.update) {\n          return;\n        }\n\n        if (!this._updates) {\n          this._updates = new Set();\n          fastdom.read(() => {\n            if (this._connected) {\n              runUpdates.call(this, this._updates);\n            }\n            delete this._updates;\n          });\n        }\n\n        this._updates.add(e.type || e);\n      };\n\n      UIkit.prototype._callWatches = function () {\n        if (this._watch) {\n          return;\n        }\n\n        const initial = !hasOwn(this, '_watch');\n\n        this._watch = fastdom.read(() => {\n          if (this._connected) {\n            runWatches.call(this, initial);\n          }\n          this._watch = null;\n        });\n      };\n\n      function runUpdates(types) {\n        for (const { read, write, events = [] } of this.$options.update) {\n          if (!types.has('update') && !events.some((type) => types.has(type))) {\n            continue;\n          }\n\n          let result;\n          if (read) {\n            result = read.call(this, this._data, types);\n\n            if (result && isPlainObject(result)) {\n              assign(this._data, result);\n            }\n          }\n\n          if (write && result !== false) {\n            fastdom.write(() => {\n              if (this._connected) {\n                write.call(this, this._data, types);\n              }\n            });\n          }\n        }\n      }\n\n      function runWatches(initial) {\n        const {\n          $options: { computed } } =\n        this;\n        const values = { ...this._computed };\n        this._computed = {};\n\n        for (const key in computed) {\n          const { watch, immediate } = computed[key];\n          if (\n          watch && (\n          initial && immediate ||\n          hasOwn(values, key) && !isEqual(values[key], this[key])))\n          {\n            watch.call(this, this[key], values[key]);\n          }\n        }\n      }\n    }\n\n    function stateAPI (UIkit) {\n      let uid = 0;\n\n      UIkit.prototype._init = function (options) {\n        options = options || {};\n        options.data = normalizeData(options, this.constructor.options);\n\n        this.$options = mergeOptions(this.constructor.options, options, this);\n        this.$el = null;\n        this.$props = {};\n\n        this._uid = uid++;\n        this._initData();\n        this._initMethods();\n        this._initComputeds();\n        this._callHook('created');\n\n        if (options.el) {\n          this.$mount(options.el);\n        }\n      };\n\n      UIkit.prototype._initData = function () {\n        const { data = {} } = this.$options;\n\n        for (const key in data) {\n          this.$props[key] = this[key] = data[key];\n        }\n      };\n\n      UIkit.prototype._initMethods = function () {\n        const { methods } = this.$options;\n\n        if (methods) {\n          for (const key in methods) {\n            this[key] = methods[key].bind(this);\n          }\n        }\n      };\n\n      UIkit.prototype._initComputeds = function () {\n        const { computed } = this.$options;\n\n        this._computed = {};\n\n        if (computed) {\n          for (const key in computed) {\n            registerComputed(this, key, computed[key]);\n          }\n        }\n      };\n\n      UIkit.prototype._initProps = function (props) {\n        let key;\n\n        props = props || getProps$1(this.$options);\n\n        for (key in props) {\n          if (!isUndefined(props[key])) {\n            this.$props[key] = props[key];\n          }\n        }\n\n        const exclude = [this.$options.computed, this.$options.methods];\n        for (key in this.$props) {\n          if (key in props && notIn(exclude, key)) {\n            this[key] = this.$props[key];\n          }\n        }\n      };\n\n      UIkit.prototype._initEvents = function () {\n        this._events = [];\n        for (const event of this.$options.events || []) {\n          if (hasOwn(event, 'handler')) {\n            registerEvent(this, event);\n          } else {\n            for (const key in event) {\n              registerEvent(this, event[key], key);\n            }\n          }\n        }\n      };\n\n      UIkit.prototype._unbindEvents = function () {\n        this._events.forEach((unbind) => unbind());\n        delete this._events;\n      };\n\n      UIkit.prototype._initObservers = function () {\n        this._observers = [initPropsObserver(this)];\n\n        if (this.$options.computed) {\n          this.registerObserver(initChildListObserver(this));\n        }\n      };\n\n      UIkit.prototype.registerObserver = function () {\n        this._observers.push(...arguments);\n      };\n\n      UIkit.prototype._disconnectObservers = function () {\n        this._observers.forEach((observer) => observer == null ? void 0 : observer.disconnect());\n      };\n    }\n\n    function getProps$1(opts) {\n      const data$1 = {};\n      const { args = [], props = {}, el, id } = opts;\n\n      if (!props) {\n        return data$1;\n      }\n\n      for (const key in props) {\n        const prop = hyphenate(key);\n        let value = data(el, prop);\n\n        if (isUndefined(value)) {\n          continue;\n        }\n\n        value = props[key] === Boolean && value === '' ? true : coerce$1(props[key], value);\n\n        if (prop === 'target' && startsWith(value, '_')) {\n          continue;\n        }\n\n        data$1[key] = value;\n      }\n\n      const options = parseOptions(data(el, id), args);\n\n      for (const key in options) {\n        const prop = camelize(key);\n        if (!isUndefined(props[prop])) {\n          data$1[prop] = coerce$1(props[prop], options[key]);\n        }\n      }\n\n      return data$1;\n    }\n\n    function registerComputed(component, key, cb) {\n      Object.defineProperty(component, key, {\n        enumerable: true,\n\n        get() {\n          const { _computed, $props, $el } = component;\n\n          if (!hasOwn(_computed, key)) {\n            _computed[key] = (cb.get || cb).call(component, $props, $el);\n          }\n\n          return _computed[key];\n        },\n\n        set(value) {\n          const { _computed } = component;\n\n          _computed[key] = cb.set ? cb.set.call(component, value) : value;\n\n          if (isUndefined(_computed[key])) {\n            delete _computed[key];\n          }\n        } });\n\n    }\n\n    function registerEvent(component, event, key) {\n      if (!isPlainObject(event)) {\n        event = { name: key, handler: event };\n      }\n\n      let { name, el, handler, capture, passive, delegate, filter, self } = event;\n      el = isFunction(el) ? el.call(component) : el || component.$el;\n\n      if (isArray(el)) {\n        el.forEach((el) => registerEvent(component, { ...event, el }, key));\n        return;\n      }\n\n      if (!el || filter && !filter.call(component)) {\n        return;\n      }\n\n      component._events.push(\n      on(\n      el,\n      name,\n      delegate ? isString(delegate) ? delegate : delegate.call(component) : null,\n      isString(handler) ? component[handler] : handler.bind(component),\n      { passive, capture, self }));\n\n\n    }\n\n    function notIn(options, key) {\n      return options.every((arr) => !arr || !hasOwn(arr, key));\n    }\n\n    function coerce$1(type, value) {\n      if (type === Boolean) {\n        return toBoolean(value);\n      } else if (type === Number) {\n        return toNumber(value);\n      } else if (type === 'list') {\n        return toList(value);\n      }\n\n      return type ? type(value) : value;\n    }\n\n    function toList(value) {\n      return isArray(value) ?\n      value :\n      isString(value) ?\n      value.\n      split(/,(?![^(]*\\))/).\n      map((value) => isNumeric(value) ? toNumber(value) : toBoolean(value.trim())) :\n      [value];\n    }\n\n    function normalizeData(_ref, _ref2) {let { data = {} } = _ref;let { args = [], props = {} } = _ref2;\n      if (isArray(data)) {\n        data = data.slice(0, args.length).reduce((data, value, index) => {\n          if (isPlainObject(value)) {\n            assign(data, value);\n          } else {\n            data[args[index]] = value;\n          }\n          return data;\n        }, {});\n      }\n\n      for (const key in data) {\n        if (isUndefined(data[key])) {\n          delete data[key];\n        } else if (props[key]) {\n          data[key] = coerce$1(props[key], data[key]);\n        }\n      }\n\n      return data;\n    }\n\n    function initChildListObserver(component) {\n      const { el } = component.$options;\n\n      const observer = new MutationObserver(() => component._callWatches());\n      observer.observe(el, {\n        childList: true,\n        subtree: true });\n\n\n      return observer;\n    }\n\n    function initPropsObserver(component) {\n      const { $options, $props } = component;\n      const { id, attrs, props, el } = $options;\n\n      if (!props || attrs === false) {\n        return;\n      }\n\n      const attributes = isArray(attrs) ? attrs : Object.keys(props);\n      const filter = attributes.map((key) => hyphenate(key)).concat(id);\n\n      const observer = new MutationObserver((records) => {\n        const data = getProps$1($options);\n        if (\n        records.some((_ref3) => {let { attributeName } = _ref3;\n          const prop = attributeName.replace('data-', '');\n          return (prop === id ? attributes : [camelize(prop), camelize(attributeName)]).some(\n          (prop) => !isUndefined(data[prop]) && data[prop] !== $props[prop]);\n\n        }))\n        {\n          component.$reset();\n        }\n      });\n\n      observer.observe(el, {\n        attributes: true,\n        attributeFilter: filter.concat(filter.map((key) => \"data-\" + key)) });\n\n\n      return observer;\n    }\n\n    function instanceAPI (UIkit) {\n      const DATA = UIkit.data;\n\n      UIkit.prototype.$create = function (component, element, data) {\n        return UIkit[component](element, data);\n      };\n\n      UIkit.prototype.$mount = function (el) {\n        const { name } = this.$options;\n\n        if (!el[DATA]) {\n          el[DATA] = {};\n        }\n\n        if (el[DATA][name]) {\n          return;\n        }\n\n        el[DATA][name] = this;\n\n        this.$el = this.$options.el = this.$options.el || el;\n\n        if (within(el, document)) {\n          this._callConnected();\n        }\n      };\n\n      UIkit.prototype.$reset = function () {\n        this._callDisconnected();\n        this._callConnected();\n      };\n\n      UIkit.prototype.$destroy = function (removeEl) {if (removeEl === void 0) {removeEl = false;}\n        const { el, name } = this.$options;\n\n        if (el) {\n          this._callDisconnected();\n        }\n\n        this._callHook('destroy');\n\n        if (!(el != null && el[DATA])) {\n          return;\n        }\n\n        delete el[DATA][name];\n\n        if (!isEmpty(el[DATA])) {\n          delete el[DATA];\n        }\n\n        if (removeEl) {\n          remove$1(this.$el);\n        }\n      };\n\n      UIkit.prototype.$emit = function (e) {\n        this._callUpdate(e);\n      };\n\n      UIkit.prototype.$update = function (element, e) {if (element === void 0) {element = this.$el;}\n        UIkit.update(element, e);\n      };\n\n      UIkit.prototype.$getComponent = UIkit.getComponent;\n\n      Object.defineProperty(\n      UIkit.prototype,\n      '$container',\n      Object.getOwnPropertyDescriptor(UIkit, 'container'));\n\n    }\n\n    const components$3 = {};\n    function componentAPI (UIkit) {\n      const { data: DATA, prefix: PREFIX } = UIkit;\n\n      UIkit.component = function (name, options) {\n        name = hyphenate(name);\n        const id = PREFIX + name;\n\n        if (!options) {\n          if (isPlainObject(components$3[id])) {\n            components$3[id] = components$3[\"data-\" + id] = UIkit.extend(components$3[id]);\n          }\n\n          return components$3[id];\n        }\n\n        name = camelize(name);\n\n        UIkit[name] = function (element, data) {\n          const component = UIkit.component(name);\n\n          return component.options.functional ?\n          new component({ data: isPlainObject(element) ? element : [...arguments] }) :\n          element ?\n          $$(element).map(init)[0] :\n          init();\n\n          function init(element) {\n            const instance = UIkit.getComponent(element, name);\n\n            if (instance) {\n              if (data) {\n                instance.$destroy();\n              } else {\n                return instance;\n              }\n            }\n\n            return new component({ el: element, data });\n          }\n        };\n\n        const opt = isPlainObject(options) ? { ...options } : options.options;\n\n        opt.id = id;\n        opt.name = name;\n\n        opt.install == null ? void 0 : opt.install(UIkit, opt, name);\n\n        if (UIkit._initialized && !opt.functional) {\n          requestAnimationFrame(() => UIkit[name](\"[\" + id + \"],[data-\" + id + \"]\"));\n        }\n\n        return components$3[id] = components$3[\"data-\" + id] = isPlainObject(options) ? opt : options;\n      };\n\n      UIkit.getComponents = (element) => (element == null ? void 0 : element[DATA]) || {};\n      UIkit.getComponent = (element, name) => UIkit.getComponents(element)[name];\n\n      UIkit.connect = (node) => {\n        if (node[DATA]) {\n          for (const name in node[DATA]) {\n            node[DATA][name]._callConnected();\n          }\n        }\n\n        for (const attribute of node.getAttributeNames()) {\n          const name = getComponentName(attribute);\n          name && UIkit[name](node);\n        }\n      };\n\n      UIkit.disconnect = (node) => {\n        for (const name in node[DATA]) {\n          node[DATA][name]._callDisconnected();\n        }\n      };\n    }\n\n    function getComponentName(attribute) {\n      const cmp = components$3[attribute];\n      return cmp && (isPlainObject(cmp) ? cmp : cmp.options).name;\n    }\n\n    const UIkit = function (options) {\n      this._init(options);\n    };\n\n    UIkit.util = util;\n    UIkit.data = '__uikit__';\n    UIkit.prefix = 'uk-';\n    UIkit.options = {};\n    UIkit.version = '3.15.10';\n\n    globalAPI(UIkit);\n    hooksAPI(UIkit);\n    stateAPI(UIkit);\n    componentAPI(UIkit);\n    instanceAPI(UIkit);\n\n    function boot (UIkit) {\n      const { connect, disconnect } = UIkit;\n\n      if (!inBrowser || !window.MutationObserver) {\n        return;\n      }\n\n      requestAnimationFrame(function () {\n        if (document.body) {\n          apply(document.body, connect);\n        }\n\n        new MutationObserver((records) => records.forEach(applyChildListMutation)).observe(\n        document,\n        {\n          childList: true,\n          subtree: true });\n\n\n\n        new MutationObserver((records) => records.forEach(applyAttributeMutation)).observe(\n        document,\n        {\n          attributes: true,\n          subtree: true });\n\n\n\n        UIkit._initialized = true;\n      });\n\n      function applyChildListMutation(_ref) {let { addedNodes, removedNodes } = _ref;\n        for (const node of addedNodes) {\n          apply(node, connect);\n        }\n\n        for (const node of removedNodes) {\n          apply(node, disconnect);\n        }\n      }\n\n      function applyAttributeMutation(_ref2) {let { target, attributeName } = _ref2;\n        const name = getComponentName(attributeName);\n\n        if (name) {var _UIkit$getComponent;\n          if (hasAttr(target, attributeName)) {\n            UIkit[name](target);\n            return;\n          }\n\n          (_UIkit$getComponent = UIkit.getComponent(target, name)) == null ? void 0 : _UIkit$getComponent.$destroy();\n        }\n      }\n    }\n\n    var Class = {\n      connected() {\n        addClass(this.$el, this.$options.id);\n      } };\n\n    var Lazyload = {\n      data: {\n        preload: 5 },\n\n\n      methods: {\n        lazyload(observeTargets, targets) {if (observeTargets === void 0) {observeTargets = this.$el;}if (targets === void 0) {targets = this.$el;}\n          this.registerObserver(\n          observeIntersection(observeTargets, (entries, observer) => {\n            for (const el of toNodes(isFunction(targets) ? targets() : targets)) {\n              $$('[loading=\"lazy\"]', el).\n              slice(0, this.preload - 1).\n              forEach((el) => removeAttr(el, 'loading'));\n            }\n\n            for (const el of entries.\n            filter((_ref) => {let { isIntersecting } = _ref;return isIntersecting;}).\n            map((_ref2) => {let { target } = _ref2;return target;})) {\n              observer.unobserve(el);\n            }\n          }));\n\n        } } };\n\n    var Togglable = {\n      props: {\n        cls: Boolean,\n        animation: 'list',\n        duration: Number,\n        velocity: Number,\n        origin: String,\n        transition: String },\n\n\n      data: {\n        cls: false,\n        animation: [false],\n        duration: 200,\n        velocity: 0.2,\n        origin: false,\n        transition: 'ease',\n        clsEnter: 'uk-togglabe-enter',\n        clsLeave: 'uk-togglabe-leave' },\n\n\n      computed: {\n        hasAnimation(_ref) {let { animation } = _ref;\n          return !!animation[0];\n        },\n\n        hasTransition(_ref2) {let { animation } = _ref2;\n          return ['slide', 'reveal'].some((transition) => startsWith(animation[0], transition));\n        } },\n\n\n      methods: {\n        toggleElement(targets, toggle, animate) {\n          return new Promise((resolve) =>\n          Promise.all(\n          toNodes(targets).map((el) => {\n            const show = isBoolean(toggle) ? toggle : !this.isToggled(el);\n\n            if (!trigger(el, \"before\" + (show ? 'show' : 'hide'), [this])) {\n              return Promise.reject();\n            }\n\n            const promise = (\n            isFunction(animate) ?\n            animate :\n            animate === false || !this.hasAnimation ?\n            toggleInstant :\n            this.hasTransition ?\n            toggleTransition :\n            toggleAnimation)(\n            el, show, this);\n\n            const cls = show ? this.clsEnter : this.clsLeave;\n\n            addClass(el, cls);\n\n            trigger(el, show ? 'show' : 'hide', [this]);\n\n            const done = () => {\n              removeClass(el, cls);\n              trigger(el, show ? 'shown' : 'hidden', [this]);\n            };\n\n            return promise ?\n            promise.then(done, () => {\n              removeClass(el, cls);\n              return Promise.reject();\n            }) :\n            done();\n          })).\n          then(resolve, noop));\n\n        },\n\n        isToggled(el) {if (el === void 0) {el = this.$el;}\n          [el] = toNodes(el);\n          return hasClass(el, this.clsEnter) ?\n          true :\n          hasClass(el, this.clsLeave) ?\n          false :\n          this.cls ?\n          hasClass(el, this.cls.split(' ')[0]) :\n          isVisible(el);\n        },\n\n        _toggle(el, toggled) {\n          if (!el) {\n            return;\n          }\n\n          toggled = Boolean(toggled);\n\n          let changed;\n          if (this.cls) {\n            changed = includes(this.cls, ' ') || toggled !== hasClass(el, this.cls);\n            changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n          } else {\n            changed = toggled === el.hidden;\n            changed && (el.hidden = !toggled);\n          }\n\n          $$('[autofocus]', el).some((el) => isVisible(el) ? el.focus() || true : el.blur());\n\n          if (changed) {\n            trigger(el, 'toggled', [toggled, this]);\n          }\n        } } };\n\n\n\n    function toggleInstant(el, show, _ref3) {let { _toggle } = _ref3;\n      Animation.cancel(el);\n      Transition.cancel(el);\n      return _toggle(el, show);\n    }\n\n    async function toggleTransition(\n    el,\n    show, _ref4)\n\n    {var _animation$;let { animation, duration, velocity, transition, _toggle } = _ref4;\n      const [mode = 'reveal', startProp = 'top'] = ((_animation$ = animation[0]) == null ? void 0 : _animation$.split('-')) || [];\n\n      const dirs = [\n      ['left', 'right'],\n      ['top', 'bottom']];\n\n      const dir = dirs[includes(dirs[0], startProp) ? 0 : 1];\n      const end = dir[1] === startProp;\n      const props = ['width', 'height'];\n      const dimProp = props[dirs.indexOf(dir)];\n      const marginProp = \"margin-\" + dir[0];\n      const marginStartProp = \"margin-\" + startProp;\n\n      let currentDim = dimensions$1(el)[dimProp];\n\n      const inProgress = Transition.inProgress(el);\n      await Transition.cancel(el);\n\n      if (show) {\n        _toggle(el, true);\n      }\n\n      const prevProps = Object.fromEntries(\n      [\n      'padding',\n      'border',\n      'width',\n      'height',\n      'minWidth',\n      'minHeight',\n      'overflowY',\n      'overflowX',\n      marginProp,\n      marginStartProp].\n      map((key) => [key, el.style[key]]));\n\n\n      const dim = dimensions$1(el);\n      const currentMargin = toFloat(css(el, marginProp));\n      const marginStart = toFloat(css(el, marginStartProp));\n      const endDim = dim[dimProp] + marginStart;\n\n      if (!inProgress && !show) {\n        currentDim += marginStart;\n      }\n\n      const [wrapper] = wrapInner(el, '<div>');\n      css(wrapper, {\n        boxSizing: 'border-box',\n        height: dim.height,\n        width: dim.width,\n        ...css(el, [\n        'overflow',\n        'padding',\n        'borderTop',\n        'borderRight',\n        'borderBottom',\n        'borderLeft',\n        'borderImage',\n        marginStartProp]) });\n\n\n\n      css(el, {\n        padding: 0,\n        border: 0,\n        minWidth: 0,\n        minHeight: 0,\n        [marginStartProp]: 0,\n        width: dim.width,\n        height: dim.height,\n        overflow: 'hidden',\n        [dimProp]: currentDim });\n\n\n      const percent = currentDim / endDim;\n      duration = (velocity * endDim + duration) * (show ? 1 - percent : percent);\n      const endProps = { [dimProp]: show ? endDim : 0 };\n\n      if (end) {\n        css(el, marginProp, endDim - currentDim + currentMargin);\n        endProps[marginProp] = show ? currentMargin : endDim + currentMargin;\n      }\n\n      if (!end ^ mode === 'reveal') {\n        css(wrapper, marginProp, -endDim + currentDim);\n        Transition.start(wrapper, { [marginProp]: show ? 0 : -endDim }, duration, transition);\n      }\n\n      try {\n        await Transition.start(el, endProps, duration, transition);\n      } finally {\n        css(el, prevProps);\n        unwrap(wrapper.firstChild);\n\n        if (!show) {\n          _toggle(el, false);\n        }\n      }\n    }\n\n    function toggleAnimation(el, show, cmp) {\n      Animation.cancel(el);\n\n      const { animation, duration, _toggle } = cmp;\n\n      if (show) {\n        _toggle(el, true);\n        return Animation.in(el, animation[0], duration, cmp.origin);\n      }\n\n      return Animation.out(el, animation[1] || animation[0], duration, cmp.origin).then(() =>\n      _toggle(el, false));\n\n    }\n\n    var Accordion = {\n      mixins: [Class, Lazyload, Togglable],\n\n      props: {\n        animation: Boolean,\n        targets: String,\n        active: null,\n        collapsible: Boolean,\n        multiple: Boolean,\n        toggle: String,\n        content: String,\n        offset: Number },\n\n\n      data: {\n        targets: '> *',\n        active: false,\n        animation: true,\n        collapsible: true,\n        multiple: false,\n        clsOpen: 'uk-open',\n        toggle: '> .uk-accordion-title',\n        content: '> .uk-accordion-content',\n        offset: 0 },\n\n\n      computed: {\n        items: {\n          get(_ref, $el) {let { targets } = _ref;\n            return $$(targets, $el);\n          },\n\n          watch(items, prev) {\n            if (prev || hasClass(items, this.clsOpen)) {\n              return;\n            }\n\n            const active =\n            this.active !== false && items[Number(this.active)] ||\n            !this.collapsible && items[0];\n\n            if (active) {\n              this.toggle(active, false);\n            }\n          },\n\n          immediate: true },\n\n\n        toggles(_ref2) {let { toggle } = _ref2;\n          return this.items.map((item) => $(toggle, item));\n        },\n\n        contents: {\n          get(_ref3) {let { content } = _ref3;\n            return this.items.map((item) => $(content, item));\n          },\n\n          watch(items) {\n            for (const el of items) {\n              hide(\n              el,\n              !hasClass(\n              this.items.find((item) => within(el, item)),\n              this.clsOpen));\n\n\n            }\n          },\n\n          immediate: true } },\n\n\n\n      connected() {\n        this.lazyload();\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return this.targets + \" \" + this.$props.toggle;\n        },\n\n        async handler(e) {var _this$_off;\n          e.preventDefault();\n\n          (_this$_off = this._off) == null ? void 0 : _this$_off.call(this);\n          this._off = keepScrollPosition(e.target);\n          await this.toggle(index(this.toggles, e.current));\n          this._off();\n        } }],\n\n\n\n      methods: {\n        async toggle(item, animate) {\n          item = this.items[getIndex(item, this.items)];\n          let items = [item];\n          const activeItems = filter$1(this.items, \".\" + this.clsOpen);\n\n          if (!this.multiple && !includes(activeItems, items[0])) {\n            items = items.concat(activeItems);\n          }\n\n          if (!this.collapsible && activeItems.length < 2 && includes(activeItems, item)) {\n            return;\n          }\n\n          await Promise.all(\n          items.map((el) =>\n          this.toggleElement(el, !includes(activeItems, el), (el, show) => {\n            toggleClass(el, this.clsOpen, show);\n            attr($(this.$props.toggle, el), 'aria-expanded', show);\n\n            if (animate === false || !this.animation) {\n              hide($(this.content, el), !show);\n              return;\n            }\n\n            return transition(el, show, this);\n          })));\n\n\n        } } };\n\n\n\n    function hide(el, hide) {\n      el && (el.hidden = hide);\n    }\n\n    async function transition(el, show, _ref4) {var _el$_wrapper;let { content, duration, velocity, transition } = _ref4;\n      content = ((_el$_wrapper = el._wrapper) == null ? void 0 : _el$_wrapper.firstElementChild) || $(content, el);\n\n      if (!el._wrapper) {\n        el._wrapper = wrapAll(content, '<div>');\n      }\n\n      const wrapper = el._wrapper;\n      css(wrapper, 'overflow', 'hidden');\n      const currentHeight = toFloat(css(wrapper, 'height'));\n\n      await Transition.cancel(wrapper);\n      hide(content, false);\n\n      const endHeight =\n      toFloat(css(content, 'height')) +\n      toFloat(css(content, 'marginTop')) +\n      toFloat(css(content, 'marginBottom'));\n      const percent = currentHeight / endHeight;\n      duration = (velocity * endHeight + duration) * (show ? 1 - percent : percent);\n      css(wrapper, 'height', currentHeight);\n\n      await Transition.start(wrapper, { height: show ? endHeight : 0 }, duration, transition);\n\n      unwrap(content);\n      delete el._wrapper;\n\n      if (!show) {\n        hide(content, true);\n      }\n    }\n\n    function keepScrollPosition(el) {\n      const scrollParent = scrollParents(el)[0];\n      let frame;\n      (function scroll() {\n        frame = requestAnimationFrame(() => {\n          const { top } = el.getBoundingClientRect();\n          if (top < 0) {\n            scrollParent.scrollTop += top;\n          }\n          scroll();\n        });\n      })();\n\n      return () => requestAnimationFrame(() => cancelAnimationFrame(frame));\n    }\n\n    var alert = {\n      mixins: [Class, Togglable],\n\n      args: 'animation',\n\n      props: {\n        animation: Boolean,\n        close: String },\n\n\n      data: {\n        animation: true,\n        selClose: '.uk-alert-close',\n        duration: 150 },\n\n\n      events: {\n        name: 'click',\n\n        delegate() {\n          return this.selClose;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.close();\n        } },\n\n\n      methods: {\n        async close() {\n          await this.toggleElement(this.$el, false, animate$1);\n          this.$destroy(true);\n        } } };\n\n\n\n    function animate$1(el, show, _ref) {let { duration, transition, velocity } = _ref;\n      const height = toFloat(css(el, 'height'));\n      css(el, 'height', height);\n      return Transition.start(\n      el,\n      {\n        height: 0,\n        marginTop: 0,\n        marginBottom: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        borderTop: 0,\n        borderBottom: 0,\n        opacity: 0 },\n\n      velocity * height + duration,\n      transition);\n\n    }\n\n    var Video = {\n      args: 'autoplay',\n\n      props: {\n        automute: Boolean,\n        autoplay: Boolean },\n\n\n      data: {\n        automute: false,\n        autoplay: true },\n\n\n      connected() {\n        this.inView = this.autoplay === 'inview';\n\n        if (this.inView && !hasAttr(this.$el, 'preload')) {\n          this.$el.preload = 'none';\n        }\n\n        if (isTag(this.$el, 'iframe') && !hasAttr(this.$el, 'allow')) {\n          this.$el.allow = 'autoplay';\n        }\n\n        if (this.automute) {\n          mute(this.$el);\n        }\n\n        this.registerObserver(observeIntersection(this.$el, () => this.$emit(), {}, false));\n      },\n\n      update: {\n        read() {\n          if (!isVideo(this.$el)) {\n            return false;\n          }\n\n          return {\n            visible: isVisible(this.$el) && css(this.$el, 'visibility') !== 'hidden',\n            inView: this.inView && isInView(this.$el) };\n\n        },\n\n        write(_ref) {let { visible, inView } = _ref;\n          if (!visible || this.inView && !inView) {\n            pause(this.$el);\n          } else if (this.autoplay === true || this.inView && inView) {\n            play(this.$el);\n          }\n        } } };\n\n    var Resize = {\n      connected() {var _this$$options$resize;\n        this.registerObserver(\n        observeResize(((_this$$options$resize = this.$options.resizeTargets) == null ? void 0 : _this$$options$resize.call(this)) || this.$el, () =>\n        this.$emit('resize')));\n\n\n      } };\n\n    var cover = {\n      mixins: [Resize, Video],\n\n      props: {\n        width: Number,\n        height: Number },\n\n\n      data: {\n        automute: true },\n\n\n      events: {\n        'load loadedmetadata'() {\n          this.$emit('resize');\n        } },\n\n\n      resizeTargets() {\n        return [this.$el, getPositionedParent(this.$el) || parent(this.$el)];\n      },\n\n      update: {\n        read() {\n          const { ratio, cover } = Dimensions;\n          const { $el, width, height } = this;\n\n          let dim = { width, height };\n\n          if (!dim.width || !dim.height) {\n            const intrinsic = {\n              width: $el.naturalWidth || $el.videoWidth || $el.clientWidth,\n              height: $el.naturalHeight || $el.videoHeight || $el.clientHeight };\n\n\n            if (dim.width) {\n              dim = ratio(intrinsic, 'width', dim.width);\n            } else if (height) {\n              dim = ratio(intrinsic, 'height', dim.height);\n            } else {\n              dim = intrinsic;\n            }\n          }\n\n          const { offsetHeight: coverHeight, offsetWidth: coverWidth } =\n          getPositionedParent($el) || parent($el);\n          const coverDim = cover(dim, {\n            width: coverWidth + (coverWidth % 2 ? 1 : 0),\n            height: coverHeight + (coverHeight % 2 ? 1 : 0) });\n\n\n          if (!coverDim.width || !coverDim.height) {\n            return false;\n          }\n\n          return coverDim;\n        },\n\n        write(_ref) {let { height, width } = _ref;\n          css(this.$el, { height, width });\n        },\n\n        events: ['resize'] } };\n\n\n\n    function getPositionedParent(el) {\n      while (el = parent(el)) {\n        if (css(el, 'position') !== 'static') {\n          return el;\n        }\n      }\n    }\n\n    var Container = {\n      props: {\n        container: Boolean },\n\n\n      data: {\n        container: true },\n\n\n      computed: {\n        container(_ref) {let { container } = _ref;\n          return container === true && this.$container || container && $(container);\n        } } };\n\n    var Position = {\n      props: {\n        pos: String,\n        offset: null,\n        flip: Boolean,\n        shift: Boolean,\n        inset: Boolean },\n\n\n      data: {\n        pos: \"bottom-\" + (isRtl ? 'right' : 'left'),\n        offset: false,\n        flip: true,\n        shift: true,\n        inset: false },\n\n\n      connected() {\n        this.pos = this.$props.pos.split('-').concat('center').slice(0, 2);\n        [this.dir, this.align] = this.pos;\n        this.axis = includes(['top', 'bottom'], this.dir) ? 'y' : 'x';\n      },\n\n      methods: {\n        positionAt(element, target, boundary) {\n          let offset = [this.getPositionOffset(element), this.getShiftOffset(element)];\n          const placement = [this.flip && 'flip', this.shift && 'shift'];\n\n          const attach = {\n            element: [this.inset ? this.dir : flipPosition(this.dir), this.align],\n            target: [this.dir, this.align] };\n\n\n          if (this.axis === 'y') {\n            for (const prop in attach) {\n              attach[prop].reverse();\n            }\n            offset.reverse();\n            placement.reverse();\n          }\n\n          const [scrollElement] = scrollParents(element, /auto|scroll/);\n          const { scrollTop, scrollLeft } = scrollElement;\n\n          // Ensure none positioned element does not generate scrollbars\n          const elDim = dimensions$1(element);\n          css(element, { top: -elDim.height, left: -elDim.width });\n\n          positionAt(element, target, {\n            attach,\n            offset,\n            boundary,\n            placement,\n            viewportOffset: this.getViewportOffset(element) });\n\n\n          // Restore scroll position\n          scrollElement.scrollTop = scrollTop;\n          scrollElement.scrollLeft = scrollLeft;\n        },\n\n        getPositionOffset(element) {\n          return (\n            toPx(\n            this.offset === false ? css(element, '--uk-position-offset') : this.offset,\n            this.axis === 'x' ? 'width' : 'height',\n            element) * (\n\n            includes(['left', 'top'], this.dir) ? -1 : 1) * (\n            this.inset ? -1 : 1));\n\n        },\n\n        getShiftOffset(element) {\n          return this.align === 'center' ?\n          0 :\n          toPx(\n          css(element, '--uk-position-shift-offset'),\n          this.axis === 'y' ? 'width' : 'height',\n          element) * (\n          includes(['left', 'top'], this.align) ? 1 : -1);\n        },\n\n        getViewportOffset(element) {\n          return toPx(css(element, '--uk-position-viewport-offset'));\n        } } };\n\n    var Style = {\n      beforeConnect() {\n        this._style = attr(this.$el, 'style');\n      },\n\n      disconnected() {\n        attr(this.$el, 'style', this._style);\n      } };\n\n    const active$1 = [];\n\n    var Modal = {\n      mixins: [Class, Container, Togglable],\n\n      props: {\n        selPanel: String,\n        selClose: String,\n        escClose: Boolean,\n        bgClose: Boolean,\n        stack: Boolean },\n\n\n      data: {\n        cls: 'uk-open',\n        escClose: true,\n        bgClose: true,\n        overlay: true,\n        stack: false },\n\n\n      computed: {\n        panel(_ref, $el) {let { selPanel } = _ref;\n          return $(selPanel, $el);\n        },\n\n        transitionElement() {\n          return this.panel;\n        },\n\n        bgClose(_ref2) {let { bgClose } = _ref2;\n          return bgClose && this.panel;\n        } },\n\n\n      beforeDisconnect() {\n        if (includes(active$1, this)) {\n          this.toggleElement(this.$el, false, false);\n        }\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return this.selClose;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.hide();\n        } },\n\n\n      {\n        name: 'click',\n\n        delegate() {\n          return 'a[href*=\"#\"]';\n        },\n\n        handler(_ref3) {let { current, defaultPrevented } = _ref3;\n          const { hash } = current;\n          if (\n          !defaultPrevented &&\n          hash &&\n          isSameSiteAnchor(current) &&\n          !within(hash, this.$el) &&\n          $(hash, document.body))\n          {\n            this.hide();\n          }\n        } },\n\n\n      {\n        name: 'toggle',\n\n        self: true,\n\n        handler(e) {\n          if (e.defaultPrevented) {\n            return;\n          }\n\n          e.preventDefault();\n\n          if (this.isToggled() === includes(active$1, this)) {\n            this.toggle();\n          }\n        } },\n\n\n      {\n        name: 'beforeshow',\n\n        self: true,\n\n        handler(e) {\n          if (includes(active$1, this)) {\n            return false;\n          }\n\n          if (!this.stack && active$1.length) {\n            Promise.all(active$1.map((modal) => modal.hide())).then(this.show);\n            e.preventDefault();\n          } else {\n            active$1.push(this);\n          }\n        } },\n\n\n      {\n        name: 'show',\n\n        self: true,\n\n        handler() {\n          once(\n          this.$el,\n          'hide',\n          on(document, 'focusin', (e) => {\n            if (last(active$1) === this && !within(e.target, this.$el)) {\n              this.$el.focus();\n            }\n          }));\n\n\n          if (this.overlay) {\n            once(this.$el, 'hidden', preventOverscroll(this.$el), { self: true });\n            once(this.$el, 'hidden', preventBackgroundScroll(), { self: true });\n          }\n\n          if (this.stack) {\n            css(this.$el, 'zIndex', toFloat(css(this.$el, 'zIndex')) + active$1.length);\n          }\n\n          addClass(document.documentElement, this.clsPage);\n\n          if (this.bgClose) {\n            once(\n            this.$el,\n            'hide',\n            on(document, pointerDown$1, (_ref4) => {let { target } = _ref4;\n              if (\n              last(active$1) !== this ||\n              this.overlay && !within(target, this.$el) ||\n              within(target, this.panel))\n              {\n                return;\n              }\n\n              once(\n              document,\n              pointerUp$1 + \" \" + pointerCancel + \" scroll\",\n              (_ref5) => {let { defaultPrevented, type, target: newTarget } = _ref5;\n                if (\n                !defaultPrevented &&\n                type === pointerUp$1 &&\n                target === newTarget)\n                {\n                  this.hide();\n                }\n              },\n              true);\n\n            }),\n            { self: true });\n\n          }\n\n          if (this.escClose) {\n            once(\n            this.$el,\n            'hide',\n            on(document, 'keydown', (e) => {\n              if (e.keyCode === 27 && last(active$1) === this) {\n                this.hide();\n              }\n            }),\n            { self: true });\n\n          }\n        } },\n\n\n      {\n        name: 'shown',\n\n        self: true,\n\n        handler() {\n          if (!isFocusable(this.$el)) {\n            attr(this.$el, 'tabindex', '-1');\n          }\n\n          if (!$(':focus', this.$el)) {\n            this.$el.focus();\n          }\n        } },\n\n\n      {\n        name: 'hidden',\n\n        self: true,\n\n        handler() {\n          if (includes(active$1, this)) {\n            active$1.splice(active$1.indexOf(this), 1);\n          }\n\n          css(this.$el, 'zIndex', '');\n\n          if (!active$1.some((modal) => modal.clsPage === this.clsPage)) {\n            removeClass(document.documentElement, this.clsPage);\n          }\n        } }],\n\n\n\n      methods: {\n        toggle() {\n          return this.isToggled() ? this.hide() : this.show();\n        },\n\n        show() {\n          if (this.container && parent(this.$el) !== this.container) {\n            append(this.container, this.$el);\n            return new Promise((resolve) =>\n            requestAnimationFrame(() => this.show().then(resolve)));\n\n          }\n\n          return this.toggleElement(this.$el, true, animate);\n        },\n\n        hide() {\n          return this.toggleElement(this.$el, false, animate);\n        } } };\n\n\n\n    function animate(el, show, _ref6) {let { transitionElement, _toggle } = _ref6;\n      return new Promise((resolve, reject) =>\n      once(el, 'show hide', () => {\n        el._reject == null ? void 0 : el._reject();\n        el._reject = reject;\n\n        _toggle(el, show);\n\n        const off = once(\n        transitionElement,\n        'transitionstart',\n        () => {\n          once(transitionElement, 'transitionend transitioncancel', resolve, {\n            self: true });\n\n          clearTimeout(timer);\n        },\n        { self: true });\n\n\n        const timer = setTimeout(() => {\n          off();\n          resolve();\n        }, toMs(css(transitionElement, 'transitionDuration')));\n      })).\n      then(() => delete el._reject);\n    }\n\n    function toMs(time) {\n      return time ? endsWith(time, 'ms') ? toFloat(time) : toFloat(time) * 1000 : 0;\n    }\n\n    function preventOverscroll(el) {\n      if (CSS.supports('overscroll-behavior', 'contain')) {\n        const elements = filterChildren(el, (child) => /auto|scroll/.test(css(child, 'overflow')));\n        css(elements, 'overscrollBehavior', 'contain');\n        return () => css(elements, 'overscrollBehavior', '');\n      }\n\n      let startClientY;\n\n      const events = [\n      on(\n      el,\n      'touchstart',\n      (_ref7) => {let { targetTouches } = _ref7;\n        if (targetTouches.length === 1) {\n          startClientY = targetTouches[0].clientY;\n        }\n      },\n      { passive: true }),\n\n\n      on(\n      el,\n      'touchmove',\n      (e) => {\n        if (e.targetTouches.length !== 1) {\n          return;\n        }\n\n        let [scrollParent] = scrollParents(e.target, /auto|scroll/);\n        if (!within(scrollParent, el)) {\n          scrollParent = el;\n        }\n\n        const clientY = e.targetTouches[0].clientY - startClientY;\n        const { scrollTop, scrollHeight, clientHeight } = scrollParent;\n\n        if (\n        clientHeight >= scrollHeight ||\n        scrollTop === 0 && clientY > 0 ||\n        scrollHeight - scrollTop <= clientHeight && clientY < 0)\n        {\n          e.cancelable && e.preventDefault();\n        }\n      },\n      { passive: false })];\n\n\n\n      return () => events.forEach((fn) => fn());\n    }\n\n    let prevented;\n    function preventBackgroundScroll() {\n      if (prevented) {\n        return noop;\n      }\n      prevented = true;\n\n      const { scrollingElement } = document;\n      css(scrollingElement, {\n        overflowY: 'hidden',\n        touchAction: 'none',\n        paddingRight: width(window) - scrollingElement.clientWidth });\n\n      return () => {\n        prevented = false;\n        css(scrollingElement, { overflowY: '', touchAction: '', paddingRight: '' });\n      };\n    }\n\n    function filterChildren(el, fn) {\n      const children = [];\n      apply(el, (node) => {\n        if (fn(node)) {\n          children.push(node);\n        }\n      });\n      return children;\n    }\n\n    function isSameSiteAnchor(a) {\n      return ['origin', 'pathname', 'search'].every((part) => a[part] === location[part]);\n    }\n\n    let active;\n\n    var drop = {\n      mixins: [Container, Lazyload, Position, Style, Togglable],\n\n      args: 'pos',\n\n      props: {\n        mode: 'list',\n        toggle: Boolean,\n        boundary: Boolean,\n        boundaryX: Boolean,\n        boundaryY: Boolean,\n        target: Boolean,\n        targetX: Boolean,\n        targetY: Boolean,\n        stretch: Boolean,\n        delayShow: Number,\n        delayHide: Number,\n        autoUpdate: Boolean,\n        clsDrop: String,\n        animateOut: Boolean,\n        bgScroll: Boolean },\n\n\n      data: {\n        mode: ['click', 'hover'],\n        toggle: '- *',\n        boundary: false,\n        boundaryX: false,\n        boundaryY: false,\n        target: false,\n        targetX: false,\n        targetY: false,\n        stretch: false,\n        delayShow: 0,\n        delayHide: 800,\n        autoUpdate: true,\n        clsDrop: false,\n        animateOut: false,\n        bgScroll: true,\n        animation: ['uk-animation-fade'],\n        cls: 'uk-open',\n        container: false },\n\n\n      computed: {\n        boundary(_ref, $el) {let { boundary, boundaryX, boundaryY } = _ref;\n          return [\n          query(boundaryX || boundary, $el) || window,\n          query(boundaryY || boundary, $el) || window];\n\n        },\n\n        target(_ref2, $el) {let { target, targetX, targetY } = _ref2;\n          targetX = targetX || target || this.targetEl;\n          targetY = targetY || target || this.targetEl;\n\n          return [\n          targetX === true ? window : query(targetX, $el),\n          targetY === true ? window : query(targetY, $el)];\n\n        } },\n\n\n      created() {\n        this.tracker = new MouseTracker();\n      },\n\n      beforeConnect() {\n        this.clsDrop = this.$props.clsDrop || \"uk-\" + this.$options.name;\n      },\n\n      connected() {\n        addClass(this.$el, this.clsDrop);\n\n        if (this.toggle && !this.targetEl) {\n          this.targetEl = this.$create('toggle', query(this.toggle, this.$el), {\n            target: this.$el,\n            mode: this.mode }).\n          $el;\n          attr(this.targetEl, 'aria-haspopup', true);\n          this.lazyload(this.targetEl);\n        }\n      },\n\n      disconnected() {\n        if (this.isActive()) {\n          this.hide(false);\n          active = null;\n        }\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return \".\" + this.clsDrop + \"-close\";\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.hide(false);\n        } },\n\n\n      {\n        name: 'click',\n\n        delegate() {\n          return 'a[href*=\"#\"]';\n        },\n\n        handler(_ref3) {let { defaultPrevented, current } = _ref3;\n          const { hash } = current;\n          if (\n          !defaultPrevented &&\n          hash &&\n          isSameSiteAnchor(current) &&\n          !within(hash, this.$el))\n          {\n            this.hide(false);\n          }\n        } },\n\n\n      {\n        name: 'beforescroll',\n\n        handler() {\n          this.hide(false);\n        } },\n\n\n      {\n        name: 'toggle',\n\n        self: true,\n\n        handler(e, toggle) {\n          e.preventDefault();\n\n          if (this.isToggled()) {\n            this.hide(false);\n          } else {\n            this.show(toggle == null ? void 0 : toggle.$el, false);\n          }\n        } },\n\n\n      {\n        name: 'toggleshow',\n\n        self: true,\n\n        handler(e, toggle) {\n          e.preventDefault();\n          this.show(toggle == null ? void 0 : toggle.$el);\n        } },\n\n\n      {\n        name: 'togglehide',\n\n        self: true,\n\n        handler(e) {\n          e.preventDefault();\n          if (!matches(this.$el, ':focus,:hover')) {\n            this.hide();\n          }\n        } },\n\n\n      {\n        name: pointerEnter + \" focusin\",\n\n        filter() {\n          return includes(this.mode, 'hover');\n        },\n\n        handler(e) {\n          if (!isTouch(e)) {\n            this.clearTimers();\n          }\n        } },\n\n\n      {\n        name: pointerLeave + \" focusout\",\n\n        filter() {\n          return includes(this.mode, 'hover');\n        },\n\n        handler(e) {\n          if (!isTouch(e) && e.relatedTarget) {\n            this.hide();\n          }\n        } },\n\n\n      {\n        name: 'toggled',\n\n        self: true,\n\n        handler(e, toggled) {\n          if (!toggled) {\n            return;\n          }\n\n          this.clearTimers();\n          this.position();\n        } },\n\n\n      {\n        name: 'show',\n\n        self: true,\n\n        handler() {\n          active = this;\n\n          this.tracker.init();\n\n          const update = () => this.$emit();\n          const handlers = [\n          on(\n          document,\n          pointerDown$1,\n          (_ref4) => {let { target } = _ref4;return (\n              !within(target, this.$el) &&\n              once(\n              document,\n              pointerUp$1 + \" \" + pointerCancel + \" scroll\",\n              (_ref5) => {let { defaultPrevented, type, target: newTarget } = _ref5;\n                if (\n                !defaultPrevented &&\n                type === pointerUp$1 &&\n                target === newTarget &&\n                !(this.targetEl && within(target, this.targetEl)))\n                {\n                  this.hide(false);\n                }\n              },\n              true));}),\n\n\n\n          on(document, 'keydown', (e) => {\n            if (e.keyCode === 27) {\n              this.hide(false);\n            }\n          }),\n\n          on(window, 'resize', update),\n\n          (() => {\n            const observer = observeResize(\n            scrollParents(this.$el).concat(this.target),\n            update);\n\n            return () => observer.disconnect();\n          })(),\n\n          ...(this.autoUpdate ?\n          [\n          on([document, scrollParents(this.$el)], 'scroll', update, {\n            passive: true })] :\n\n\n          []),\n\n          ...(this.bgScroll ?\n          [] :\n          [preventOverscroll(this.$el), preventBackgroundScroll()])];\n\n\n          once(this.$el, 'hide', () => handlers.forEach((handler) => handler()), {\n            self: true });\n\n        } },\n\n\n      {\n        name: 'beforehide',\n\n        self: true,\n\n        handler() {\n          this.clearTimers();\n        } },\n\n\n      {\n        name: 'hide',\n\n        handler(_ref6) {let { target } = _ref6;\n          if (this.$el !== target) {\n            active =\n            active === null && within(target, this.$el) && this.isToggled() ?\n            this :\n            active;\n            return;\n          }\n\n          active = this.isActive() ? null : active;\n          this.tracker.cancel();\n        } }],\n\n\n\n      update: {\n        write() {\n          if (this.isToggled() && !hasClass(this.$el, this.clsEnter)) {\n            this.position();\n          }\n        } },\n\n\n      methods: {\n        show(target, delay) {if (target === void 0) {target = this.targetEl;}if (delay === void 0) {delay = true;}\n          if (this.isToggled() && target && this.targetEl && target !== this.targetEl) {\n            this.hide(false, false);\n          }\n\n          this.targetEl = target;\n\n          this.clearTimers();\n\n          if (this.isActive()) {\n            return;\n          }\n\n          if (active) {\n            if (delay && active.isDelaying) {\n              this.showTimer = setTimeout(() => matches(target, ':hover') && this.show(), 10);\n              return;\n            }\n\n            let prev;\n            while (active && prev !== active && !within(this.$el, active.$el)) {\n              prev = active;\n              active.hide(false, false);\n            }\n          }\n\n          if (this.container && parent(this.$el) !== this.container) {\n            append(this.container, this.$el);\n          }\n\n          this.showTimer = setTimeout(\n          () => this.toggleElement(this.$el, true),\n          delay && this.delayShow || 0);\n\n        },\n\n        hide(delay, animate) {if (delay === void 0) {delay = true;}if (animate === void 0) {animate = true;}\n          const hide = () => this.toggleElement(this.$el, false, this.animateOut && animate);\n\n          this.clearTimers();\n\n          this.isDelaying = getPositionedElements(this.$el).some((el) =>\n          this.tracker.movesTo(el));\n\n\n          if (delay && this.isDelaying) {\n            this.hideTimer = setTimeout(this.hide, 50);\n          } else if (delay && this.delayHide) {\n            this.hideTimer = setTimeout(hide, this.delayHide);\n          } else {\n            hide();\n          }\n        },\n\n        clearTimers() {\n          clearTimeout(this.showTimer);\n          clearTimeout(this.hideTimer);\n          this.showTimer = null;\n          this.hideTimer = null;\n          this.isDelaying = false;\n        },\n\n        isActive() {\n          return active === this;\n        },\n\n        position() {\n          removeClass(this.$el, this.clsDrop + \"-stack\");\n          attr(this.$el, 'style', this._style);\n\n          // Ensure none positioned element does not generate scrollbars\n          this.$el.hidden = true;\n\n          const viewports = this.target.map((target) => offsetViewport(scrollParents(target)[0]));\n          const viewportOffset = this.getViewportOffset(this.$el);\n\n          const dirs = [\n          [0, ['x', 'width', 'left', 'right']],\n          [1, ['y', 'height', 'top', 'bottom']]];\n\n\n          for (const [i, [axis, prop]] of dirs) {\n            if (this.axis !== axis && includes([axis, true], this.stretch)) {\n              css(this.$el, {\n                [prop]: Math.min(\n                offset(this.boundary[i])[prop],\n                viewports[i][prop] - 2 * viewportOffset),\n\n                [\"overflow-\" + axis]: 'auto' });\n\n            }\n          }\n\n          const maxWidth = viewports[0].width - 2 * viewportOffset;\n\n          if (this.$el.offsetWidth > maxWidth) {\n            addClass(this.$el, this.clsDrop + \"-stack\");\n          }\n\n          css(this.$el, 'maxWidth', maxWidth);\n\n          this.$el.hidden = false;\n\n          this.positionAt(this.$el, this.target, this.boundary);\n\n          for (const [i, [axis, prop, start, end]] of dirs) {\n            if (this.axis === axis && includes([axis, true], this.stretch)) {\n              const positionOffset = Math.abs(this.getPositionOffset(this.$el));\n              const targetOffset = offset(this.target[i]);\n              const elOffset = offset(this.$el);\n\n              css(this.$el, {\n                [prop]:\n                (targetOffset[start] > elOffset[start] ?\n                targetOffset[start] -\n                Math.max(\n                offset(this.boundary[i])[start],\n                viewports[i][start] + viewportOffset) :\n\n                Math.min(\n                offset(this.boundary[i])[end],\n                viewports[i][end] - viewportOffset) -\n                targetOffset[end]) - positionOffset,\n                [\"overflow-\" + axis]: 'auto' });\n\n\n              this.positionAt(this.$el, this.target, this.boundary);\n            }\n          }\n        } } };\n\n\n\n    function getPositionedElements(el) {\n      const result = [];\n      apply(el, (el) => css(el, 'position') !== 'static' && result.push(el));\n      return result;\n    }\n\n    var formCustom = {\n      mixins: [Class],\n\n      args: 'target',\n\n      props: {\n        target: Boolean },\n\n\n      data: {\n        target: false },\n\n\n      computed: {\n        input(_, $el) {\n          return $(selInput, $el);\n        },\n\n        state() {\n          return this.input.nextElementSibling;\n        },\n\n        target(_ref, $el) {let { target } = _ref;\n          return (\n            target && (\n            target === true && parent(this.input) === $el && this.input.nextElementSibling ||\n            $(target, $el)));\n\n        } },\n\n\n      update() {var _input$files;\n        const { target, input } = this;\n\n        if (!target) {\n          return;\n        }\n\n        let option;\n        const prop = isInput(target) ? 'value' : 'textContent';\n        const prev = target[prop];\n        const value = (_input$files = input.files) != null && _input$files[0] ?\n        input.files[0].name :\n        matches(input, 'select') && (\n        option = $$('option', input).filter((el) => el.selected)[0]) // eslint-disable-line prefer-destructuring\n        ? option.textContent :\n        input.value;\n\n        if (prev !== value) {\n          target[prop] = value;\n        }\n      },\n\n      events: [\n      {\n        name: 'change',\n\n        handler() {\n          this.$emit();\n        } },\n\n\n      {\n        name: 'reset',\n\n        el() {\n          return closest(this.$el, 'form');\n        },\n\n        handler() {\n          this.$emit();\n        } }] };\n\n    var Margin = {\n      mixins: [Resize],\n\n      props: {\n        margin: String,\n        firstColumn: Boolean },\n\n\n      data: {\n        margin: 'uk-margin-small-top',\n        firstColumn: 'uk-first-column' },\n\n\n      resizeTargets() {\n        return [this.$el, ...toArray(this.$el.children)];\n      },\n\n      connected() {\n        this.registerObserver(\n        observeMutation(this.$el, () => this.$reset(), {\n          childList: true }));\n\n\n      },\n\n      update: {\n        read() {\n          const rows = getRows(this.$el.children);\n\n          return {\n            rows,\n            columns: getColumns(rows) };\n\n        },\n\n        write(_ref) {let { columns, rows } = _ref;\n          for (const row of rows) {\n            for (const column of row) {\n              toggleClass(column, this.margin, rows[0] !== row);\n              toggleClass(column, this.firstColumn, columns[0].includes(column));\n            }\n          }\n        },\n\n        events: ['resize'] } };\n\n\n\n    function getRows(items) {\n      return sortBy(items, 'top', 'bottom');\n    }\n\n    function getColumns(rows) {\n      const columns = [];\n\n      for (const row of rows) {\n        const sorted = sortBy(row, 'left', 'right');\n        for (let j = 0; j < sorted.length; j++) {\n          columns[j] = columns[j] ? columns[j].concat(sorted[j]) : sorted[j];\n        }\n      }\n\n      return isRtl ? columns.reverse() : columns;\n    }\n\n    function sortBy(items, startProp, endProp) {\n      const sorted = [[]];\n\n      for (const el of items) {\n        if (!isVisible(el)) {\n          continue;\n        }\n\n        let dim = getOffset(el);\n\n        for (let i = sorted.length - 1; i >= 0; i--) {\n          const current = sorted[i];\n\n          if (!current[0]) {\n            current.push(el);\n            break;\n          }\n\n          let startDim;\n          if (current[0].offsetParent === el.offsetParent) {\n            startDim = getOffset(current[0]);\n          } else {\n            dim = getOffset(el, true);\n            startDim = getOffset(current[0], true);\n          }\n\n          if (dim[startProp] >= startDim[endProp] - 1 && dim[startProp] !== startDim[startProp]) {\n            sorted.push([el]);\n            break;\n          }\n\n          if (dim[endProp] - 1 > startDim[startProp] || dim[startProp] === startDim[startProp]) {\n            current.push(el);\n            break;\n          }\n\n          if (i === 0) {\n            sorted.unshift([el]);\n            break;\n          }\n        }\n      }\n\n      return sorted;\n    }\n\n    function getOffset(element, offset) {if (offset === void 0) {offset = false;}\n      let { offsetTop, offsetLeft, offsetHeight, offsetWidth } = element;\n\n      if (offset) {\n        [offsetTop, offsetLeft] = offsetPosition(element);\n      }\n\n      return {\n        top: offsetTop,\n        left: offsetLeft,\n        bottom: offsetTop + offsetHeight,\n        right: offsetLeft + offsetWidth };\n\n    }\n\n    var Scroll = {\n      connected() {\n        registerScrollListener(this._uid, () => this.$emit('scroll'));\n      },\n\n      disconnected() {\n        unregisterScrollListener(this._uid);\n      } };\n\n\n    const scrollListeners = new Map();\n    let unbindScrollListener;\n    function registerScrollListener(id, listener) {\n      unbindScrollListener =\n      unbindScrollListener ||\n      on(window, 'scroll', () => scrollListeners.forEach((listener) => listener()), {\n        passive: true,\n        capture: true });\n\n\n      scrollListeners.set(id, listener);\n    }\n\n    function unregisterScrollListener(id) {\n      scrollListeners.delete(id);\n      if (unbindScrollListener && !scrollListeners.size) {\n        unbindScrollListener();\n        unbindScrollListener = null;\n      }\n    }\n\n    var grid = {\n      extends: Margin,\n\n      mixins: [Class],\n\n      name: 'grid',\n\n      props: {\n        masonry: Boolean,\n        parallax: Number },\n\n\n      data: {\n        margin: 'uk-grid-margin',\n        clsStack: 'uk-grid-stack',\n        masonry: false,\n        parallax: 0 },\n\n\n      connected() {\n        this.masonry && addClass(this.$el, 'uk-flex-top uk-flex-wrap-top');\n        this.parallax && registerScrollListener(this._uid, () => this.$emit('scroll'));\n      },\n\n      disconnected() {\n        unregisterScrollListener(this._uid);\n      },\n\n      update: [\n      {\n        write(_ref) {let { columns } = _ref;\n          toggleClass(this.$el, this.clsStack, columns.length < 2);\n        },\n\n        events: ['resize'] },\n\n\n      {\n        read(data) {\n          let { columns, rows } = data;\n\n          // Filter component makes elements positioned absolute\n          if (\n          !columns.length ||\n          !this.masonry && !this.parallax ||\n          positionedAbsolute(this.$el))\n          {\n            data.translates = false;\n            return false;\n          }\n\n          let translates = false;\n\n          const nodes = children(this.$el);\n          const columnHeights = getColumnHeights(columns);\n          const margin = getMarginTop(nodes, this.margin) * (rows.length - 1);\n          const elHeight = Math.max(...columnHeights) + margin;\n\n          if (this.masonry) {\n            columns = columns.map((column) => sortBy$1(column, 'offsetTop'));\n            translates = getTranslates(rows, columns);\n          }\n\n          let padding = Math.abs(this.parallax);\n          if (padding) {\n            padding = columnHeights.reduce(\n            (newPadding, hgt, i) =>\n            Math.max(\n            newPadding,\n            hgt + margin + (i % 2 ? padding : padding / 8) - elHeight),\n\n            0);\n\n          }\n\n          return { padding, columns, translates, height: translates ? elHeight : '' };\n        },\n\n        write(_ref2) {let { height, padding } = _ref2;\n          css(this.$el, 'paddingBottom', padding || '');\n          height !== false && css(this.$el, 'height', height);\n        },\n\n        events: ['resize'] },\n\n\n      {\n        read() {\n          if (this.parallax && positionedAbsolute(this.$el)) {\n            return false;\n          }\n\n          return {\n            scrolled: this.parallax ?\n            scrolledOver(this.$el) * Math.abs(this.parallax) :\n            false };\n\n        },\n\n        write(_ref3) {let { columns, scrolled, translates } = _ref3;\n          if (scrolled === false && !translates) {\n            return;\n          }\n\n          columns.forEach((column, i) =>\n          column.forEach((el, j) =>\n          css(\n          el,\n          'transform',\n          !scrolled && !translates ?\n          '' : \"translateY(\" + (\n\n          (translates && -translates[i][j]) + (\n          scrolled ? i % 2 ? scrolled : scrolled / 8 : 0)) + \"px)\")));\n\n\n\n\n        },\n\n        events: ['scroll', 'resize'] }] };\n\n\n\n\n    function positionedAbsolute(el) {\n      return children(el).some((el) => css(el, 'position') === 'absolute');\n    }\n\n    function getTranslates(rows, columns) {\n      const rowHeights = rows.map((row) => Math.max(...row.map((el) => el.offsetHeight)));\n\n      return columns.map((elements) => {\n        let prev = 0;\n        return elements.map(\n        (element, row) =>\n        prev += row ? rowHeights[row - 1] - elements[row - 1].offsetHeight : 0);\n\n      });\n    }\n\n    function getMarginTop(nodes, cls) {\n      const [node] = nodes.filter((el) => hasClass(el, cls));\n\n      return toFloat(node ? css(node, 'marginTop') : css(nodes[0], 'paddingLeft'));\n    }\n\n    function getColumnHeights(columns) {\n      return columns.map((column) => column.reduce((sum, el) => sum + el.offsetHeight, 0));\n    }\n\n    var heightMatch = {\n      mixins: [Resize],\n\n      args: 'target',\n\n      props: {\n        target: String,\n        row: Boolean },\n\n\n      data: {\n        target: '> *',\n        row: true },\n\n\n      computed: {\n        elements: {\n          get(_ref, $el) {let { target } = _ref;\n            return $$(target, $el);\n          },\n\n          watch() {\n            this.$reset();\n          } } },\n\n\n\n      resizeTargets() {\n        return [this.$el, ...this.elements];\n      },\n\n      update: {\n        read() {\n          return {\n            rows: (this.row ? getRows(this.elements) : [this.elements]).map(match$1) };\n\n        },\n\n        write(_ref2) {let { rows } = _ref2;\n          for (const { heights, elements } of rows) {\n            elements.forEach((el, i) => css(el, 'minHeight', heights[i]));\n          }\n        },\n\n        events: ['resize'] } };\n\n\n\n    function match$1(elements) {\n      if (elements.length < 2) {\n        return { heights: [''], elements };\n      }\n\n      css(elements, 'minHeight', '');\n      let heights = elements.map(getHeight);\n      const max = Math.max(...heights);\n\n      return {\n        heights: elements.map((el, i) => heights[i].toFixed(2) === max.toFixed(2) ? '' : max),\n        elements };\n\n    }\n\n    function getHeight(element) {\n      let style = false;\n      if (!isVisible(element)) {\n        style = element.style.display;\n        css(element, 'display', 'block', 'important');\n      }\n\n      const height = dimensions$1(element).height - boxModelAdjust(element, 'height', 'content-box');\n\n      if (style !== false) {\n        css(element, 'display', style);\n      }\n\n      return height;\n    }\n\n    var heightViewport = {\n      mixins: [Resize],\n\n      props: {\n        expand: Boolean,\n        offsetTop: Boolean,\n        offsetBottom: Boolean,\n        minHeight: Number },\n\n\n      data: {\n        expand: false,\n        offsetTop: false,\n        offsetBottom: false,\n        minHeight: 0 },\n\n\n      resizeTargets() {\n        // check for offsetTop change\n        return [this.$el, ...scrollParents(this.$el, /auto|scroll/)];\n      },\n\n      update: {\n        read(_ref) {let { minHeight: prev } = _ref;\n          if (!isVisible(this.$el)) {\n            return false;\n          }\n\n          let minHeight = '';\n          const box = boxModelAdjust(this.$el, 'height', 'content-box');\n\n          const { body, scrollingElement } = document;\n          const [scrollElement] = scrollParents(this.$el, /auto|scroll/);\n          const { height: viewportHeight } = offsetViewport(\n          scrollElement === body ? scrollingElement : scrollElement);\n\n\n          if (this.expand) {\n            minHeight = Math.max(\n            viewportHeight - (\n            dimensions$1(scrollElement).height - dimensions$1(this.$el).height) -\n            box,\n            0);\n\n          } else {\n            const isScrollingElement =\n            scrollingElement === scrollElement || body === scrollElement;\n\n            // on mobile devices (iOS and Android) window.innerHeight !== 100vh\n            minHeight = \"calc(\" + (isScrollingElement ? '100vh' : viewportHeight + \"px\");\n\n            if (this.offsetTop) {\n              if (isScrollingElement) {\n                const top = offsetPosition(this.$el)[0] - offsetPosition(scrollElement)[0];\n                minHeight += top > 0 && top < viewportHeight / 2 ? \" - \" + top + \"px\" : '';\n              } else {\n                minHeight += \" - \" + css(scrollElement, 'paddingTop');\n              }\n            }\n\n            if (this.offsetBottom === true) {\n              minHeight += \" - \" + dimensions$1(this.$el.nextElementSibling).height + \"px\";\n            } else if (isNumeric(this.offsetBottom)) {\n              minHeight += \" - \" + this.offsetBottom + \"vh\";\n            } else if (this.offsetBottom && endsWith(this.offsetBottom, 'px')) {\n              minHeight += \" - \" + toFloat(this.offsetBottom) + \"px\";\n            } else if (isString(this.offsetBottom)) {\n              minHeight += \" - \" + dimensions$1(query(this.offsetBottom, this.$el)).height + \"px\";\n            }\n\n            minHeight += (box ? \" - \" + box + \"px\" : '') + \")\";\n          }\n\n          return { minHeight, prev };\n        },\n\n        write(_ref2) {let { minHeight } = _ref2;\n          css(this.$el, { minHeight });\n\n          if (this.minHeight && toFloat(css(this.$el, 'minHeight')) < this.minHeight) {\n            css(this.$el, 'minHeight', this.minHeight);\n          }\n        },\n\n        events: ['resize'] } };\n\n    var SVG = {\n      args: 'src',\n\n      props: {\n        id: Boolean,\n        icon: String,\n        src: String,\n        style: String,\n        width: Number,\n        height: Number,\n        ratio: Number,\n        class: String,\n        strokeAnimation: Boolean,\n        focusable: Boolean, // IE 11\n        attributes: 'list' },\n\n\n      data: {\n        ratio: 1,\n        include: ['style', 'class', 'focusable'],\n        class: '',\n        strokeAnimation: false },\n\n\n      beforeConnect() {\n        this.class += ' uk-svg';\n      },\n\n      connected() {\n        if (!this.icon && includes(this.src, '#')) {\n          [this.src, this.icon] = this.src.split('#');\n        }\n\n        this.svg = this.getSvg().then((el) => {\n          if (this._connected) {\n            const svg = insertSVG(el, this.$el);\n\n            if (this.svgEl && svg !== this.svgEl) {\n              remove$1(this.svgEl);\n            }\n\n            this.applyAttributes(svg, el);\n\n            return this.svgEl = svg;\n          }\n        }, noop);\n\n        if (this.strokeAnimation) {\n          this.svg.then((el) => {\n            if (this._connected) {\n              applyAnimation(el);\n              this.registerObserver(\n              observeIntersection(el, (records, observer) => {\n                applyAnimation(el);\n                observer.disconnect();\n              }));\n\n            }\n          });\n        }\n      },\n\n      disconnected() {\n        this.svg.then((svg) => {\n          if (this._connected) {\n            return;\n          }\n\n          if (isVoidElement(this.$el)) {\n            this.$el.hidden = false;\n          }\n\n          remove$1(svg);\n          this.svgEl = null;\n        });\n\n        this.svg = null;\n      },\n\n      methods: {\n        async getSvg() {\n          if (isTag(this.$el, 'img') && !this.$el.complete && this.$el.loading === 'lazy') {\n            return new Promise((resolve) =>\n            once(this.$el, 'load', () => resolve(this.getSvg())));\n\n          }\n\n          return parseSVG(await loadSVG(this.src), this.icon) || Promise.reject('SVG not found.');\n        },\n\n        applyAttributes(el, ref) {\n          for (const prop in this.$options.props) {\n            if (includes(this.include, prop) && prop in this) {\n              attr(el, prop, this[prop]);\n            }\n          }\n\n          for (const attribute in this.attributes) {\n            const [prop, value] = this.attributes[attribute].split(':', 2);\n            attr(el, prop, value);\n          }\n\n          if (!this.id) {\n            removeAttr(el, 'id');\n          }\n\n          const props = ['width', 'height'];\n          let dimensions = props.map((prop) => this[prop]);\n\n          if (!dimensions.some((val) => val)) {\n            dimensions = props.map((prop) => attr(ref, prop));\n          }\n\n          const viewBox = attr(ref, 'viewBox');\n          if (viewBox && !dimensions.some((val) => val)) {\n            dimensions = viewBox.split(' ').slice(2);\n          }\n\n          dimensions.forEach((val, i) => attr(el, props[i], toFloat(val) * this.ratio || null));\n        } } };\n\n\n\n    const loadSVG = memoize(async (src) => {\n      if (src) {\n        if (startsWith(src, 'data:')) {\n          return decodeURIComponent(src.split(',')[1]);\n        } else {\n          return (await fetch(src)).text();\n        }\n      } else {\n        return Promise.reject();\n      }\n    });\n\n    function parseSVG(svg, icon) {var _svg;\n      if (icon && includes(svg, '<symbol')) {\n        svg = parseSymbols(svg, icon) || svg;\n      }\n\n      svg = $(svg.substr(svg.indexOf('<svg')));\n      return ((_svg = svg) == null ? void 0 : _svg.hasChildNodes()) && svg;\n    }\n\n    const symbolRe = /<symbol([^]*?id=(['\"])(.+?)\\2[^]*?<\\/)symbol>/g;\n    const symbols = {};\n\n    function parseSymbols(svg, icon) {\n      if (!symbols[svg]) {\n        symbols[svg] = {};\n\n        symbolRe.lastIndex = 0;\n\n        let match;\n        while (match = symbolRe.exec(svg)) {\n          symbols[svg][match[3]] = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\" + match[1] + \"svg>\";\n        }\n      }\n\n      return symbols[svg][icon];\n    }\n\n    function applyAnimation(el) {\n      const length = getMaxPathLength(el);\n\n      if (length) {\n        el.style.setProperty('--uk-animation-stroke', length);\n      }\n    }\n\n    function getMaxPathLength(el) {\n      return Math.ceil(\n      Math.max(\n      0,\n      ...$$('[stroke]', el).map((stroke) => {\n        try {\n          return stroke.getTotalLength();\n        } catch (e) {\n          return 0;\n        }\n      })));\n\n\n    }\n\n    function insertSVG(el, root) {\n      if (isVoidElement(root) || isTag(root, 'canvas')) {\n        root.hidden = true;\n\n        const next = root.nextElementSibling;\n        return equals(el, next) ? next : after(root, el);\n      }\n\n      const last = root.lastElementChild;\n      return equals(el, last) ? last : append(root, el);\n    }\n\n    function equals(el, other) {\n      return isTag(el, 'svg') && isTag(other, 'svg') && innerHTML(el) === innerHTML(other);\n    }\n\n    function innerHTML(el) {\n      return (\n      el.innerHTML ||\n      new XMLSerializer().serializeToString(el).replace(/<svg.*?>(.*?)<\\/svg>/g, '$1')).\n      replace(/\\s/g, '');\n    }\n\n    var closeIcon = \"<svg width=\\\"14\\\" height=\\\"14\\\" viewBox=\\\"0 0 14 14\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"1\\\" y1=\\\"1\\\" x2=\\\"13\\\" y2=\\\"13\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"13\\\" y1=\\\"1\\\" x2=\\\"1\\\" y2=\\\"13\\\"/></svg>\";\n\n    var closeLarge = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" x1=\\\"1\\\" y1=\\\"1\\\" x2=\\\"19\\\" y2=\\\"19\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" x1=\\\"19\\\" y1=\\\"1\\\" x2=\\\"1\\\" y2=\\\"19\\\"/></svg>\";\n\n    var marker = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"9\\\" y=\\\"4\\\" width=\\\"1\\\" height=\\\"11\\\"/><rect x=\\\"4\\\" y=\\\"9\\\" width=\\\"11\\\" height=\\\"1\\\"/></svg>\";\n\n    var navParentIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 12 12\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"1 3.5 6 8.5 11 3.5\\\"/></svg>\";\n\n    var navParentIconLarge = \"<svg width=\\\"14\\\" height=\\\"14\\\" viewBox=\\\"0 0 14 14\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"1 4 7 10 13 4\\\"/></svg>\";\n\n    var navbarParentIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 12 12\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" points=\\\"1 3.5 6 8.5 11 3.5\\\"/></svg>\";\n\n    var navbarToggleIcon = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><style>.uk-navbar-toggle-animate svg > [class*='line-'] {\\n            transition: 0.2s ease-in-out;\\n            transition-property: transform, opacity,;\\n            transform-origin: center;\\n            opacity: 1;\\n        }\\n\\n        .uk-navbar-toggle svg > .line-3 { opacity: 0; }\\n        .uk-navbar-toggle-animate[aria-expanded=\\\"true\\\"] svg > .line-3 { opacity: 1; }\\n\\n        .uk-navbar-toggle-animate[aria-expanded=\\\"true\\\"] svg > .line-2 { transform: rotate(45deg); }\\n        .uk-navbar-toggle-animate[aria-expanded=\\\"true\\\"] svg > .line-3 { transform: rotate(-45deg); }\\n\\n        .uk-navbar-toggle-animate[aria-expanded=\\\"true\\\"] svg > .line-1,\\n        .uk-navbar-toggle-animate[aria-expanded=\\\"true\\\"] svg > .line-4 { opacity: 0; }\\n        .uk-navbar-toggle-animate[aria-expanded=\\\"true\\\"] svg > .line-1 { transform: translateY(6px) scaleX(0); }\\n        .uk-navbar-toggle-animate[aria-expanded=\\\"true\\\"] svg > .line-4 { transform: translateY(-6px) scaleX(0); }</style><rect class=\\\"line-1\\\" y=\\\"3\\\" width=\\\"20\\\" height=\\\"2\\\"/><rect class=\\\"line-2\\\" y=\\\"9\\\" width=\\\"20\\\" height=\\\"2\\\"/><rect class=\\\"line-3\\\" y=\\\"9\\\" width=\\\"20\\\" height=\\\"2\\\"/><rect class=\\\"line-4\\\" y=\\\"15\\\" width=\\\"20\\\" height=\\\"2\\\"/></svg>\";\n\n    var overlayIcon = \"<svg width=\\\"40\\\" height=\\\"40\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"19\\\" y=\\\"0\\\" width=\\\"1\\\" height=\\\"40\\\"/><rect x=\\\"0\\\" y=\\\"19\\\" width=\\\"40\\\" height=\\\"1\\\"/></svg>\";\n\n    var paginationNext = \"<svg width=\\\"7\\\" height=\\\"12\\\" viewBox=\\\"0 0 7 12\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" points=\\\"1 1 6 6 1 11\\\"/></svg>\";\n\n    var paginationPrevious = \"<svg width=\\\"7\\\" height=\\\"12\\\" viewBox=\\\"0 0 7 12\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" points=\\\"6 1 1 6 6 11\\\"/></svg>\";\n\n    var searchIcon = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"9\\\" cy=\\\"9\\\" r=\\\"7\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M14,14 L18,18 L14,14 Z\\\"/></svg>\";\n\n    var searchLarge = \"<svg width=\\\"40\\\" height=\\\"40\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.8\\\" cx=\\\"17.5\\\" cy=\\\"17.5\\\" r=\\\"16.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.8\\\" x1=\\\"38\\\" y1=\\\"39\\\" x2=\\\"29\\\" y2=\\\"30\\\"/></svg>\";\n\n    var searchNavbar = \"<svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10.5\\\" cy=\\\"10.5\\\" r=\\\"9.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"23\\\" y1=\\\"23\\\" x2=\\\"17\\\" y2=\\\"17\\\"/></svg>\";\n\n    var slidenavNext = \"<svg width=\\\"14\\\" height=\\\"24\\\" viewBox=\\\"0 0 14 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" points=\\\"1.225,23 12.775,12 1.225,1 \\\"/></svg>\";\n\n    var slidenavNextLarge = \"<svg width=\\\"25\\\" height=\\\"40\\\" viewBox=\\\"0 0 25 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"2\\\" points=\\\"4.002,38.547 22.527,20.024 4,1.5 \\\"/></svg>\";\n\n    var slidenavPrevious = \"<svg width=\\\"14\\\" height=\\\"24\\\" viewBox=\\\"0 0 14 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" points=\\\"12.775,1 1.225,12 12.775,23 \\\"/></svg>\";\n\n    var slidenavPreviousLarge = \"<svg width=\\\"25\\\" height=\\\"40\\\" viewBox=\\\"0 0 25 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"2\\\" points=\\\"20.527,1.5 2,20.024 20.525,38.547 \\\"/></svg>\";\n\n    var spinner = \"<svg width=\\\"30\\\" height=\\\"30\\\" viewBox=\\\"0 0 30 30\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"15\\\" cy=\\\"15\\\" r=\\\"14\\\"/></svg>\";\n\n    var totop = \"<svg width=\\\"18\\\" height=\\\"10\\\" viewBox=\\\"0 0 18 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" points=\\\"1 9 9 1 17 9 \\\"/></svg>\";\n\n    const icons = {\n      spinner,\n      totop,\n      marker,\n      'close-icon': closeIcon,\n      'close-large': closeLarge,\n      'nav-parent-icon': navParentIcon,\n      'nav-parent-icon-large': navParentIconLarge,\n      'navbar-parent-icon': navbarParentIcon,\n      'navbar-toggle-icon': navbarToggleIcon,\n      'overlay-icon': overlayIcon,\n      'pagination-next': paginationNext,\n      'pagination-previous': paginationPrevious,\n      'search-icon': searchIcon,\n      'search-large': searchLarge,\n      'search-navbar': searchNavbar,\n      'slidenav-next': slidenavNext,\n      'slidenav-next-large': slidenavNextLarge,\n      'slidenav-previous': slidenavPrevious,\n      'slidenav-previous-large': slidenavPreviousLarge };\n\n\n    const Icon = {\n      install: install$3,\n\n      extends: SVG,\n\n      args: 'icon',\n\n      props: ['icon'],\n\n      data: {\n        include: ['focusable'] },\n\n\n      isIcon: true,\n\n      beforeConnect() {\n        addClass(this.$el, 'uk-icon');\n      },\n\n      methods: {\n        async getSvg() {\n          const icon = getIcon(this.icon);\n\n          if (!icon) {\n            throw 'Icon not found.';\n          }\n\n          return icon;\n        } } };\n\n    const IconComponent = {\n      args: false,\n\n      extends: Icon,\n\n      data: (vm) => ({\n        icon: hyphenate(vm.constructor.options.name) }),\n\n\n      beforeConnect() {\n        addClass(this.$el, this.$options.id);\n      } };\n\n\n    const NavParentIcon = {\n      extends: IconComponent,\n\n      beforeConnect() {\n        const icon = this.$props.icon;\n        this.icon = closest(this.$el, '.uk-nav-primary') ? icon + \"-large\" : icon;\n      } };\n\n\n    const Slidenav = {\n      extends: IconComponent,\n\n      beforeConnect() {\n        addClass(this.$el, 'uk-slidenav');\n        const icon = this.$props.icon;\n        this.icon = hasClass(this.$el, 'uk-slidenav-large') ? icon + \"-large\" : icon;\n      } };\n\n\n    const Search = {\n      extends: IconComponent,\n\n      beforeConnect() {\n        this.icon =\n        hasClass(this.$el, 'uk-search-icon') && parents(this.$el, '.uk-search-large').length ?\n        'search-large' :\n        parents(this.$el, '.uk-search-navbar').length ?\n        'search-navbar' :\n        this.$props.icon;\n      } };\n\n\n    const Close = {\n      extends: IconComponent,\n\n      beforeConnect() {\n        this.icon = \"close-\" + (hasClass(this.$el, 'uk-close-large') ? 'large' : 'icon');\n      } };\n\n\n    const Spinner = {\n      extends: IconComponent,\n\n      methods: {\n        async getSvg() {\n          const icon = await Icon.methods.getSvg.call(this);\n\n          if (this.ratio !== 1) {\n            css($('circle', icon), 'strokeWidth', 1 / this.ratio);\n          }\n\n          return icon;\n        } } };\n\n\n\n    const parsed = {};\n    function install$3(UIkit) {\n      UIkit.icon.add = (name, svg) => {\n        const added = isString(name) ? { [name]: svg } : name;\n        each(added, (svg, name) => {\n          icons[name] = svg;\n          delete parsed[name];\n        });\n\n        if (UIkit._initialized) {\n          apply(document.body, (el) =>\n          each(UIkit.getComponents(el), (cmp) => {\n            cmp.$options.isIcon && cmp.icon in added && cmp.$reset();\n          }));\n\n        }\n      };\n    }\n\n    function getIcon(icon) {\n      if (!icons[icon]) {\n        return null;\n      }\n\n      if (!parsed[icon]) {\n        parsed[icon] = $((icons[applyRtl(icon)] || icons[icon]).trim());\n      }\n\n      return parsed[icon].cloneNode(true);\n    }\n\n    function applyRtl(icon) {\n      return isRtl ? swap(swap(icon, 'left', 'right'), 'previous', 'next') : icon;\n    }\n\n    const nativeLazyLoad = inBrowser && 'loading' in HTMLImageElement.prototype;\n\n    var img = {\n      args: 'dataSrc',\n\n      props: {\n        dataSrc: String,\n        sources: String,\n        offsetTop: String,\n        offsetLeft: String,\n        target: String,\n        loading: String },\n\n\n      data: {\n        dataSrc: '',\n        sources: false,\n        offsetTop: '50vh',\n        offsetLeft: '50vw',\n        target: false,\n        loading: 'lazy' },\n\n\n      connected() {\n        if (this.loading !== 'lazy') {\n          this.load();\n          return;\n        }\n\n        const target = [this.$el, ...queryAll(this.$props.target, this.$el)];\n\n        if (nativeLazyLoad && isImg(this.$el)) {\n          this.$el.loading = 'lazy';\n          setSrcAttrs(this.$el);\n\n          if (target.length === 1) {\n            return;\n          }\n        }\n\n        ensureSrcAttribute(this.$el);\n\n        this.registerObserver(\n        observeIntersection(\n        target,\n        (entries, observer) => {\n          this.load();\n          observer.disconnect();\n        },\n        {\n          rootMargin: toPx(this.offsetTop, 'height') + \"px \" + toPx(\n          this.offsetLeft,\n          'width') + \"px\" }));\n\n\n\n\n      },\n\n      disconnected() {\n        if (this._data.image) {\n          this._data.image.onload = '';\n        }\n      },\n\n      methods: {\n        load() {\n          if (this._data.image) {\n            return this._data.image;\n          }\n\n          const image = isImg(this.$el) ?\n          this.$el :\n          getImageFromElement(this.$el, this.dataSrc, this.sources);\n\n          removeAttr(image, 'loading');\n          setSrcAttrs(this.$el, image.currentSrc);\n          return this._data.image = image;\n        } } };\n\n\n\n    function setSrcAttrs(el, src) {\n      if (isImg(el)) {\n        const parentNode = parent(el);\n        const elements = isPicture(parentNode) ? children(parentNode) : [el];\n        elements.forEach((el) => setSourceProps(el, el));\n      } else if (src) {\n        const change = !includes(el.style.backgroundImage, src);\n        if (change) {\n          css(el, 'backgroundImage', \"url(\" + escape(src) + \")\");\n          trigger(el, createEvent('load', false));\n        }\n      }\n    }\n\n    const srcProps = ['data-src', 'data-srcset', 'sizes'];\n    function setSourceProps(sourceEl, targetEl) {\n      srcProps.forEach((prop) => {\n        const value = data(sourceEl, prop);\n        if (value) {\n          attr(targetEl, prop.replace(/^(data-)+/, ''), value);\n        }\n      });\n    }\n\n    function getImageFromElement(el, src, sources) {\n      const img = new Image();\n\n      wrapInPicture(img, sources);\n      setSourceProps(el, img);\n      img.onload = () => {\n        setSrcAttrs(el, img.currentSrc);\n      };\n      attr(img, 'src', src);\n      return img;\n    }\n\n    function wrapInPicture(img, sources) {\n      sources = parseSources(sources);\n\n      if (sources.length) {\n        const picture = fragment('<picture>');\n        for (const attrs of sources) {\n          const source = fragment('<source>');\n          attr(source, attrs);\n          append(picture, source);\n        }\n        append(picture, img);\n      }\n    }\n\n    function parseSources(sources) {\n      if (!sources) {\n        return [];\n      }\n\n      if (startsWith(sources, '[')) {\n        try {\n          sources = JSON.parse(sources);\n        } catch (e) {\n          sources = [];\n        }\n      } else {\n        sources = parseOptions(sources);\n      }\n\n      if (!isArray(sources)) {\n        sources = [sources];\n      }\n\n      return sources.filter((source) => !isEmpty(source));\n    }\n\n    function ensureSrcAttribute(el) {\n      if (isImg(el) && !hasAttr(el, 'src')) {\n        attr(el, 'src', 'data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>');\n      }\n    }\n\n    function isPicture(el) {\n      return isTag(el, 'picture');\n    }\n\n    function isImg(el) {\n      return isTag(el, 'img');\n    }\n\n    var Media = {\n      props: {\n        media: Boolean },\n\n\n      data: {\n        media: false },\n\n\n      connected() {\n        const media = toMedia(this.media, this.$el);\n        this.matchMedia = true;\n        if (media) {\n          this.mediaObj = window.matchMedia(media);\n          const handler = () => {\n            this.matchMedia = this.mediaObj.matches;\n            trigger(this.$el, createEvent('mediachange', false, true, [this.mediaObj]));\n          };\n          this.offMediaObj = on(this.mediaObj, 'change', () => {\n            handler();\n            this.$emit('resize');\n          });\n          handler();\n        }\n      },\n\n      disconnected() {var _this$offMediaObj;\n        (_this$offMediaObj = this.offMediaObj) == null ? void 0 : _this$offMediaObj.call(this);\n      } };\n\n\n    function toMedia(value, element) {\n      if (isString(value)) {\n        if (startsWith(value, '@')) {\n          value = toFloat(css(element, \"--uk-breakpoint-\" + value.substr(1)));\n        } else if (isNaN(value)) {\n          return value;\n        }\n      }\n\n      return value && isNumeric(value) ? \"(min-width: \" + value + \"px)\" : '';\n    }\n\n    var leader = {\n      mixins: [Class, Media, Resize],\n\n      props: {\n        fill: String },\n\n\n      data: {\n        fill: '',\n        clsWrapper: 'uk-leader-fill',\n        clsHide: 'uk-leader-hide',\n        attrFill: 'data-fill' },\n\n\n      computed: {\n        fill(_ref) {let { fill } = _ref;\n          return fill || css(this.$el, '--uk-leader-fill-content');\n        } },\n\n\n      connected() {\n        [this.wrapper] = wrapInner(this.$el, \"<span class=\\\"\" + this.clsWrapper + \"\\\">\");\n      },\n\n      disconnected() {\n        unwrap(this.wrapper.childNodes);\n      },\n\n      update: {\n        read() {\n          const width = Math.trunc(this.$el.offsetWidth / 2);\n\n          return {\n            width,\n            fill: this.fill,\n            hide: !this.matchMedia };\n\n        },\n\n        write(_ref2) {let { width, fill, hide } = _ref2;\n          toggleClass(this.wrapper, this.clsHide, hide);\n          attr(this.wrapper, this.attrFill, new Array(width).join(fill));\n        },\n\n        events: ['resize'] } };\n\n    var modal = {\n      install: install$2,\n\n      mixins: [Modal],\n\n      data: {\n        clsPage: 'uk-modal-page',\n        selPanel: '.uk-modal-dialog',\n        selClose:\n        '.uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full' },\n\n\n      events: [\n      {\n        name: 'show',\n\n        self: true,\n\n        handler() {\n          if (hasClass(this.panel, 'uk-margin-auto-vertical')) {\n            addClass(this.$el, 'uk-flex');\n          } else {\n            css(this.$el, 'display', 'block');\n          }\n\n          height(this.$el); // force reflow\n        } },\n\n\n      {\n        name: 'hidden',\n\n        self: true,\n\n        handler() {\n          css(this.$el, 'display', '');\n          removeClass(this.$el, 'uk-flex');\n        } }] };\n\n\n\n\n    function install$2(_ref) {let { modal } = _ref;\n      modal.dialog = function (content, options) {\n        const dialog = modal(\"<div class=\\\"uk-modal\\\"> <div class=\\\"uk-modal-dialog\\\">\" +\n\n        content + \"</div> </div>\",\n\n        options);\n\n\n        dialog.show();\n\n        on(\n        dialog.$el,\n        'hidden',\n        async () => {\n          await Promise.resolve();\n          dialog.$destroy(true);\n        },\n        { self: true });\n\n\n        return dialog;\n      };\n\n      modal.alert = function (message, options) {\n        return openDialog(\n        (_ref2) => {let { labels } = _ref2;return \"<div class=\\\"uk-modal-body\\\">\" + (\n          isString(message) ? message : html(message)) + \"</div> <div class=\\\"uk-modal-footer uk-text-right\\\"> <button class=\\\"uk-button uk-button-primary uk-modal-close\\\" autofocus>\" +\n\n\n\n          labels.ok + \"</button> </div>\";},\n\n\n        options,\n        (deferred) => deferred.resolve());\n\n      };\n\n      modal.confirm = function (message, options) {\n        return openDialog(\n        (_ref3) => {let { labels } = _ref3;return \"<form> <div class=\\\"uk-modal-body\\\">\" + (\n          isString(message) ? message : html(message)) + \"</div> <div class=\\\"uk-modal-footer uk-text-right\\\"> <button class=\\\"uk-button uk-button-default uk-modal-close\\\" type=\\\"button\\\">\" +\n\n\n          labels.cancel + \"</button> <button class=\\\"uk-button uk-button-primary\\\" autofocus>\" +\n\n          labels.ok + \"</button> </div> </form>\";},\n\n\n        options,\n        (deferred) => deferred.reject());\n\n      };\n\n      modal.prompt = function (message, value, options) {\n        return openDialog(\n        (_ref4) => {let { labels } = _ref4;return \"<form class=\\\"uk-form-stacked\\\"> <div class=\\\"uk-modal-body\\\"> <label>\" + (\n\n          isString(message) ? message : html(message)) + \"</label> <input class=\\\"uk-input\\\" value=\\\"\" + (\n          value || '') + \"\\\" autofocus> </div> <div class=\\\"uk-modal-footer uk-text-right\\\"> <button class=\\\"uk-button uk-button-default uk-modal-close\\\" type=\\\"button\\\">\" +\n\n\n\n          labels.cancel + \"</button> <button class=\\\"uk-button uk-button-primary\\\">\" +\n\n          labels.ok + \"</button> </div> </form>\";},\n\n\n        options,\n        (deferred) => deferred.resolve(null),\n        (dialog) => $('input', dialog.$el).value);\n\n      };\n\n      modal.labels = {\n        ok: 'Ok',\n        cancel: 'Cancel' };\n\n\n      function openDialog(tmpl, options, hideFn, submitFn) {\n        options = { bgClose: false, escClose: true, labels: modal.labels, ...options };\n\n        const dialog = modal.dialog(tmpl(options), options);\n        const deferred = new Deferred();\n\n        let resolved = false;\n\n        on(dialog.$el, 'submit', 'form', (e) => {\n          e.preventDefault();\n          deferred.resolve(submitFn == null ? void 0 : submitFn(dialog));\n          resolved = true;\n          dialog.hide();\n        });\n\n        on(dialog.$el, 'hide', () => !resolved && hideFn(deferred));\n\n        deferred.promise.dialog = dialog;\n\n        return deferred.promise;\n      }\n    }\n\n    var nav = {\n      extends: Accordion,\n\n      data: {\n        targets: '> .uk-parent',\n        toggle: '> a',\n        content: '> ul' } };\n\n    var navbar = {\n      mixins: [Class, Container],\n\n      props: {\n        dropdown: String,\n        align: String,\n        clsDrop: String,\n        boundary: Boolean,\n        dropbar: Boolean,\n        dropbarAnchor: Boolean,\n        duration: Number,\n        mode: Boolean,\n        offset: Boolean,\n        stretch: Boolean,\n        delayShow: Boolean,\n        delayHide: Boolean,\n        target: Boolean,\n        targetX: Boolean,\n        targetY: Boolean,\n        animation: Boolean,\n        animateOut: Boolean },\n\n\n      data: {\n        dropdown: '.uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle',\n        align: isRtl ? 'right' : 'left',\n        clsDrop: 'uk-navbar-dropdown',\n        boundary: true,\n        dropbar: false,\n        dropbarAnchor: false,\n        duration: 200,\n        container: false },\n\n\n      computed: {\n        dropbarAnchor(_ref, $el) {let { dropbarAnchor } = _ref;\n          return query(dropbarAnchor, $el) || $el;\n        },\n\n        dropbar: {\n          get(_ref2) {let { dropbar } = _ref2;\n            if (!dropbar) {\n              return null;\n            }\n\n            dropbar =\n            this._dropbar ||\n            query(dropbar, this.$el) ||\n            $('+ .uk-navbar-dropbar', this.$el);\n\n            return dropbar ? dropbar : this._dropbar = $('<div></div>');\n          },\n\n          watch(dropbar) {\n            addClass(dropbar, 'uk-dropbar', 'uk-dropbar-top', 'uk-navbar-dropbar');\n          },\n\n          immediate: true },\n\n\n        dropContainer(_, $el) {\n          return this.container || $el;\n        },\n\n        dropdowns: {\n          get(_ref3, $el) {let { clsDrop } = _ref3;\n            const dropdowns = $$(\".\" + clsDrop, $el);\n\n            if (this.dropContainer !== $el) {\n              for (const el of $$(\".\" + clsDrop, this.dropContainer)) {var _this$getDropdown;\n                const target = (_this$getDropdown = this.getDropdown(el)) == null ? void 0 : _this$getDropdown.targetEl;\n                if (!includes(dropdowns, el) && target && within(target, this.$el)) {\n                  dropdowns.push(el);\n                }\n              }\n            }\n\n            return dropdowns;\n          },\n\n          watch(dropdowns) {\n            this.$create(\n            'drop',\n            dropdowns.filter((el) => !this.getDropdown(el)),\n            {\n              ...this.$props,\n              flip: false,\n              shift: true,\n              pos: \"bottom-\" + this.align,\n              boundary: this.boundary === true ? this.$el : this.boundary });\n\n\n          },\n\n          immediate: true },\n\n\n        toggles: {\n          get(_ref4, $el) {let { dropdown } = _ref4;\n            return $$(dropdown, $el);\n          },\n\n          watch() {\n            const justify = hasClass(this.$el, 'uk-navbar-justify');\n            for (const container of $$(\n            '.uk-navbar-nav, .uk-navbar-left, .uk-navbar-right',\n            this.$el))\n            {\n              css(container, 'flexGrow', justify ? $$(this.dropdown, container).length : '');\n            }\n          },\n\n          immediate: true } },\n\n\n\n      disconnected() {\n        this.dropbar && remove$1(this.dropbar);\n        delete this._dropbar;\n      },\n\n      events: [\n      {\n        name: 'mouseover focusin',\n\n        delegate() {\n          return this.dropdown;\n        },\n\n        handler(_ref5) {let { current } = _ref5;\n          const active = this.getActive();\n          if (\n          active &&\n          includes(active.mode, 'hover') &&\n          active.targetEl &&\n          !within(active.targetEl, current) &&\n          !active.isDelaying)\n          {\n            active.hide(false);\n          }\n        } },\n\n\n      {\n        name: 'keydown',\n\n        delegate() {\n          return this.dropdown;\n        },\n\n        handler(e) {\n          const { current, keyCode } = e;\n          const active = this.getActive();\n\n          if (keyCode === keyMap.DOWN && hasAttr(current, 'aria-expanded')) {\n            e.preventDefault();\n\n            if (!active || active.targetEl !== current) {\n              current.click();\n              once(this.dropContainer, 'show', (_ref6) => {let { target } = _ref6;return (\n                  focusFirstFocusableElement(target));});\n\n            } else {\n              focusFirstFocusableElement(active.$el);\n            }\n          }\n\n          handleNavItemNavigation(e, this.toggles, active);\n        } },\n\n\n      {\n        name: 'keydown',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        delegate() {\n          return \".\" + this.clsDrop;\n        },\n\n        handler(e) {\n          const { current, keyCode } = e;\n\n          if (!includes(this.dropdowns, current)) {\n            return;\n          }\n\n          const active = this.getActive();\n          const elements = $$(selFocusable, current);\n          const i = findIndex(elements, (el) => matches(el, ':focus'));\n\n          if (keyCode === keyMap.UP) {\n            e.preventDefault();\n            if (i > 0) {\n              elements[i - 1].focus();\n            }\n          }\n\n          if (keyCode === keyMap.DOWN) {\n            e.preventDefault();\n            if (i < elements.length - 1) {\n              elements[i + 1].focus();\n            }\n          }\n\n          if (keyCode === keyMap.ESC) {var _active$targetEl;\n            active == null ? void 0 : (_active$targetEl = active.targetEl) == null ? void 0 : _active$targetEl.focus();\n          }\n\n          handleNavItemNavigation(e, this.toggles, active);\n        } },\n\n\n      {\n        name: 'mouseleave',\n\n        el() {\n          return this.dropbar;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler() {\n          const active = this.getActive();\n\n          if (\n          active &&\n          includes(active.mode, 'hover') &&\n          !this.dropdowns.some((el) => matches(el, ':hover')))\n          {\n            active.hide();\n          }\n        } },\n\n\n      {\n        name: 'beforeshow',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler(_ref7) {let { target } = _ref7;\n          if (!this.isDropbarDrop(target)) {\n            return;\n          }\n\n          if (this.dropbar.previousElementSibling !== this.dropbarAnchor) {\n            after(this.dropbarAnchor, this.dropbar);\n          }\n\n          addClass(target, this.clsDrop + \"-dropbar\");\n        } },\n\n\n      {\n        name: 'show',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler(_ref8) {let { target } = _ref8;\n          if (!this.isDropbarDrop(target)) {\n            return;\n          }\n\n          const drop = this.getDropdown(target);\n          this._observer = observeResize([drop.$el, ...drop.target], () => {\n            const targetOffsets = parents(target, \".\" + this.clsDrop).\n            concat(target).\n            map((el) => offset(el));\n            const minTop = Math.min(...targetOffsets.map((_ref9) => {let { top } = _ref9;return top;}));\n            const maxBottom = Math.max(...targetOffsets.map((_ref10) => {let { bottom } = _ref10;return bottom;}));\n            const dropbarOffset = offset(this.dropbar);\n            css(this.dropbar, 'top', this.dropbar.offsetTop - (dropbarOffset.top - minTop));\n            this.transitionTo(\n            maxBottom - minTop + toFloat(css(target, 'marginBottom')),\n            target);\n\n          });\n        } },\n\n\n      {\n        name: 'beforehide',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler(e) {\n          const active = this.getActive();\n\n          if (\n          matches(this.dropbar, ':hover') &&\n          (active == null ? void 0 : active.$el) === e.target &&\n          !this.toggles.some((el) => active.targetEl !== el && matches(el, ':focus')))\n          {\n            e.preventDefault();\n          }\n        } },\n\n\n      {\n        name: 'hide',\n\n        el() {\n          return this.dropContainer;\n        },\n\n        filter() {\n          return this.dropbar;\n        },\n\n        handler(_ref11) {var _this$_observer;let { target } = _ref11;\n          if (!this.isDropbarDrop(target)) {\n            return;\n          }\n\n          (_this$_observer = this._observer) == null ? void 0 : _this$_observer.disconnect();\n\n          const active = this.getActive();\n\n          if (!active || (active == null ? void 0 : active.$el) === target) {\n            this.transitionTo(0);\n          }\n        } }],\n\n\n\n      methods: {\n        getActive() {\n          return includes(this.dropdowns, active == null ? void 0 : active.$el) && active;\n        },\n\n        transitionTo(newHeight, el) {\n          const { dropbar } = this;\n          const oldHeight = height(dropbar);\n\n          el = oldHeight < newHeight && el;\n\n          css(el, 'clipPath', \"polygon(0 0,100% 0,100% \" + oldHeight + \"px,0 \" + oldHeight + \"px)\");\n\n          height(dropbar, oldHeight);\n\n          Transition.cancel([el, dropbar]);\n          Promise.all([\n          Transition.start(dropbar, { height: newHeight }, this.duration),\n          Transition.start(\n          el,\n          {\n            clipPath: \"polygon(0 0,100% 0,100% \" + newHeight + \"px,0 \" + newHeight + \"px)\" },\n\n          this.duration)]).\n\n\n          catch(noop).\n          then(() => css(el, { clipPath: '' }));\n        },\n\n        getDropdown(el) {\n          return this.$getComponent(el, 'drop') || this.$getComponent(el, 'dropdown');\n        },\n\n        isDropbarDrop(el) {\n          return this.getDropdown(el) && hasClass(el, this.clsDrop);\n        } } };\n\n\n\n    function handleNavItemNavigation(e, toggles, active) {\n      const { current, keyCode } = e;\n      const target = (active == null ? void 0 : active.targetEl) || current;\n      const i = toggles.indexOf(target);\n\n      // Left\n      if (keyCode === keyMap.LEFT && i > 0) {\n        active == null ? void 0 : active.hide(false);\n        toggles[i - 1].focus();\n      }\n\n      // Right\n      if (keyCode === keyMap.RIGHT && i < toggles.length - 1) {\n        active == null ? void 0 : active.hide(false);\n        toggles[i + 1].focus();\n      }\n\n      if (keyCode === keyMap.TAB) {\n        target.focus();\n        active == null ? void 0 : active.hide(false);\n      }\n    }\n\n    function focusFirstFocusableElement(el) {\n      if (!$(':focus', el)) {var _$;\n        (_$ = $(selFocusable, el)) == null ? void 0 : _$.focus();\n      }\n    }\n\n    const keyMap = {\n      TAB: 9,\n      ESC: 27,\n      LEFT: 37,\n      UP: 38,\n      RIGHT: 39,\n      DOWN: 40 };\n\n    var Swipe = {\n      props: {\n        swiping: Boolean },\n\n\n      data: {\n        swiping: true },\n\n\n      computed: {\n        swipeTarget(props, $el) {\n          return $el;\n        } },\n\n\n      connected() {\n        if (!this.swiping) {\n          return;\n        }\n\n        registerEvent(this, {\n          el: this.swipeTarget,\n          name: pointerDown$1,\n          passive: true,\n          handler(e) {\n            if (!isTouch(e)) {\n              return;\n            }\n\n            // Handle Swipe Gesture\n            const pos = getEventPos(e);\n            const target = 'tagName' in e.target ? e.target : parent(e.target);\n            once(document, pointerUp$1 + \" \" + pointerCancel + \" scroll\", (e) => {\n              const { x, y } = getEventPos(e);\n\n              // swipe\n              if (\n              e.type !== 'scroll' && target && x && Math.abs(pos.x - x) > 100 ||\n              y && Math.abs(pos.y - y) > 100)\n              {\n                setTimeout(() => {\n                  trigger(target, 'swipe');\n                  trigger(target, \"swipe\" + swipeDirection(pos.x, pos.y, x, y));\n                });\n              }\n            });\n          } });\n\n      } };\n\n\n    function swipeDirection(x1, y1, x2, y2) {\n      return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ?\n      x1 - x2 > 0 ?\n      'Left' :\n      'Right' :\n      y1 - y2 > 0 ?\n      'Up' :\n      'Down';\n    }\n\n    var offcanvas = {\n      mixins: [Modal, Swipe],\n\n      args: 'mode',\n\n      props: {\n        mode: String,\n        flip: Boolean,\n        overlay: Boolean },\n\n\n      data: {\n        mode: 'slide',\n        flip: false,\n        overlay: false,\n        clsPage: 'uk-offcanvas-page',\n        clsContainer: 'uk-offcanvas-container',\n        selPanel: '.uk-offcanvas-bar',\n        clsFlip: 'uk-offcanvas-flip',\n        clsContainerAnimation: 'uk-offcanvas-container-animation',\n        clsSidebarAnimation: 'uk-offcanvas-bar-animation',\n        clsMode: 'uk-offcanvas',\n        clsOverlay: 'uk-offcanvas-overlay',\n        selClose: '.uk-offcanvas-close',\n        container: false },\n\n\n      computed: {\n        clsFlip(_ref) {let { flip, clsFlip } = _ref;\n          return flip ? clsFlip : '';\n        },\n\n        clsOverlay(_ref2) {let { overlay, clsOverlay } = _ref2;\n          return overlay ? clsOverlay : '';\n        },\n\n        clsMode(_ref3) {let { mode, clsMode } = _ref3;\n          return clsMode + \"-\" + mode;\n        },\n\n        clsSidebarAnimation(_ref4) {let { mode, clsSidebarAnimation } = _ref4;\n          return mode === 'none' || mode === 'reveal' ? '' : clsSidebarAnimation;\n        },\n\n        clsContainerAnimation(_ref5) {let { mode, clsContainerAnimation } = _ref5;\n          return mode !== 'push' && mode !== 'reveal' ? '' : clsContainerAnimation;\n        },\n\n        transitionElement(_ref6) {let { mode } = _ref6;\n          return mode === 'reveal' ? parent(this.panel) : this.panel;\n        } },\n\n\n      update: {\n        read() {\n          if (this.isToggled() && !isVisible(this.$el)) {\n            this.hide();\n          }\n        },\n\n        events: ['resize'] },\n\n\n      events: [\n      {\n        name: 'touchmove',\n\n        self: true,\n        passive: false,\n\n        filter() {\n          return this.overlay;\n        },\n\n        handler(e) {\n          e.cancelable && e.preventDefault();\n        } },\n\n\n      {\n        name: 'show',\n\n        self: true,\n\n        handler() {\n          if (this.mode === 'reveal' && !hasClass(parent(this.panel), this.clsMode)) {\n            wrapAll(this.panel, '<div>');\n            addClass(parent(this.panel), this.clsMode);\n          }\n\n          const { body, scrollingElement } = document;\n\n          addClass(body, this.clsContainer, this.clsFlip);\n          css(body, 'touch-action', 'pan-y pinch-zoom');\n          css(this.$el, 'display', 'block');\n          css(this.panel, 'maxWidth', scrollingElement.clientWidth);\n          addClass(this.$el, this.clsOverlay);\n          addClass(\n          this.panel,\n          this.clsSidebarAnimation,\n          this.mode === 'reveal' ? '' : this.clsMode);\n\n\n          height(body); // force reflow\n          addClass(body, this.clsContainerAnimation);\n\n          this.clsContainerAnimation && suppressUserScale();\n        } },\n\n\n      {\n        name: 'hide',\n\n        self: true,\n\n        handler() {\n          removeClass(document.body, this.clsContainerAnimation);\n          css(document.body, 'touch-action', '');\n        } },\n\n\n      {\n        name: 'hidden',\n\n        self: true,\n\n        handler() {\n          this.clsContainerAnimation && resumeUserScale();\n\n          if (this.mode === 'reveal') {\n            unwrap(this.panel);\n          }\n\n          removeClass(this.panel, this.clsSidebarAnimation, this.clsMode);\n          removeClass(this.$el, this.clsOverlay);\n          css(this.$el, 'display', '');\n          css(this.panel, 'maxWidth', '');\n          removeClass(document.body, this.clsContainer, this.clsFlip);\n        } },\n\n\n      {\n        name: 'swipeLeft swipeRight',\n\n        handler(e) {\n          if (this.isToggled() && endsWith(e.type, 'Left') ^ this.flip) {\n            this.hide();\n          }\n        } }] };\n\n\n\n\n    // Chrome in responsive mode zooms page upon opening offcanvas\n    function suppressUserScale() {\n      getViewport().content += ',user-scalable=0';\n    }\n\n    function resumeUserScale() {\n      const viewport = getViewport();\n      viewport.content = viewport.content.replace(/,user-scalable=0$/, '');\n    }\n\n    function getViewport() {\n      return (\n        $('meta[name=\"viewport\"]', document.head) || append(document.head, '<meta name=\"viewport\">'));\n\n    }\n\n    var overflowAuto = {\n      mixins: [Class, Resize],\n\n      props: {\n        selContainer: String,\n        selContent: String,\n        minHeight: Number },\n\n\n      data: {\n        selContainer: '.uk-modal',\n        selContent: '.uk-modal-dialog',\n        minHeight: 150 },\n\n\n      computed: {\n        container(_ref, $el) {let { selContainer } = _ref;\n          return closest($el, selContainer);\n        },\n\n        content(_ref2, $el) {let { selContent } = _ref2;\n          return closest($el, selContent);\n        } },\n\n\n      resizeTargets() {\n        return [this.container, this.content];\n      },\n\n      update: {\n        read() {\n          if (!this.content || !this.container || !isVisible(this.$el)) {\n            return false;\n          }\n\n          return {\n            max: Math.max(\n            this.minHeight,\n            height(this.container) - (dimensions$1(this.content).height - height(this.$el))) };\n\n\n        },\n\n        write(_ref3) {let { max } = _ref3;\n          css(this.$el, { minHeight: this.minHeight, maxHeight: max });\n        },\n\n        events: ['resize'] } };\n\n    var responsive = {\n      mixins: [Resize],\n\n      props: ['width', 'height'],\n\n      resizeTargets() {\n        return [this.$el, parent(this.$el)];\n      },\n\n      connected() {\n        addClass(this.$el, 'uk-responsive-width');\n      },\n\n      update: {\n        read() {\n          return isVisible(this.$el) && this.width && this.height ?\n          { width: width(parent(this.$el)), height: this.height } :\n          false;\n        },\n\n        write(dim) {\n          height(\n          this.$el,\n          Dimensions.contain(\n          {\n            height: this.height,\n            width: this.width },\n\n          dim).\n          height);\n\n        },\n\n        events: ['resize'] } };\n\n    var scroll = {\n      props: {\n        offset: Number },\n\n\n      data: {\n        offset: 0 },\n\n\n      connected() {\n        registerClick(this);\n      },\n\n      disconnected() {\n        unregisterClick(this);\n      },\n\n      methods: {\n        async scrollTo(el) {\n          el = el && $(el) || document.body;\n\n          if (trigger(this.$el, 'beforescroll', [this, el])) {\n            await scrollIntoView(el, { offset: this.offset });\n            trigger(this.$el, 'scrolled', [this, el]);\n          }\n        } } };\n\n\n\n    const components$2 = new Set();\n    function registerClick(cmp) {\n      if (!components$2.size) {\n        on(document, 'click', clickHandler);\n      }\n\n      components$2.add(cmp);\n    }\n\n    function unregisterClick(cmp) {\n      components$2.delete(cmp);\n\n      if (!components$2.size) {\n        off(document, 'click', clickHandler);\n      }\n    }\n\n    function clickHandler(e) {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      for (const component of components$2) {\n        if (within(e.target, component.$el)) {\n          e.preventDefault();\n          component.scrollTo(getTargetElement(component.$el));\n        }\n      }\n    }\n\n    function getTargetElement(el) {\n      return document.getElementById(decodeURIComponent(el.hash).substring(1));\n    }\n\n    var scrollspy = {\n      mixins: [Scroll],\n\n      args: 'cls',\n\n      props: {\n        cls: String,\n        target: String,\n        hidden: Boolean,\n        offsetTop: Number,\n        offsetLeft: Number,\n        repeat: Boolean,\n        delay: Number },\n\n\n      data: () => ({\n        cls: '',\n        target: false,\n        hidden: true,\n        offsetTop: 0,\n        offsetLeft: 0,\n        repeat: false,\n        delay: 0,\n        inViewClass: 'uk-scrollspy-inview' }),\n\n\n      computed: {\n        elements: {\n          get(_ref, $el) {let { target } = _ref;\n            return target ? $$(target, $el) : [$el];\n          },\n\n          watch(elements, prev) {\n            if (this.hidden) {\n              css(filter$1(elements, \":not(.\" + this.inViewClass + \")\"), 'visibility', 'hidden');\n            }\n\n            if (!isEqual(elements, prev)) {\n              this.$reset();\n            }\n          },\n\n          immediate: true } },\n\n\n\n      connected() {\n        this._data.elements = new Map();\n        this.registerObserver(\n        observeIntersection(\n        this.elements,\n        (records) => {\n          const elements = this._data.elements;\n          for (const { target: el, isIntersecting } of records) {\n            if (!elements.has(el)) {\n              elements.set(el, {\n                cls: data(el, 'uk-scrollspy-class') || this.cls });\n\n            }\n\n            const state = elements.get(el);\n            if (!this.repeat && state.show) {\n              continue;\n            }\n\n            state.show = isIntersecting;\n          }\n\n          this.$emit();\n        },\n        {\n          rootMargin: toPx(this.offsetTop, 'height') - 1 + \"px \" + (\n          toPx(this.offsetLeft, 'width') - 1) + \"px\" },\n\n\n        false));\n\n\n      },\n\n      disconnected() {\n        for (const [el, state] of this._data.elements.entries()) {\n          removeClass(el, this.inViewClass, (state == null ? void 0 : state.cls) || '');\n        }\n      },\n\n      update: [\n      {\n        write(data) {\n          for (const [el, state] of data.elements.entries()) {\n            if (state.show && !state.inview && !state.queued) {\n              state.queued = true;\n\n              data.promise = (data.promise || Promise.resolve()).\n              then(() => new Promise((resolve) => setTimeout(resolve, this.delay))).\n              then(() => {\n                this.toggle(el, true);\n                setTimeout(() => {\n                  state.queued = false;\n                  this.$emit();\n                }, 300);\n              });\n            } else if (!state.show && state.inview && !state.queued && this.repeat) {\n              this.toggle(el, false);\n            }\n          }\n        } }],\n\n\n\n      methods: {\n        toggle(el, inview) {\n          const state = this._data.elements.get(el);\n\n          if (!state) {\n            return;\n          }\n\n          state.off == null ? void 0 : state.off();\n\n          css(el, 'visibility', !inview && this.hidden ? 'hidden' : '');\n\n          toggleClass(el, this.inViewClass, inview);\n          toggleClass(el, state.cls);\n\n          if (/\\buk-animation-/.test(state.cls)) {\n            const removeAnimationClasses = () => removeClasses(el, 'uk-animation-[\\\\w-]+');\n            if (inview) {\n              state.off = once(el, 'animationcancel animationend', removeAnimationClasses);\n            } else {\n              removeAnimationClasses();\n            }\n          }\n\n          trigger(el, inview ? 'inview' : 'outview');\n\n          state.inview = inview;\n\n          // change to `visibility: hidden` does not trigger observers\n          this.$update(el);\n        } } };\n\n    var scrollspyNav = {\n      mixins: [Scroll],\n\n      props: {\n        cls: String,\n        closest: String,\n        scroll: Boolean,\n        overflow: Boolean,\n        offset: Number },\n\n\n      data: {\n        cls: 'uk-active',\n        closest: false,\n        scroll: false,\n        overflow: true,\n        offset: 0 },\n\n\n      computed: {\n        links: {\n          get(_, $el) {\n            return $$('a[href*=\"#\"]', $el).filter((el) => el.hash && isSameSiteAnchor(el));\n          },\n\n          watch(links) {\n            if (this.scroll) {\n              this.$create('scroll', links, { offset: this.offset || 0 });\n            }\n          },\n\n          immediate: true },\n\n\n        elements(_ref) {let { closest: selector } = _ref;\n          return closest(this.links, selector || '*');\n        } },\n\n\n      update: [\n      {\n        read() {\n          const targets = this.links.map(getTargetElement).filter(Boolean);\n\n          const { length } = targets;\n\n          if (!length || !isVisible(this.$el)) {\n            return false;\n          }\n\n          const [scrollElement] = scrollParents(targets, /auto|scroll/, true);\n          const { scrollTop, scrollHeight } = scrollElement;\n          const viewport = offsetViewport(scrollElement);\n          const max = scrollHeight - viewport.height;\n          let active = false;\n\n          if (scrollTop === max) {\n            active = length - 1;\n          } else {\n            for (let i = 0; i < targets.length; i++) {\n              if (offset(targets[i]).top - viewport.top - this.offset > 0) {\n                break;\n              }\n              active = +i;\n            }\n\n            if (active === false && this.overflow) {\n              active = 0;\n            }\n          }\n\n          return { active };\n        },\n\n        write(_ref2) {let { active } = _ref2;\n          const changed = active !== false && !hasClass(this.elements[active], this.cls);\n\n          this.links.forEach((el) => el.blur());\n          for (let i = 0; i < this.elements.length; i++) {\n            toggleClass(this.elements[i], this.cls, +i === active);\n          }\n\n          if (changed) {\n            trigger(this.$el, 'active', [active, this.elements[active]]);\n          }\n        },\n\n        events: ['scroll', 'resize'] }] };\n\n    var sticky = {\n      mixins: [Class, Media, Resize, Scroll],\n\n      props: {\n        position: String,\n        top: null,\n        bottom: null,\n        start: null,\n        end: null,\n        offset: String,\n        overflowFlip: Boolean,\n        animation: String,\n        clsActive: String,\n        clsInactive: String,\n        clsFixed: String,\n        clsBelow: String,\n        selTarget: String,\n        showOnUp: Boolean,\n        targetOffset: Number },\n\n\n      data: {\n        position: 'top',\n        top: false,\n        bottom: false,\n        start: false,\n        end: false,\n        offset: 0,\n        overflowFlip: false,\n        animation: '',\n        clsActive: 'uk-active',\n        clsInactive: '',\n        clsFixed: 'uk-sticky-fixed',\n        clsBelow: 'uk-sticky-below',\n        selTarget: '',\n        showOnUp: false,\n        targetOffset: false },\n\n\n      computed: {\n        selTarget(_ref, $el) {let { selTarget } = _ref;\n          return selTarget && $(selTarget, $el) || $el;\n        } },\n\n\n      resizeTargets() {\n        return document.documentElement;\n      },\n\n      connected() {\n        this.start = coerce(this.start || this.top);\n        this.end = coerce(this.end || this.bottom);\n\n        this.placeholder =\n        $('+ .uk-sticky-placeholder', this.$el) ||\n        $('<div class=\"uk-sticky-placeholder\"></div>');\n        this.isFixed = false;\n        this.setActive(false);\n      },\n\n      disconnected() {\n        if (this.isFixed) {\n          this.hide();\n          removeClass(this.selTarget, this.clsInactive);\n        }\n\n        remove$1(this.placeholder);\n        this.placeholder = null;\n      },\n\n      events: [\n      {\n        name: 'resize',\n\n        el() {\n          return window;\n        },\n\n        handler() {\n          this.$emit('resize');\n        } },\n\n      {\n        name: 'load hashchange popstate',\n\n        el() {\n          return window;\n        },\n\n        filter() {\n          return this.targetOffset !== false;\n        },\n\n        handler() {\n          const { scrollingElement } = document;\n\n          if (!location.hash || scrollingElement.scrollTop === 0) {\n            return;\n          }\n\n          setTimeout(() => {\n            const targetOffset = offset($(location.hash));\n            const elOffset = offset(this.$el);\n\n            if (this.isFixed && intersectRect(targetOffset, elOffset)) {\n              scrollingElement.scrollTop =\n              targetOffset.top -\n              elOffset.height -\n              toPx(this.targetOffset, 'height', this.placeholder) -\n              toPx(this.offset, 'height', this.placeholder);\n            }\n          });\n        } }],\n\n\n\n      update: [\n      {\n        read(_ref2, types) {let { height: height$1, margin } = _ref2;\n          this.inactive = !this.matchMedia || !isVisible(this.$el);\n\n          if (this.inactive) {\n            return false;\n          }\n\n          const hide = this.active && types.has('resize');\n          if (hide) {\n            css(this.selTarget, 'transition', '0s');\n            this.hide();\n          }\n\n          if (!this.active) {\n            height$1 = offset(this.$el).height;\n            margin = css(this.$el, 'margin');\n          }\n\n          if (hide) {\n            this.show();\n            requestAnimationFrame(() => css(this.selTarget, 'transition', ''));\n          }\n\n          const referenceElement = this.isFixed ? this.placeholder : this.$el;\n          const windowHeight = height(window);\n\n          let position = this.position;\n          if (this.overflowFlip && height$1 > windowHeight) {\n            position = position === 'top' ? 'bottom' : 'top';\n          }\n\n          let offset$1 = toPx(this.offset, 'height', referenceElement);\n          if (position === 'bottom' && (height$1 < windowHeight || this.overflowFlip)) {\n            offset$1 += windowHeight - height$1;\n          }\n\n          const overflow = this.overflowFlip ?\n          0 :\n          Math.max(0, height$1 + offset$1 - windowHeight);\n          const topOffset = offset(referenceElement).top;\n\n          const start =\n          (this.start === false ?\n          topOffset :\n          parseProp(this.start, this.$el, topOffset)) - offset$1;\n          const end =\n          this.end === false ?\n          document.scrollingElement.scrollHeight - windowHeight :\n          parseProp(this.end, this.$el, topOffset + height$1, true) -\n          offset(this.$el).height +\n          overflow -\n          offset$1;\n\n          return {\n            start,\n            end,\n            offset: offset$1,\n            overflow,\n            topOffset,\n            height: height$1,\n            margin,\n            width: dimensions$1(referenceElement).width,\n            top: offsetPosition(referenceElement)[0] };\n\n        },\n\n        write(_ref3) {let { height, margin } = _ref3;\n          const { placeholder } = this;\n\n          css(placeholder, { height, margin });\n\n          if (!within(placeholder, document)) {\n            after(this.$el, placeholder);\n            placeholder.hidden = true;\n          }\n        },\n\n        events: ['resize'] },\n\n\n      {\n        read(_ref4)\n\n\n\n\n\n\n        {let { scroll: prevScroll = 0, dir: prevDir = 'down', overflow, overflowScroll = 0, start, end } = _ref4;\n          const scroll = document.scrollingElement.scrollTop;\n          const dir = prevScroll <= scroll ? 'down' : 'up';\n\n          return {\n            dir,\n            prevDir,\n            scroll,\n            prevScroll,\n            offsetParentTop: offset(\n            (this.isFixed ? this.placeholder : this.$el).offsetParent).\n            top,\n            overflowScroll: clamp(\n            overflowScroll + clamp(scroll, start, end) - clamp(prevScroll, start, end),\n            0,\n            overflow) };\n\n\n        },\n\n        write(data, types) {\n          const isScrollUpdate = types.has('scroll');\n          const {\n            initTimestamp = 0,\n            dir,\n            prevDir,\n            scroll,\n            prevScroll = 0,\n            top,\n            start,\n            topOffset,\n            height } =\n          data;\n\n          if (\n          scroll < 0 ||\n          scroll === prevScroll && isScrollUpdate ||\n          this.showOnUp && !isScrollUpdate && !this.isFixed)\n          {\n            return;\n          }\n\n          const now = Date.now();\n          if (now - initTimestamp > 300 || dir !== prevDir) {\n            data.initScroll = scroll;\n            data.initTimestamp = now;\n          }\n\n          if (\n          this.showOnUp &&\n          !this.isFixed &&\n          Math.abs(data.initScroll - scroll) <= 30 &&\n          Math.abs(prevScroll - scroll) <= 10)\n          {\n            return;\n          }\n\n          if (\n          this.inactive ||\n          scroll < start ||\n          this.showOnUp && (\n          scroll <= start ||\n          dir === 'down' && isScrollUpdate ||\n          dir === 'up' && !this.isFixed && scroll <= topOffset + height))\n          {\n            if (!this.isFixed) {\n              if (Animation.inProgress(this.$el) && top > scroll) {\n                Animation.cancel(this.$el);\n                this.hide();\n              }\n\n              return;\n            }\n\n            this.isFixed = false;\n\n            if (this.animation && scroll > topOffset) {\n              Animation.cancel(this.$el);\n              Animation.out(this.$el, this.animation).then(() => this.hide(), noop);\n            } else {\n              this.hide();\n            }\n          } else if (this.isFixed) {\n            this.update();\n          } else if (this.animation && scroll > topOffset) {\n            Animation.cancel(this.$el);\n            this.show();\n            Animation.in(this.$el, this.animation).catch(noop);\n          } else {\n            this.show();\n          }\n        },\n\n        events: ['resize', 'scroll'] }],\n\n\n\n      methods: {\n        show() {\n          this.isFixed = true;\n          this.update();\n          this.placeholder.hidden = false;\n        },\n\n        hide() {\n          this.setActive(false);\n          removeClass(this.$el, this.clsFixed, this.clsBelow);\n          css(this.$el, { position: '', top: '', width: '' });\n          this.placeholder.hidden = true;\n        },\n\n        update() {\n          let {\n            width,\n            scroll = 0,\n            overflow,\n            overflowScroll = 0,\n            start,\n            end,\n            offset,\n            topOffset,\n            height,\n            offsetParentTop } =\n          this._data;\n          const active = start !== 0 || scroll > start;\n          let position = 'fixed';\n\n          if (scroll > end) {\n            offset += end - offsetParentTop;\n            position = 'absolute';\n          }\n\n          if (overflow) {\n            offset -= overflowScroll;\n          }\n\n          css(this.$el, {\n            position,\n            top: offset + \"px\",\n            width });\n\n\n          this.setActive(active);\n          toggleClass(this.$el, this.clsBelow, scroll > topOffset + height);\n          addClass(this.$el, this.clsFixed);\n        },\n\n        setActive(active) {\n          const prev = this.active;\n          this.active = active;\n          if (active) {\n            replaceClass(this.selTarget, this.clsInactive, this.clsActive);\n            prev !== active && trigger(this.$el, 'active');\n          } else {\n            replaceClass(this.selTarget, this.clsActive, this.clsInactive);\n            prev !== active && trigger(this.$el, 'inactive');\n          }\n        } } };\n\n\n\n    function parseProp(value, el, propOffset, padding) {\n      if (!value) {\n        return 0;\n      }\n\n      if (isNumeric(value) || isString(value) && value.match(/^-?\\d/)) {\n        return propOffset + toPx(value, 'height', el, true);\n      } else {\n        const refElement = value === true ? parent(el) : query(value, el);\n        return (\n          offset(refElement).bottom - (\n          padding && refElement && within(el, refElement) ?\n          toFloat(css(refElement, 'paddingBottom')) :\n          0));\n\n      }\n    }\n\n    function coerce(value) {\n      if (value === 'true') {\n        return true;\n      } else if (value === 'false') {\n        return false;\n      }\n      return value;\n    }\n\n    var Switcher = {\n      mixins: [Lazyload, Swipe, Togglable],\n\n      args: 'connect',\n\n      props: {\n        connect: String,\n        toggle: String,\n        itemNav: String,\n        active: Number },\n\n\n      data: {\n        connect: '~.uk-switcher',\n        toggle: '> * > :first-child',\n        itemNav: false,\n        active: 0,\n        cls: 'uk-active',\n        attrItem: 'uk-switcher-item' },\n\n\n      computed: {\n        connects: {\n          get(_ref, $el) {let { connect } = _ref;\n            return queryAll(connect, $el);\n          },\n\n          watch(connects) {var _this$_observer;\n            if (this.swiping) {\n              css(connects, 'touchAction', 'pan-y pinch-zoom');\n            }\n\n            (_this$_observer = this._observer) == null ? void 0 : _this$_observer.disconnect();\n            this.registerObserver(\n            this._observer = observeMutation(\n            connects,\n            (records) => {\n              const index = this.index();\n              for (const { target: el } of records) {\n                children(el).forEach((child, i) =>\n                toggleClass(child, this.cls, i === index));\n\n                this.lazyload(this.$el, children(el));\n              }\n            },\n            { childList: true }));\n\n\n          },\n\n          immediate: true },\n\n\n        toggles: {\n          get(_ref2, $el) {let { toggle } = _ref2;\n            return $$(toggle, $el).filter(\n            (el) => !matches(el, '.uk-disabled *, .uk-disabled, [disabled]'));\n\n          },\n\n          watch(toggles) {\n            const active = this.index();\n            this.show(~active ? active : toggles[this.active] || toggles[0]);\n          },\n\n          immediate: true },\n\n\n        children() {\n          return children(this.$el).filter((child) =>\n          this.toggles.some((toggle) => within(toggle, child)));\n\n        },\n\n        swipeTarget() {\n          return this.connects;\n        } },\n\n\n      connected() {\n        // check for connects\n        ready(() => this.$emit());\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return this.toggle;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.show(e.current);\n        } },\n\n\n      {\n        name: 'click',\n\n        el() {\n          return this.connects.concat(this.itemNav ? queryAll(this.itemNav, this.$el) : []);\n        },\n\n        delegate() {\n          return \"[\" + this.attrItem + \"],[data-\" + this.attrItem + \"]\";\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.show(data(e.current, this.attrItem));\n        } },\n\n\n      {\n        name: 'swipeRight swipeLeft',\n\n        filter() {\n          return this.swiping;\n        },\n\n        el() {\n          return this.connects;\n        },\n\n        handler(_ref3) {let { type } = _ref3;\n          this.show(endsWith(type, 'Left') ? 'next' : 'previous');\n        } }],\n\n\n\n      methods: {\n        index() {\n          return findIndex(this.children, (el) => hasClass(el, this.cls));\n        },\n\n        show(item) {\n          const prev = this.index();\n          const next = getIndex(item, this.toggles, prev);\n          const active = getIndex(this.children[next], children(this.$el));\n          children(this.$el).forEach((child, i) => {\n            toggleClass(child, this.cls, active === i);\n            attr(this.toggles[i], 'aria-expanded', active === i);\n          });\n\n          const animate = prev >= 0 && prev !== next;\n          this.connects.forEach(async (_ref4) => {let { children } = _ref4;\n            await this.toggleElement(\n            toNodes(children).filter((child) => hasClass(child, this.cls)),\n            false,\n            animate);\n\n            await this.toggleElement(children[active], true, animate);\n          });\n        } } };\n\n    var tab = {\n      mixins: [Class],\n\n      extends: Switcher,\n\n      props: {\n        media: Boolean },\n\n\n      data: {\n        media: 960,\n        attrItem: 'uk-tab-item' },\n\n\n      connected() {\n        const cls = hasClass(this.$el, 'uk-tab-left') ?\n        'uk-tab-left' :\n        hasClass(this.$el, 'uk-tab-right') ?\n        'uk-tab-right' :\n        false;\n\n        if (cls) {\n          this.$create('toggle', this.$el, { cls, mode: 'media', media: this.media });\n        }\n      } };\n\n    const KEY_SPACE = 32;\n\n    var toggle = {\n      mixins: [Lazyload, Media, Togglable],\n\n      args: 'target',\n\n      props: {\n        href: String,\n        target: null,\n        mode: 'list',\n        queued: Boolean },\n\n\n      data: {\n        href: false,\n        target: false,\n        mode: 'click',\n        queued: true },\n\n\n      computed: {\n        target: {\n          get(_ref, $el) {let { href, target } = _ref;\n            target = queryAll(target || href, $el);\n            return target.length && target || [$el];\n          },\n\n          watch() {\n            this.updateAria();\n            this.lazyload(this.$el, this.target);\n          },\n\n          immediate: true } },\n\n\n\n      connected() {\n        if (!includes(this.mode, 'media') && !isFocusable(this.$el)) {\n          attr(this.$el, 'tabindex', '0');\n        }\n\n        // check for target\n        ready(() => this.$emit());\n      },\n\n      events: [\n      {\n        name: pointerDown$1,\n\n        filter() {\n          return includes(this.mode, 'hover');\n        },\n\n        handler(e) {\n          this._preventClick = null;\n\n          if (!isTouch(e) || this._showState) {\n            return;\n          }\n\n          // Clicking a button does not give it focus on all browsers and platforms\n          // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus\n          trigger(this.$el, 'focus');\n          once(\n          document,\n          pointerDown$1,\n          () => trigger(this.$el, 'blur'),\n          true,\n          (e) => !within(e.target, this.$el));\n\n\n          // Prevent initial click to prevent double toggle through focus + click\n          if (includes(this.mode, 'click')) {\n            this._preventClick = true;\n          }\n        } },\n\n\n      {\n        name: pointerEnter + \" \" + pointerLeave + \" focus blur\",\n\n        filter() {\n          return includes(this.mode, 'hover');\n        },\n\n        handler(e) {\n          if (isTouch(e)) {\n            return;\n          }\n\n          const show = includes([pointerEnter, 'focus'], e.type);\n          const expanded = attr(this.$el, 'aria-expanded');\n\n          // Skip hide if still hovered or focused\n          if (\n          !show && (\n          e.type === pointerLeave && matches(this.$el, ':focus') ||\n          e.type === 'blur' && matches(this.$el, ':hover')))\n          {\n            return;\n          }\n\n          // Skip if state does not change e.g. hover + focus received\n          if (this._showState && show && expanded !== this._showState) {\n            // Ensure reset if state has changed through click\n            if (!show) {\n              this._showState = null;\n            }\n            return;\n          }\n\n          this._showState = show ? expanded : null;\n\n          this.toggle(\"toggle\" + (show ? 'show' : 'hide'));\n        } },\n\n\n      {\n        name: 'keydown',\n\n        filter() {\n          return includes(this.mode, 'click') && !isTag(this.$el, 'input');\n        },\n\n        handler(e) {\n          if (e.keyCode === KEY_SPACE) {\n            e.preventDefault();\n            this.$el.click();\n          }\n        } },\n\n\n      {\n        name: 'click',\n\n        filter() {\n          return ['click', 'hover'].some((mode) => includes(this.mode, mode));\n        },\n\n        handler(e) {\n          let link;\n          if (\n          this._preventClick ||\n          closest(e.target, 'a[href=\"#\"], a[href=\"\"]') ||\n          (link = closest(e.target, 'a[href]')) && (\n          attr(this.$el, 'aria-expanded') !== 'true' ||\n          link.hash && matches(this.target, link.hash)))\n          {\n            e.preventDefault();\n          }\n\n          if (!this._preventClick && includes(this.mode, 'click')) {\n            this.toggle();\n          }\n        } },\n\n\n      {\n        name: 'hide show',\n\n        self: true,\n\n        el() {\n          return this.target;\n        },\n\n        handler(_ref2) {let { target, type } = _ref2;\n          this.updateAria(target === this.target[0] && type === 'show');\n        } },\n\n\n      {\n        name: 'mediachange',\n\n        filter() {\n          return includes(this.mode, 'media');\n        },\n\n        el() {\n          return this.target;\n        },\n\n        handler(e, mediaObj) {\n          if (mediaObj.matches ^ this.isToggled(this.target)) {\n            this.toggle();\n          }\n        } }],\n\n\n\n      methods: {\n        async toggle(type) {\n          if (!trigger(this.target, type || 'toggle', [this])) {\n            return;\n          }\n\n          if (!this.queued) {\n            return this.toggleElement(this.target);\n          }\n\n          const leaving = this.target.filter((el) => hasClass(el, this.clsLeave));\n\n          if (leaving.length) {\n            for (const el of this.target) {\n              const isLeaving = includes(leaving, el);\n              this.toggleElement(el, isLeaving, isLeaving);\n            }\n            return;\n          }\n\n          const toggled = this.target.filter(this.isToggled);\n          await this.toggleElement(toggled, false);\n          await this.toggleElement(\n          this.target.filter((el) => !includes(toggled, el)),\n          true);\n\n        },\n\n        updateAria(toggled) {\n          if (includes(this.mode, 'media')) {\n            return;\n          }\n\n          attr(\n          this.$el,\n          'aria-expanded',\n          isBoolean(toggled) ? toggled : this.isToggled(this.target));\n\n        } } };\n\n    var components$1 = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        Accordion: Accordion,\n        Alert: alert,\n        Cover: cover,\n        Drop: drop,\n        Dropdown: drop,\n        FormCustom: formCustom,\n        Grid: grid,\n        HeightMatch: heightMatch,\n        HeightViewport: heightViewport,\n        Icon: Icon,\n        Img: img,\n        Leader: leader,\n        Margin: Margin,\n        Modal: modal,\n        Nav: nav,\n        Navbar: navbar,\n        Offcanvas: offcanvas,\n        OverflowAuto: overflowAuto,\n        Responsive: responsive,\n        Scroll: scroll,\n        Scrollspy: scrollspy,\n        ScrollspyNav: scrollspyNav,\n        Sticky: sticky,\n        Svg: SVG,\n        Switcher: Switcher,\n        Tab: tab,\n        Toggle: toggle,\n        Video: Video,\n        Close: Close,\n        Spinner: Spinner,\n        NavParentIcon: NavParentIcon,\n        SlidenavNext: Slidenav,\n        SlidenavPrevious: Slidenav,\n        SearchIcon: Search,\n        Marker: IconComponent,\n        NavbarParentIcon: IconComponent,\n        NavbarToggleIcon: IconComponent,\n        OverlayIcon: IconComponent,\n        PaginationNext: IconComponent,\n        PaginationPrevious: IconComponent,\n        Totop: IconComponent\n    });\n\n    // register components\n    each(components$1, (component, name) => UIkit.component(name, component));\n\n    boot(UIkit);\n\n    const units = ['days', 'hours', 'minutes', 'seconds'];\n\n    var countdown = {\n      mixins: [Class],\n\n      props: {\n        date: String,\n        clsWrapper: String },\n\n\n      data: {\n        date: '',\n        clsWrapper: '.uk-countdown-%unit%' },\n\n\n      connected() {\n        this.date = Date.parse(this.$props.date);\n        this.start();\n      },\n\n      disconnected() {\n        this.stop();\n      },\n\n      events: [\n      {\n        name: 'visibilitychange',\n\n        el() {\n          return document;\n        },\n\n        handler() {\n          if (document.hidden) {\n            this.stop();\n          } else {\n            this.start();\n          }\n        } }],\n\n\n\n      methods: {\n        start() {\n          this.stop();\n          this.update();\n          this.timer = setInterval(this.update, 1000);\n        },\n\n        stop() {\n          clearInterval(this.timer);\n        },\n\n        update() {\n          const timespan = getTimeSpan(this.date);\n\n          if (!this.date || timespan.total <= 0) {\n            this.stop();\n\n            timespan.days = timespan.hours = timespan.minutes = timespan.seconds = 0;\n          }\n\n          for (const unit of units) {\n            const el = $(this.clsWrapper.replace('%unit%', unit), this.$el);\n\n            if (!el) {\n              continue;\n            }\n\n            let digits = String(Math.trunc(timespan[unit]));\n\n            digits = digits.length < 2 ? \"0\" + digits : digits;\n\n            if (el.textContent !== digits) {\n              digits = digits.split('');\n\n              if (digits.length !== el.children.length) {\n                html(el, digits.map(() => '<span></span>').join(''));\n              }\n\n              digits.forEach((digit, i) => el.children[i].textContent = digit);\n            }\n          }\n        } } };\n\n\n\n    function getTimeSpan(date) {\n      const total = date - Date.now();\n\n      return {\n        total,\n        seconds: total / 1000 % 60,\n        minutes: total / 1000 / 60 % 60,\n        hours: total / 1000 / 60 / 60 % 24,\n        days: total / 1000 / 60 / 60 / 24 };\n\n    }\n\n    const clsLeave = 'uk-transition-leave';\n    const clsEnter = 'uk-transition-enter';\n\n    function fade(action, target, duration, stagger) {if (stagger === void 0) {stagger = 0;}\n      const index = transitionIndex(target, true);\n      const propsIn = { opacity: 1 };\n      const propsOut = { opacity: 0 };\n\n      const wrapIndexFn = (fn) => () => index === transitionIndex(target) ? fn() : Promise.reject();\n\n      const leaveFn = wrapIndexFn(async () => {\n        addClass(target, clsLeave);\n\n        await Promise.all(\n        getTransitionNodes(target).map(\n        (child, i) =>\n        new Promise((resolve) =>\n        setTimeout(\n        () =>\n        Transition.start(child, propsOut, duration / 2, 'ease').then(\n        resolve),\n\n        i * stagger))));\n\n\n\n\n\n        removeClass(target, clsLeave);\n      });\n\n      const enterFn = wrapIndexFn(async () => {\n        const oldHeight = height(target);\n\n        addClass(target, clsEnter);\n        action();\n\n        css(children(target), { opacity: 0 });\n\n        // Ensure UIkit updates have propagated\n        await awaitFrame$1();\n\n        const nodes = children(target);\n        const newHeight = height(target);\n\n        // Ensure Grid cells do not stretch when height is applied\n        css(target, 'alignContent', 'flex-start');\n        height(target, oldHeight);\n\n        const transitionNodes = getTransitionNodes(target);\n        css(nodes, propsOut);\n\n        const transitions = transitionNodes.map(async (child, i) => {\n          await awaitTimeout(i * stagger);\n          await Transition.start(child, propsIn, duration / 2, 'ease');\n        });\n\n        if (oldHeight !== newHeight) {\n          transitions.push(\n          Transition.start(\n          target,\n          { height: newHeight },\n          duration / 2 + transitionNodes.length * stagger,\n          'ease'));\n\n\n        }\n\n        await Promise.all(transitions).then(() => {\n          removeClass(target, clsEnter);\n          if (index === transitionIndex(target)) {\n            css(target, { height: '', alignContent: '' });\n            css(nodes, { opacity: '' });\n            delete target.dataset.transition;\n          }\n        });\n      });\n\n      return hasClass(target, clsLeave) ?\n      waitTransitionend(target).then(enterFn) :\n      hasClass(target, clsEnter) ?\n      waitTransitionend(target).then(leaveFn).then(enterFn) :\n      leaveFn().then(enterFn);\n    }\n\n    function transitionIndex(target, next) {\n      if (next) {\n        target.dataset.transition = 1 + transitionIndex(target);\n      }\n\n      return toNumber(target.dataset.transition) || 0;\n    }\n\n    function waitTransitionend(target) {\n      return Promise.all(\n      children(target).\n      filter(Transition.inProgress).\n      map(\n      (el) =>\n      new Promise((resolve) => once(el, 'transitionend transitioncanceled', resolve))));\n\n\n    }\n\n    function getTransitionNodes(target) {\n      return getRows(children(target)).reduce(\n      (nodes, row) =>\n      nodes.concat(\n      sortBy$1(\n      row.filter((el) => isInView(el)),\n      'offsetLeft')),\n\n\n      []);\n\n    }\n\n    function awaitFrame$1() {\n      return new Promise((resolve) => requestAnimationFrame(resolve));\n    }\n\n    function awaitTimeout(timeout) {\n      return new Promise((resolve) => setTimeout(resolve, timeout));\n    }\n\n    async function slide (action, target, duration) {\n      await awaitFrame();\n\n      let nodes = children(target);\n\n      // Get current state\n      const currentProps = nodes.map((el) => getProps(el, true));\n      const targetProps = { ...css(target, ['height', 'padding']), display: 'block' };\n\n      // Cancel previous animations\n      await Promise.all(nodes.concat(target).map(Transition.cancel));\n\n      // Adding, sorting, removing nodes\n      action();\n\n      // Find new nodes\n      nodes = nodes.concat(children(target).filter((el) => !includes(nodes, el)));\n\n      // Wait for update to propagate\n      await Promise.resolve();\n\n      // Force update\n      fastdom.flush();\n\n      // Get new state\n      const targetStyle = attr(target, 'style');\n      const targetPropsTo = css(target, ['height', 'padding']);\n      const [propsTo, propsFrom] = getTransitionProps(target, nodes, currentProps);\n      const attrsTo = nodes.map((el) => ({\n        class: attr(el, 'class'),\n        style: attr(el, 'style') }));\n\n\n      // Reset to previous state\n      nodes.forEach((el, i) => propsFrom[i] && css(el, propsFrom[i]));\n      css(target, targetProps);\n\n      // Start transitions on next frame\n      await awaitFrame();\n\n      const transitions = nodes.\n      map((el, i) => parent(el) === target && Transition.start(el, propsTo[i], duration, 'ease')).\n      concat(Transition.start(target, targetPropsTo, duration, 'ease'));\n\n      try {\n        await Promise.all(transitions);\n        nodes.forEach((el, i) => {\n          attr(el, attrsTo[i]);\n          if (parent(el) === target) {\n            css(el, 'display', propsTo[i].opacity === 0 ? 'none' : '');\n          }\n        });\n        attr(target, 'style', targetStyle);\n      } catch (e) {\n        attr(nodes, 'style', '');\n        resetProps(target, targetProps);\n      }\n    }\n\n    function getProps(el, opacity) {\n      const zIndex = css(el, 'zIndex');\n\n      return isVisible(el) ?\n      {\n        display: '',\n        opacity: opacity ? css(el, 'opacity') : '0',\n        pointerEvents: 'none',\n        position: 'absolute',\n        zIndex: zIndex === 'auto' ? index(el) : zIndex,\n        ...getPositionWithMargin(el) } :\n\n      false;\n    }\n\n    function getTransitionProps(target, nodes, currentProps) {\n      const propsTo = nodes.map((el, i) =>\n      parent(el) && i in currentProps ?\n      currentProps[i] ?\n      isVisible(el) ?\n      getPositionWithMargin(el) :\n      { opacity: 0 } :\n      { opacity: isVisible(el) ? 1 : 0 } :\n      false);\n\n\n      const propsFrom = propsTo.map((props, i) => {\n        const from = parent(nodes[i]) === target && (currentProps[i] || getProps(nodes[i]));\n\n        if (!from) {\n          return false;\n        }\n\n        if (!props) {\n          delete from.opacity;\n        } else if (!('opacity' in props)) {\n          const { opacity } = from;\n\n          if (opacity % 1) {\n            props.opacity = 1;\n          } else {\n            delete from.opacity;\n          }\n        }\n\n        return from;\n      });\n\n      return [propsTo, propsFrom];\n    }\n\n    function resetProps(el, props) {\n      for (const prop in props) {\n        css(el, prop, '');\n      }\n    }\n\n    function getPositionWithMargin(el) {\n      const { height, width } = offset(el);\n\n      return {\n        height,\n        width,\n        transform: '',\n        ...position(el),\n        ...css(el, ['marginTop', 'marginLeft']) };\n\n    }\n\n    function awaitFrame() {\n      return new Promise((resolve) => requestAnimationFrame(resolve));\n    }\n\n    var Animate = {\n      props: {\n        duration: Number,\n        animation: Boolean },\n\n\n      data: {\n        duration: 150,\n        animation: 'slide' },\n\n\n      methods: {\n        animate(action, target) {if (target === void 0) {target = this.$el;}\n          const name = this.animation;\n          const animationFn =\n          name === 'fade' ?\n          fade :\n          name === 'delayed-fade' ?\n          function () {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return fade(...args, 40);} :\n          name ?\n          slide :\n          () => {\n            action();\n            return Promise.resolve();\n          };\n\n          return animationFn(action, target, this.duration).catch(noop);\n        } } };\n\n    var filter = {\n      mixins: [Animate],\n\n      args: 'target',\n\n      props: {\n        target: Boolean,\n        selActive: Boolean },\n\n\n      data: {\n        target: null,\n        selActive: false,\n        attrItem: 'uk-filter-control',\n        cls: 'uk-active',\n        duration: 250 },\n\n\n      computed: {\n        toggles: {\n          get(_ref, $el) {let { attrItem } = _ref;\n            return $$(\"[\" + attrItem + \"],[data-\" + attrItem + \"]\", $el);\n          },\n\n          watch() {\n            this.updateState();\n\n            if (this.selActive !== false) {\n              const actives = $$(this.selActive, this.$el);\n              this.toggles.forEach((el) => toggleClass(el, this.cls, includes(actives, el)));\n            }\n          },\n\n          immediate: true },\n\n\n        children: {\n          get(_ref2, $el) {let { target } = _ref2;\n            return $$(target + \" > *\", $el);\n          },\n\n          watch(list, old) {\n            if (old && !isEqualList(list, old)) {\n              this.updateState();\n            }\n          },\n\n          immediate: true } },\n\n\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return \"[\" + this.attrItem + \"],[data-\" + this.attrItem + \"]\";\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.apply(e.current);\n        } }],\n\n\n\n      methods: {\n        apply(el) {\n          const prevState = this.getState();\n          const newState = mergeState(el, this.attrItem, this.getState());\n\n          if (!isEqualState(prevState, newState)) {\n            this.setState(newState);\n          }\n        },\n\n        getState() {\n          return this.toggles.\n          filter((item) => hasClass(item, this.cls)).\n          reduce((state, el) => mergeState(el, this.attrItem, state), {\n            filter: { '': '' },\n            sort: [] });\n\n        },\n\n        async setState(state, animate) {if (animate === void 0) {animate = true;}\n          state = { filter: { '': '' }, sort: [], ...state };\n\n          trigger(this.$el, 'beforeFilter', [this, state]);\n\n          this.toggles.forEach((el) =>\n          toggleClass(el, this.cls, !!matchFilter(el, this.attrItem, state)));\n\n\n          await Promise.all(\n          $$(this.target, this.$el).map((target) => {\n            const filterFn = () => {\n              applyState(state, target, children(target));\n              this.$update(this.$el);\n            };\n            return animate ? this.animate(filterFn, target) : filterFn();\n          }));\n\n\n          trigger(this.$el, 'afterFilter', [this]);\n        },\n\n        updateState() {\n          fastdom.write(() => this.setState(this.getState(), false));\n        } } };\n\n\n\n    function getFilter(el, attr) {\n      return parseOptions(data(el, attr), ['filter']);\n    }\n\n    function isEqualState(stateA, stateB) {\n      return ['filter', 'sort'].every((prop) => isEqual(stateA[prop], stateB[prop]));\n    }\n\n    function applyState(state, target, children) {\n      const selector = getSelector(state);\n\n      children.forEach((el) => css(el, 'display', selector && !matches(el, selector) ? 'none' : ''));\n\n      const [sort, order] = state.sort;\n\n      if (sort) {\n        const sorted = sortItems(children, sort, order);\n        if (!isEqual(sorted, children)) {\n          append(target, sorted);\n        }\n      }\n    }\n\n    function mergeState(el, attr, state) {\n      const { filter, group, sort, order = 'asc' } = getFilter(el, attr);\n\n      if (filter || isUndefined(sort)) {\n        if (group) {\n          if (filter) {\n            delete state.filter[''];\n            state.filter[group] = filter;\n          } else {\n            delete state.filter[group];\n\n            if (isEmpty(state.filter) || '' in state.filter) {\n              state.filter = { '': filter || '' };\n            }\n          }\n        } else {\n          state.filter = { '': filter || '' };\n        }\n      }\n\n      if (!isUndefined(sort)) {\n        state.sort = [sort, order];\n      }\n\n      return state;\n    }\n\n    function matchFilter(\n    el,\n    attr, _ref3)\n\n    {let { filter: stateFilter = { '': '' }, sort: [stateSort, stateOrder] } = _ref3;\n      const { filter = '', group = '', sort, order = 'asc' } = getFilter(el, attr);\n\n      return isUndefined(sort) ?\n      group in stateFilter && filter === stateFilter[group] ||\n      !filter && group && !(group in stateFilter) && !stateFilter[''] :\n      stateSort === sort && stateOrder === order;\n    }\n\n    function isEqualList(listA, listB) {\n      return listA.length === listB.length && listA.every((el) => listB.includes(el));\n    }\n\n    function getSelector(_ref4) {let { filter } = _ref4;\n      let selector = '';\n      each(filter, (value) => selector += value || '');\n      return selector;\n    }\n\n    function sortItems(nodes, sort, order) {\n      return [...nodes].sort(\n      (a, b) =>\n      data(a, sort).localeCompare(data(b, sort), undefined, { numeric: true }) * (\n      order === 'asc' || -1));\n\n    }\n\n    var Animations$2 = {\n      slide: {\n        show(dir) {\n          return [{ transform: translate(dir * -100) }, { transform: translate() }];\n        },\n\n        percent(current) {\n          return translated(current);\n        },\n\n        translate(percent, dir) {\n          return [\n          { transform: translate(dir * -100 * percent) },\n          { transform: translate(dir * 100 * (1 - percent)) }];\n\n        } } };\n\n\n\n    function translated(el) {\n      return Math.abs(css(el, 'transform').split(',')[4] / el.offsetWidth) || 0;\n    }\n\n    function translate(value, unit) {if (value === void 0) {value = 0;}if (unit === void 0) {unit = '%';}\n      value += value ? unit : '';\n      return \"translate3d(\" + value + \", 0, 0)\";\n    }\n\n    function scale3d(value) {\n      return \"scale3d(\" + value + \", \" + value + \", 1)\";\n    }\n\n    var Animations$1 = {\n      ...Animations$2,\n      fade: {\n        show() {\n          return [{ opacity: 0 }, { opacity: 1 }];\n        },\n\n        percent(current) {\n          return 1 - css(current, 'opacity');\n        },\n\n        translate(percent) {\n          return [{ opacity: 1 - percent }, { opacity: percent }];\n        } },\n\n\n      scale: {\n        show() {\n          return [\n          { opacity: 0, transform: scale3d(1 - 0.2) },\n          { opacity: 1, transform: scale3d(1) }];\n\n        },\n\n        percent(current) {\n          return 1 - css(current, 'opacity');\n        },\n\n        translate(percent) {\n          return [\n          { opacity: 1 - percent, transform: scale3d(1 - 0.2 * percent) },\n          { opacity: percent, transform: scale3d(1 - 0.2 + 0.2 * percent) }];\n\n        } } };\n\n    function Transitioner$1(prev, next, dir, _ref) {let { animation, easing } = _ref;\n      const { percent, translate, show = noop } = animation;\n      const props = show(dir);\n      const deferred = new Deferred();\n\n      return {\n        dir,\n\n        show(duration, percent, linear) {if (percent === void 0) {percent = 0;}\n          const timing = linear ? 'linear' : easing;\n          duration -= Math.round(duration * clamp(percent, -1, 1));\n\n          this.translate(percent);\n\n          triggerUpdate$1(next, 'itemin', { percent, duration, timing, dir });\n          triggerUpdate$1(prev, 'itemout', { percent: 1 - percent, duration, timing, dir });\n\n          Promise.all([\n          Transition.start(next, props[1], duration, timing),\n          Transition.start(prev, props[0], duration, timing)]).\n          then(() => {\n            this.reset();\n            deferred.resolve();\n          }, noop);\n\n          return deferred.promise;\n        },\n\n        cancel() {\n          Transition.cancel([next, prev]);\n        },\n\n        reset() {\n          for (const prop in props[0]) {\n            css([next, prev], prop, '');\n          }\n        },\n\n        forward(duration, percent) {if (percent === void 0) {percent = this.percent();}\n          Transition.cancel([next, prev]);\n          return this.show(duration, percent, true);\n        },\n\n        translate(percent) {\n          this.reset();\n\n          const props = translate(percent, dir);\n          css(next, props[1]);\n          css(prev, props[0]);\n          triggerUpdate$1(next, 'itemtranslatein', { percent, dir });\n          triggerUpdate$1(prev, 'itemtranslateout', { percent: 1 - percent, dir });\n        },\n\n        percent() {\n          return percent(prev || next, next, dir);\n        },\n\n        getDistance() {\n          return prev == null ? void 0 : prev.offsetWidth;\n        } };\n\n    }\n\n    function triggerUpdate$1(el, type, data) {\n      trigger(el, createEvent(type, false, false, data));\n    }\n\n    var SliderAutoplay = {\n      props: {\n        autoplay: Boolean,\n        autoplayInterval: Number,\n        pauseOnHover: Boolean },\n\n\n      data: {\n        autoplay: false,\n        autoplayInterval: 7000,\n        pauseOnHover: true },\n\n\n      connected() {\n        this.autoplay && this.startAutoplay();\n      },\n\n      disconnected() {\n        this.stopAutoplay();\n      },\n\n      update() {\n        attr(this.slides, 'tabindex', '-1');\n      },\n\n      events: [\n      {\n        name: 'visibilitychange',\n\n        el() {\n          return document;\n        },\n\n        filter() {\n          return this.autoplay;\n        },\n\n        handler() {\n          if (document.hidden) {\n            this.stopAutoplay();\n          } else {\n            this.startAutoplay();\n          }\n        } }],\n\n\n\n      methods: {\n        startAutoplay() {\n          this.stopAutoplay();\n\n          this.interval = setInterval(\n          () =>\n          (!this.draggable || !$(':focus', this.$el)) && (\n          !this.pauseOnHover || !matches(this.$el, ':hover')) &&\n          !this.stack.length &&\n          this.show('next'),\n          this.autoplayInterval);\n\n        },\n\n        stopAutoplay() {\n          this.interval && clearInterval(this.interval);\n        } } };\n\n    const pointerOptions = { passive: false, capture: true };\n    const pointerUpOptions = { passive: true, capture: true };\n    const pointerDown = 'touchstart mousedown';\n    const pointerMove = 'touchmove mousemove';\n    const pointerUp = 'touchend touchcancel mouseup click input scroll';\n\n    var SliderDrag = {\n      props: {\n        draggable: Boolean },\n\n\n      data: {\n        draggable: true,\n        threshold: 10 },\n\n\n      created() {\n        for (const key of ['start', 'move', 'end']) {\n          const fn = this[key];\n          this[key] = (e) => {\n            const pos = getEventPos(e).x * (isRtl ? -1 : 1);\n\n            this.prevPos = pos === this.pos ? this.prevPos : this.pos;\n            this.pos = pos;\n\n            fn(e);\n          };\n        }\n      },\n\n      events: [\n      {\n        name: pointerDown,\n\n        passive: true,\n\n        delegate() {\n          return this.selSlides;\n        },\n\n        handler(e) {\n          if (\n          !this.draggable ||\n          !isTouch(e) && hasSelectableText(e.target) ||\n          closest(e.target, selInput) ||\n          e.button > 0 ||\n          this.length < 2)\n          {\n            return;\n          }\n\n          this.start(e);\n        } },\n\n\n      {\n        name: 'dragstart',\n\n        handler(e) {\n          e.preventDefault();\n        } },\n\n\n      {\n        // iOS workaround for slider stopping if swiping fast\n        name: pointerMove,\n        el() {\n          return this.list;\n        },\n        handler: noop,\n        ...pointerOptions }],\n\n\n\n      methods: {\n        start() {\n          this.drag = this.pos;\n\n          if (this._transitioner) {\n            this.percent = this._transitioner.percent();\n            this.drag += this._transitioner.getDistance() * this.percent * this.dir;\n\n            this._transitioner.cancel();\n            this._transitioner.translate(this.percent);\n\n            this.dragging = true;\n\n            this.stack = [];\n          } else {\n            this.prevIndex = this.index;\n          }\n\n          on(document, pointerMove, this.move, pointerOptions);\n\n          // 'input' event is triggered by video controls\n          on(document, pointerUp, this.end, pointerUpOptions);\n\n          css(this.list, 'userSelect', 'none');\n        },\n\n        move(e) {\n          const distance = this.pos - this.drag;\n\n          if (\n          distance === 0 ||\n          this.prevPos === this.pos ||\n          !this.dragging && Math.abs(distance) < this.threshold)\n          {\n            return;\n          }\n\n          // prevent click event\n          css(this.list, 'pointerEvents', 'none');\n\n          e.cancelable && e.preventDefault();\n\n          this.dragging = true;\n          this.dir = distance < 0 ? 1 : -1;\n\n          const { slides } = this;\n          let { prevIndex } = this;\n          let dis = Math.abs(distance);\n          let nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);\n          let width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;\n\n          while (nextIndex !== prevIndex && dis > width) {\n            this.drag -= width * this.dir;\n\n            prevIndex = nextIndex;\n            dis -= width;\n            nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);\n            width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;\n          }\n\n          this.percent = dis / width;\n\n          const prev = slides[prevIndex];\n          const next = slides[nextIndex];\n          const changed = this.index !== nextIndex;\n          const edge = prevIndex === nextIndex;\n\n          let itemShown;\n\n          [this.index, this.prevIndex].\n          filter((i) => !includes([nextIndex, prevIndex], i)).\n          forEach((i) => {\n            trigger(slides[i], 'itemhidden', [this]);\n\n            if (edge) {\n              itemShown = true;\n              this.prevIndex = prevIndex;\n            }\n          });\n\n          if (this.index === prevIndex && this.prevIndex !== prevIndex || itemShown) {\n            trigger(slides[this.index], 'itemshown', [this]);\n          }\n\n          if (changed) {\n            this.prevIndex = prevIndex;\n            this.index = nextIndex;\n\n            !edge && trigger(prev, 'beforeitemhide', [this]);\n            trigger(next, 'beforeitemshow', [this]);\n          }\n\n          this._transitioner = this._translate(Math.abs(this.percent), prev, !edge && next);\n\n          if (changed) {\n            !edge && trigger(prev, 'itemhide', [this]);\n            trigger(next, 'itemshow', [this]);\n          }\n        },\n\n        end() {\n          off(document, pointerMove, this.move, pointerOptions);\n          off(document, pointerUp, this.end, pointerUpOptions);\n\n          if (this.dragging) {\n            this.dragging = null;\n\n            if (this.index === this.prevIndex) {\n              this.percent = 1 - this.percent;\n              this.dir *= -1;\n              this._show(false, this.index, true);\n              this._transitioner = null;\n            } else {\n              const dirChange =\n              (isRtl ? this.dir * (isRtl ? 1 : -1) : this.dir) < 0 ===\n              this.prevPos > this.pos;\n              this.index = dirChange ? this.index : this.prevIndex;\n\n              if (dirChange) {\n                this.percent = 1 - this.percent;\n              }\n\n              this.show(\n              this.dir > 0 && !dirChange || this.dir < 0 && dirChange ?\n              'next' :\n              'previous',\n              true);\n\n            }\n          }\n\n          css(this.list, { userSelect: '', pointerEvents: '' });\n\n          this.drag = this.percent = null;\n        } } };\n\n\n\n    function hasSelectableText(el) {\n      return (\n        css(el, 'userSelect') !== 'none' &&\n        toNodes(el.childNodes).some((el) => el.nodeType === 3 && el.textContent.trim()));\n\n    }\n\n    var SliderNav = {\n      data: {\n        selNav: false },\n\n\n      computed: {\n        nav(_ref, $el) {let { selNav } = _ref;\n          return $(selNav, $el);\n        },\n\n        selNavItem(_ref2) {let { attrItem } = _ref2;\n          return \"[\" + attrItem + \"],[data-\" + attrItem + \"]\";\n        },\n\n        navItems(_, $el) {\n          return $$(this.selNavItem, $el);\n        } },\n\n\n      update: {\n        write() {\n          if (this.nav && this.length !== this.nav.children.length) {\n            html(\n            this.nav,\n            this.slides.\n            map((_, i) => \"<li \" + this.attrItem + \"=\\\"\" + i + \"\\\"><a href></a></li>\").\n            join(''));\n\n          }\n\n          this.navItems.concat(this.nav).forEach((el) => el && (el.hidden = !this.maxIndex));\n\n          this.updateNav();\n        },\n\n        events: ['resize'] },\n\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return this.selNavItem;\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.show(data(e.current, this.attrItem));\n        } },\n\n\n      {\n        name: 'itemshow',\n        handler: 'updateNav' }],\n\n\n\n      methods: {\n        updateNav() {\n          const i = this.getValidIndex();\n          for (const el of this.navItems) {\n            const cmd = data(el, this.attrItem);\n\n            toggleClass(el, this.clsActive, toNumber(cmd) === i);\n            toggleClass(\n            el,\n            'uk-invisible',\n            this.finite && (\n            cmd === 'previous' && i === 0 || cmd === 'next' && i >= this.maxIndex));\n\n          }\n        } } };\n\n    var Slider = {\n      mixins: [SliderAutoplay, SliderDrag, SliderNav, Resize],\n\n      props: {\n        clsActivated: Boolean,\n        easing: String,\n        index: Number,\n        finite: Boolean,\n        velocity: Number,\n        selSlides: String },\n\n\n      data: () => ({\n        easing: 'ease',\n        finite: false,\n        velocity: 1,\n        index: 0,\n        prevIndex: -1,\n        stack: [],\n        percent: 0,\n        clsActive: 'uk-active',\n        clsActivated: false,\n        Transitioner: false,\n        transitionOptions: {} }),\n\n\n      connected() {\n        this.prevIndex = -1;\n        this.index = this.getValidIndex(this.$props.index);\n        this.stack = [];\n      },\n\n      disconnected() {\n        removeClass(this.slides, this.clsActive);\n      },\n\n      computed: {\n        duration(_ref, $el) {let { velocity } = _ref;\n          return speedUp($el.offsetWidth / velocity);\n        },\n\n        list(_ref2, $el) {let { selList } = _ref2;\n          return $(selList, $el);\n        },\n\n        maxIndex() {\n          return this.length - 1;\n        },\n\n        selSlides(_ref3) {let { selList, selSlides } = _ref3;\n          return selList + \" \" + (selSlides || '> *');\n        },\n\n        slides: {\n          get() {\n            return $$(this.selSlides, this.$el);\n          },\n\n          watch() {\n            this.$emit('resize');\n          } },\n\n\n        length() {\n          return this.slides.length;\n        } },\n\n\n      methods: {\n        show(index, force) {if (force === void 0) {force = false;}\n          if (this.dragging || !this.length) {\n            return;\n          }\n\n          const { stack } = this;\n          const queueIndex = force ? 0 : stack.length;\n          const reset = () => {\n            stack.splice(queueIndex, 1);\n\n            if (stack.length) {\n              this.show(stack.shift(), true);\n            }\n          };\n\n          stack[force ? 'unshift' : 'push'](index);\n\n          if (!force && stack.length > 1) {\n            if (stack.length === 2) {\n              this._transitioner.forward(Math.min(this.duration, 200));\n            }\n\n            return;\n          }\n\n          const prevIndex = this.getIndex(this.index);\n          const prev = hasClass(this.slides, this.clsActive) && this.slides[prevIndex];\n          const nextIndex = this.getIndex(index, this.index);\n          const next = this.slides[nextIndex];\n\n          if (prev === next) {\n            reset();\n            return;\n          }\n\n          this.dir = getDirection(index, prevIndex);\n          this.prevIndex = prevIndex;\n          this.index = nextIndex;\n\n          if (\n          prev && !trigger(prev, 'beforeitemhide', [this]) ||\n          !trigger(next, 'beforeitemshow', [this, prev]))\n          {\n            this.index = this.prevIndex;\n            reset();\n            return;\n          }\n\n          const promise = this._show(prev, next, force).then(() => {\n            prev && trigger(prev, 'itemhidden', [this]);\n            trigger(next, 'itemshown', [this]);\n\n            return new Promise((resolve) => {\n              requestAnimationFrame(() => {\n                stack.shift();\n                if (stack.length) {\n                  this.show(stack.shift(), true);\n                } else {\n                  this._transitioner = null;\n                }\n                resolve();\n              });\n            });\n          });\n\n          prev && trigger(prev, 'itemhide', [this]);\n          trigger(next, 'itemshow', [this]);\n\n          return promise;\n        },\n\n        getIndex(index, prev) {if (index === void 0) {index = this.index;}if (prev === void 0) {prev = this.index;}\n          return clamp(getIndex(index, this.slides, prev, this.finite), 0, this.maxIndex);\n        },\n\n        getValidIndex(index, prevIndex) {if (index === void 0) {index = this.index;}if (prevIndex === void 0) {prevIndex = this.prevIndex;}\n          return this.getIndex(index, prevIndex);\n        },\n\n        _show(prev, next, force) {\n          this._transitioner = this._getTransitioner(prev, next, this.dir, {\n            easing: force ?\n            next.offsetWidth < 600 ?\n            'cubic-bezier(0.25, 0.46, 0.45, 0.94)' /* easeOutQuad */ :\n            'cubic-bezier(0.165, 0.84, 0.44, 1)' /* easeOutQuart */ :\n            this.easing,\n            ...this.transitionOptions });\n\n\n          if (!force && !prev) {\n            this._translate(1);\n            return Promise.resolve();\n          }\n\n          const { length } = this.stack;\n          return this._transitioner[length > 1 ? 'forward' : 'show'](\n          length > 1 ? Math.min(this.duration, 75 + 75 / (length - 1)) : this.duration,\n          this.percent);\n\n        },\n\n        _getDistance(prev, next) {\n          return this._getTransitioner(prev, prev !== next && next).getDistance();\n        },\n\n        _translate(percent, prev, next) {if (prev === void 0) {prev = this.prevIndex;}if (next === void 0) {next = this.index;}\n          const transitioner = this._getTransitioner(prev !== next ? prev : false, next);\n          transitioner.translate(percent);\n          return transitioner;\n        },\n\n        _getTransitioner(\n        prev,\n        next,\n        dir,\n        options)\n        {if (prev === void 0) {prev = this.prevIndex;}if (next === void 0) {next = this.index;}if (dir === void 0) {dir = this.dir || 1;}if (options === void 0) {options = this.transitionOptions;}\n          return new this.Transitioner(\n          isNumber(prev) ? this.slides[prev] : prev,\n          isNumber(next) ? this.slides[next] : next,\n          dir * (isRtl ? -1 : 1),\n          options);\n\n        } } };\n\n\n\n    function getDirection(index, prevIndex) {\n      return index === 'next' ? 1 : index === 'previous' ? -1 : index < prevIndex ? -1 : 1;\n    }\n\n    function speedUp(x) {\n      return 0.5 * x + 300; // parabola through (400,500; 600,600; 1800,1200)\n    }\n\n    var Slideshow = {\n      mixins: [Slider],\n\n      props: {\n        animation: String },\n\n\n      data: {\n        animation: 'slide',\n        clsActivated: 'uk-transition-active',\n        Animations: Animations$2,\n        Transitioner: Transitioner$1 },\n\n\n      computed: {\n        animation(_ref) {let { animation, Animations } = _ref;\n          return { ...(Animations[animation] || Animations.slide), name: animation };\n        },\n\n        transitionOptions() {\n          return { animation: this.animation };\n        } },\n\n\n      events: {\n        beforeitemshow(_ref2) {let { target } = _ref2;\n          addClass(target, this.clsActive);\n        },\n\n        itemshown(_ref3) {let { target } = _ref3;\n          addClass(target, this.clsActivated);\n        },\n\n        itemhidden(_ref4) {let { target } = _ref4;\n          removeClass(target, this.clsActive, this.clsActivated);\n        } } };\n\n    var LightboxPanel = {\n      mixins: [Container, Modal, Togglable, Slideshow],\n\n      functional: true,\n\n      props: {\n        delayControls: Number,\n        preload: Number,\n        videoAutoplay: Boolean,\n        template: String },\n\n\n      data: () => ({\n        preload: 1,\n        videoAutoplay: false,\n        delayControls: 3000,\n        items: [],\n        cls: 'uk-open',\n        clsPage: 'uk-lightbox-page',\n        selList: '.uk-lightbox-items',\n        attrItem: 'uk-lightbox-item',\n        selClose: '.uk-close-large',\n        selCaption: '.uk-lightbox-caption',\n        pauseOnHover: false,\n        velocity: 2,\n        Animations: Animations$1,\n        template: \"<div class=\\\"uk-lightbox uk-overflow-hidden\\\"> <ul class=\\\"uk-lightbox-items\\\"></ul> <div class=\\\"uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque\\\"> <button class=\\\"uk-lightbox-toolbar-icon uk-close-large\\\" type=\\\"button\\\" uk-close></button> </div> <a class=\\\"uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade\\\" href uk-slidenav-previous uk-lightbox-item=\\\"previous\\\"></a> <a class=\\\"uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade\\\" href uk-slidenav-next uk-lightbox-item=\\\"next\\\"></a> <div class=\\\"uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque\\\"></div> </div>\" }),\n\n\n\n\n\n\n\n\n\n\n      created() {\n        const $el = $(this.template);\n        const list = $(this.selList, $el);\n        this.items.forEach(() => append(list, '<li>'));\n\n        this.$mount(append(this.container, $el));\n      },\n\n      computed: {\n        caption(_ref, $el) {let { selCaption } = _ref;\n          return $(selCaption, $el);\n        } },\n\n\n      events: [\n      {\n        name: pointerMove$1 + \" \" + pointerDown$1 + \" keydown\",\n\n        handler: 'showControls' },\n\n\n      {\n        name: 'click',\n\n        self: true,\n\n        delegate() {\n          return this.selSlides;\n        },\n\n        handler(e) {\n          if (e.defaultPrevented) {\n            return;\n          }\n\n          this.hide();\n        } },\n\n\n      {\n        name: 'shown',\n\n        self: true,\n\n        handler() {\n          this.showControls();\n        } },\n\n\n      {\n        name: 'hide',\n\n        self: true,\n\n        handler() {\n          this.hideControls();\n\n          removeClass(this.slides, this.clsActive);\n          Transition.stop(this.slides);\n        } },\n\n\n      {\n        name: 'hidden',\n\n        self: true,\n\n        handler() {\n          this.$destroy(true);\n        } },\n\n\n      {\n        name: 'keyup',\n\n        el() {\n          return document;\n        },\n\n        handler(e) {\n          if (!this.isToggled(this.$el) || !this.draggable) {\n            return;\n          }\n\n          switch (e.keyCode) {\n            case 37:\n              this.show('previous');\n              break;\n            case 39:\n              this.show('next');\n              break;}\n\n        } },\n\n\n      {\n        name: 'beforeitemshow',\n\n        handler(e) {\n          if (this.isToggled()) {\n            return;\n          }\n\n          this.draggable = false;\n\n          e.preventDefault();\n\n          this.toggleElement(this.$el, true, false);\n\n          this.animation = Animations$1['scale'];\n          removeClass(e.target, this.clsActive);\n          this.stack.splice(1, 0, this.index);\n        } },\n\n\n      {\n        name: 'itemshow',\n\n        handler() {\n          html(this.caption, this.getItem().caption || '');\n\n          for (let j = -this.preload; j <= this.preload; j++) {\n            this.loadItem(this.index + j);\n          }\n        } },\n\n\n      {\n        name: 'itemshown',\n\n        handler() {\n          this.draggable = this.$props.draggable;\n        } },\n\n\n      {\n        name: 'itemload',\n\n        async handler(_, item) {\n          const { source: src, type, alt = '', poster, attrs = {} } = item;\n\n          this.setItem(item, '<span uk-spinner></span>');\n\n          if (!src) {\n            return;\n          }\n\n          let matches;\n          const iframeAttrs = {\n            allowfullscreen: '',\n            style: 'max-width: 100%; box-sizing: border-box;',\n            'uk-responsive': '',\n            'uk-video': \"\" + this.videoAutoplay };\n\n\n          // Image\n          if (\n          type === 'image' ||\n          src.match(/\\.(avif|jpe?g|jfif|a?png|gif|svg|webp)($|\\?)/i))\n          {\n            try {\n              const { width, height } = await getImage(src, attrs.srcset, attrs.size);\n              this.setItem(item, createEl('img', { src, width, height, alt, ...attrs }));\n            } catch (e) {\n              this.setError(item);\n            }\n\n            // Video\n          } else if (type === 'video' || src.match(/\\.(mp4|webm|ogv)($|\\?)/i)) {\n            const video = createEl('video', {\n              src,\n              poster,\n              controls: '',\n              playsinline: '',\n              'uk-video': \"\" + this.videoAutoplay,\n              ...attrs });\n\n\n            on(video, 'loadedmetadata', () => {\n              attr(video, { width: video.videoWidth, height: video.videoHeight });\n              this.setItem(item, video);\n            });\n            on(video, 'error', () => this.setError(item));\n\n            // Iframe\n          } else if (type === 'iframe' || src.match(/\\.(html|php)($|\\?)/i)) {\n            this.setItem(\n            item,\n            createEl('iframe', {\n              src,\n              allowfullscreen: '',\n              class: 'uk-lightbox-iframe',\n              ...attrs }));\n\n\n\n            // YouTube\n          } else if (\n          matches = src.match(\n          /\\/\\/(?:.*?youtube(-nocookie)?\\..*?[?&]v=|youtu\\.be\\/)([\\w-]{11})[&?]?(.*)?/))\n\n          {\n            this.setItem(\n            item,\n            createEl('iframe', {\n              src: \"https://www.youtube\" + (matches[1] || '') + \".com/embed/\" + matches[2] + (\n              matches[3] ? \"?\" + matches[3] : ''),\n\n              width: 1920,\n              height: 1080,\n              ...iframeAttrs,\n              ...attrs }));\n\n\n\n            // Vimeo\n          } else if (matches = src.match(/\\/\\/.*?vimeo\\.[a-z]+\\/(\\d+)[&?]?(.*)?/)) {\n            try {\n              const { height, width } = await (\n              await fetch(\"https://vimeo.com/api/oembed.json?maxwidth=1920&url=\" +\n              encodeURI(\n              src),\n\n              {\n                credentials: 'omit' })).\n\n\n              json();\n\n              this.setItem(\n              item,\n              createEl('iframe', {\n                src: \"https://player.vimeo.com/video/\" + matches[1] + (\n                matches[2] ? \"?\" + matches[2] : ''),\n\n                width,\n                height,\n                ...iframeAttrs,\n                ...attrs }));\n\n\n            } catch (e) {\n              this.setError(item);\n            }\n          }\n        } }],\n\n\n\n      methods: {\n        loadItem(index) {if (index === void 0) {index = this.index;}\n          const item = this.getItem(index);\n\n          if (!this.getSlide(item).childElementCount) {\n            trigger(this.$el, 'itemload', [item]);\n          }\n        },\n\n        getItem(index) {if (index === void 0) {index = this.index;}\n          return this.items[getIndex(index, this.slides)];\n        },\n\n        setItem(item, content) {\n          trigger(this.$el, 'itemloaded', [this, html(this.getSlide(item), content)]);\n        },\n\n        getSlide(item) {\n          return this.slides[this.items.indexOf(item)];\n        },\n\n        setError(item) {\n          this.setItem(item, '<span uk-icon=\"icon: bolt; ratio: 2\"></span>');\n        },\n\n        showControls() {\n          clearTimeout(this.controlsTimer);\n          this.controlsTimer = setTimeout(this.hideControls, this.delayControls);\n\n          addClass(this.$el, 'uk-active', 'uk-transition-active');\n        },\n\n        hideControls() {\n          removeClass(this.$el, 'uk-active', 'uk-transition-active');\n        } } };\n\n\n\n    function createEl(tag, attrs) {\n      const el = fragment(\"<\" + tag + \">\");\n      attr(el, attrs);\n      return el;\n    }\n\n    var lightbox = {\n      install: install$1,\n\n      props: { toggle: String },\n\n      data: { toggle: 'a' },\n\n      computed: {\n        toggles: {\n          get(_ref, $el) {let { toggle } = _ref;\n            return $$(toggle, $el);\n          },\n\n          watch() {\n            this.hide();\n          } } },\n\n\n\n      disconnected() {\n        this.hide();\n      },\n\n      events: [\n      {\n        name: 'click',\n\n        delegate() {\n          return this.toggle + \":not(.uk-disabled)\";\n        },\n\n        handler(e) {\n          e.preventDefault();\n          this.show(e.current);\n        } }],\n\n\n\n      methods: {\n        show(index) {\n          const items = uniqueBy(this.toggles.map(toItem), 'source');\n\n          if (isElement(index)) {\n            const { source } = toItem(index);\n            index = findIndex(items, (_ref2) => {let { source: src } = _ref2;return source === src;});\n          }\n\n          this.panel = this.panel || this.$create('lightboxPanel', { ...this.$props, items });\n\n          on(this.panel.$el, 'hidden', () => this.panel = false);\n\n          return this.panel.show(index);\n        },\n\n        hide() {var _this$panel;\n          return (_this$panel = this.panel) == null ? void 0 : _this$panel.hide();\n        } } };\n\n\n\n    function install$1(UIkit, Lightbox) {\n      if (!UIkit.lightboxPanel) {\n        UIkit.component('lightboxPanel', LightboxPanel);\n      }\n\n      assign(Lightbox.props, UIkit.component('lightboxPanel').options.props);\n    }\n\n    function toItem(el) {\n      const item = {};\n\n      for (const attr of ['href', 'caption', 'type', 'poster', 'alt', 'attrs']) {\n        item[attr === 'href' ? 'source' : attr] = data(el, attr);\n      }\n\n      item.attrs = parseOptions(item.attrs);\n\n      return item;\n    }\n\n    var notification = {\n      mixins: [Container],\n\n      functional: true,\n\n      args: ['message', 'status'],\n\n      data: {\n        message: '',\n        status: '',\n        timeout: 5000,\n        group: null,\n        pos: 'top-center',\n        clsContainer: 'uk-notification',\n        clsClose: 'uk-notification-close',\n        clsMsg: 'uk-notification-message' },\n\n\n      install,\n\n      computed: {\n        marginProp(_ref) {let { pos } = _ref;\n          return \"margin\" + (startsWith(pos, 'top') ? 'Top' : 'Bottom');\n        },\n\n        startProps() {\n          return { opacity: 0, [this.marginProp]: -this.$el.offsetHeight };\n        } },\n\n\n      created() {\n        const container =\n        $(\".\" + this.clsContainer + \"-\" + this.pos, this.container) ||\n        append(\n        this.container, \"<div class=\\\"\" +\n        this.clsContainer + \" \" + this.clsContainer + \"-\" + this.pos + \"\\\" style=\\\"display: block\\\"></div>\");\n\n\n        this.$mount(\n        append(\n        container, \"<div class=\\\"\" +\n        this.clsMsg + (\n        this.status ? \" \" + this.clsMsg + \"-\" + this.status : '') + \"\\\" role=\\\"alert\\\"> <a href class=\\\"\" +\n\n        this.clsClose + \"\\\" data-uk-close></a> <div>\" +\n        this.message + \"</div> </div>\"));\n\n\n\n      },\n\n      async connected() {\n        const margin = toFloat(css(this.$el, this.marginProp));\n        await Transition.start(css(this.$el, this.startProps), {\n          opacity: 1,\n          [this.marginProp]: margin });\n\n\n        if (this.timeout) {\n          this.timer = setTimeout(this.close, this.timeout);\n        }\n      },\n\n      events: {\n        click(e) {\n          if (closest(e.target, 'a[href=\"#\"],a[href=\"\"]')) {\n            e.preventDefault();\n          }\n          this.close();\n        },\n\n        [pointerEnter]() {\n          if (this.timer) {\n            clearTimeout(this.timer);\n          }\n        },\n\n        [pointerLeave]() {\n          if (this.timeout) {\n            this.timer = setTimeout(this.close, this.timeout);\n          }\n        } },\n\n\n      methods: {\n        async close(immediate) {\n          const removeFn = (el) => {\n            const container = parent(el);\n\n            trigger(el, 'close', [this]);\n            remove$1(el);\n\n            if (!(container != null && container.hasChildNodes())) {\n              remove$1(container);\n            }\n          };\n\n          if (this.timer) {\n            clearTimeout(this.timer);\n          }\n\n          if (!immediate) {\n            await Transition.start(this.$el, this.startProps);\n          }\n\n          removeFn(this.$el);\n        } } };\n\n\n\n    function install(UIkit) {\n      UIkit.notification.closeAll = function (group, immediate) {\n        apply(document.body, (el) => {\n          const notification = UIkit.getComponent(el, 'notification');\n          if (notification && (!group || group === notification.group)) {\n            notification.close(immediate);\n          }\n        });\n      };\n    }\n\n    const props = {\n      x: transformFn,\n      y: transformFn,\n      rotate: transformFn,\n      scale: transformFn,\n      color: colorFn,\n      backgroundColor: colorFn,\n      borderColor: colorFn,\n      blur: filterFn,\n      hue: filterFn,\n      fopacity: filterFn,\n      grayscale: filterFn,\n      invert: filterFn,\n      saturate: filterFn,\n      sepia: filterFn,\n      opacity: cssPropFn,\n      stroke: strokeFn,\n      bgx: backgroundFn,\n      bgy: backgroundFn };\n\n\n    const { keys } = Object;\n\n    var Parallax = {\n      mixins: [Media],\n\n      props: fillObject(keys(props), 'list'),\n\n      data: fillObject(keys(props), undefined),\n\n      computed: {\n        props(properties, $el) {\n          const stops = {};\n          for (const prop in properties) {\n            if (prop in props && !isUndefined(properties[prop])) {\n              stops[prop] = properties[prop].slice();\n            }\n          }\n          const result = {};\n          for (const prop in stops) {\n            result[prop] = props[prop](prop, $el, stops[prop], stops);\n          }\n          return result;\n        } },\n\n\n      events: {\n        load() {\n          this.$emit();\n        } },\n\n\n      methods: {\n        reset() {\n          for (const prop in this.getCss(0)) {\n            css(this.$el, prop, '');\n          }\n        },\n\n        getCss(percent) {\n          const css = { transform: '', filter: '' };\n          for (const prop in this.props) {\n            this.props[prop](css, percent);\n          }\n          return css;\n        } } };\n\n\n\n    function transformFn(prop, el, stops) {\n      let unit = getUnit(stops) || { x: 'px', y: 'px', rotate: 'deg' }[prop] || '';\n      let transformFn;\n\n      if (prop === 'x' || prop === 'y') {\n        prop = \"translate\" + ucfirst(prop);\n        transformFn = (stop) => toFloat(toFloat(stop).toFixed(unit === 'px' ? 0 : 6));\n      } else if (prop === 'scale') {\n        unit = '';\n        transformFn = (stop) =>\n        getUnit([stop]) ? toPx(stop, 'width', el, true) / el.offsetWidth : stop;\n      }\n\n      if (stops.length === 1) {\n        stops.unshift(prop === 'scale' ? 1 : 0);\n      }\n\n      stops = parseStops(stops, transformFn);\n\n      return (css, percent) => {\n        css.transform += \" \" + prop + \"(\" + getValue(stops, percent) + unit + \")\";\n      };\n    }\n\n    function colorFn(prop, el, stops) {\n      if (stops.length === 1) {\n        stops.unshift(getCssValue(el, prop, ''));\n      }\n\n      stops = parseStops(stops, (stop) => parseColor(el, stop));\n\n      return (css, percent) => {\n        const [start, end, p] = getStop(stops, percent);\n        const value = start.\n        map((value, i) => {\n          value += p * (end[i] - value);\n          return i === 3 ? toFloat(value) : parseInt(value, 10);\n        }).\n        join(',');\n        css[prop] = \"rgba(\" + value + \")\";\n      };\n    }\n\n    function parseColor(el, color) {\n      return getCssValue(el, 'color', color).\n      split(/[(),]/g).\n      slice(1, -1).\n      concat(1).\n      slice(0, 4).\n      map(toFloat);\n    }\n\n    function filterFn(prop, el, stops) {\n      if (stops.length === 1) {\n        stops.unshift(0);\n      }\n\n      const unit = getUnit(stops) || { blur: 'px', hue: 'deg' }[prop] || '%';\n      prop = { fopacity: 'opacity', hue: 'hue-rotate' }[prop] || prop;\n      stops = parseStops(stops);\n\n      return (css, percent) => {\n        const value = getValue(stops, percent);\n        css.filter += \" \" + prop + \"(\" + (value + unit) + \")\";\n      };\n    }\n\n    function cssPropFn(prop, el, stops) {\n      if (stops.length === 1) {\n        stops.unshift(getCssValue(el, prop, ''));\n      }\n\n      stops = parseStops(stops);\n\n      return (css, percent) => {\n        css[prop] = getValue(stops, percent);\n      };\n    }\n\n    function strokeFn(prop, el, stops) {\n      if (stops.length === 1) {\n        stops.unshift(0);\n      }\n\n      const unit = getUnit(stops);\n      const length = getMaxPathLength(el);\n      stops = parseStops(stops.reverse(), (stop) => {\n        stop = toFloat(stop);\n        return unit === '%' ? stop * length / 100 : stop;\n      });\n\n      if (!stops.some((_ref) => {let [value] = _ref;return value;})) {\n        return noop;\n      }\n\n      css(el, 'strokeDasharray', length);\n\n      return (css, percent) => {\n        css.strokeDashoffset = getValue(stops, percent);\n      };\n    }\n\n    function backgroundFn(prop, el, stops, props) {\n      if (stops.length === 1) {\n        stops.unshift(0);\n      }\n\n      const attr = prop === 'bgy' ? 'height' : 'width';\n      props[prop] = parseStops(stops, (stop) => toPx(stop, attr, el));\n\n      const bgProps = ['bgx', 'bgy'].filter((prop) => prop in props);\n      if (bgProps.length === 2 && prop === 'bgx') {\n        return noop;\n      }\n\n      if (getCssValue(el, 'backgroundSize', '') === 'cover') {\n        return backgroundCoverFn(prop, el, stops, props);\n      }\n\n      const positions = {};\n      for (const prop of bgProps) {\n        positions[prop] = getBackgroundPos(el, prop);\n      }\n\n      return setBackgroundPosFn(bgProps, positions, props);\n    }\n\n    function backgroundCoverFn(prop, el, stops, props) {\n      const dimImage = getBackgroundImageDimensions(el);\n\n      if (!dimImage.width) {\n        return noop;\n      }\n\n      const dimEl = {\n        width: el.offsetWidth,\n        height: el.offsetHeight };\n\n\n      const bgProps = ['bgx', 'bgy'].filter((prop) => prop in props);\n\n      const positions = {};\n      for (const prop of bgProps) {\n        const values = props[prop].map((_ref2) => {let [value] = _ref2;return value;});\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        const down = values.indexOf(min) < values.indexOf(max);\n        const diff = max - min;\n\n        positions[prop] = (down ? -diff : 0) - (down ? min : max) + \"px\";\n        dimEl[prop === 'bgy' ? 'height' : 'width'] += diff;\n      }\n\n      const dim = Dimensions.cover(dimImage, dimEl);\n\n      for (const prop of bgProps) {\n        const attr = prop === 'bgy' ? 'height' : 'width';\n        const overflow = dim[attr] - dimEl[attr];\n        positions[prop] = \"max(\" + getBackgroundPos(el, prop) + \",-\" + overflow + \"px) + \" + positions[prop];\n      }\n\n      const fn = setBackgroundPosFn(bgProps, positions, props);\n      return (css, percent) => {\n        fn(css, percent);\n        css.backgroundSize = dim.width + \"px \" + dim.height + \"px\";\n        css.backgroundRepeat = 'no-repeat';\n      };\n    }\n\n    function getBackgroundPos(el, prop) {\n      return getCssValue(el, \"background-position-\" + prop.substr(-1), '');\n    }\n\n    function setBackgroundPosFn(bgProps, positions, props) {\n      return function (css, percent) {\n        for (const prop of bgProps) {\n          const value = getValue(props[prop], percent);\n          css[\"background-position-\" + prop.substr(-1)] = \"calc(\" + positions[prop] + \" + \" + value + \"px)\";\n        }\n      };\n    }\n\n    const dimensions = {};\n    function getBackgroundImageDimensions(el) {\n      const src = css(el, 'backgroundImage').replace(/^none|url\\([\"']?(.+?)[\"']?\\)$/, '$1');\n\n      if (dimensions[src]) {\n        return dimensions[src];\n      }\n\n      const image = new Image();\n      if (src) {\n        image.src = src;\n\n        if (!image.naturalWidth) {\n          image.onload = () => {\n            dimensions[src] = toDimensions(image);\n            trigger(el, createEvent('load', false));\n          };\n          return toDimensions(image);\n        }\n      }\n\n      return dimensions[src] = toDimensions(image);\n    }\n\n    function toDimensions(image) {\n      return {\n        width: image.naturalWidth,\n        height: image.naturalHeight };\n\n    }\n\n    function parseStops(stops, fn) {if (fn === void 0) {fn = toFloat;}\n      const result = [];\n      const { length } = stops;\n      let nullIndex = 0;\n      for (let i = 0; i < length; i++) {\n        let [value, percent] = isString(stops[i]) ? stops[i].trim().split(' ') : [stops[i]];\n        value = fn(value);\n        percent = percent ? toFloat(percent) / 100 : null;\n\n        if (i === 0) {\n          if (percent === null) {\n            percent = 0;\n          } else if (percent) {\n            result.push([value, 0]);\n          }\n        } else if (i === length - 1) {\n          if (percent === null) {\n            percent = 1;\n          } else if (percent !== 1) {\n            result.push([value, percent]);\n            percent = 1;\n          }\n        }\n\n        result.push([value, percent]);\n\n        if (percent === null) {\n          nullIndex++;\n        } else if (nullIndex) {\n          const leftPercent = result[i - nullIndex - 1][1];\n          const p = (percent - leftPercent) / (nullIndex + 1);\n          for (let j = nullIndex; j > 0; j--) {\n            result[i - j][1] = leftPercent + p * (nullIndex - j + 1);\n          }\n\n          nullIndex = 0;\n        }\n      }\n\n      return result;\n    }\n\n    function getStop(stops, percent) {\n      const index = findIndex(stops.slice(1), (_ref3) => {let [, targetPercent] = _ref3;return percent <= targetPercent;}) + 1;\n      return [\n      stops[index - 1][0],\n      stops[index][0],\n      (percent - stops[index - 1][1]) / (stops[index][1] - stops[index - 1][1])];\n\n    }\n\n    function getValue(stops, percent) {\n      const [start, end, p] = getStop(stops, percent);\n      return isNumber(start) ? start + Math.abs(start - end) * p * (start < end ? 1 : -1) : +end;\n    }\n\n    const unitRe = /^-?\\d+(\\S+)/;\n    function getUnit(stops, defaultUnit) {\n      for (const stop of stops) {\n        const match = stop.match == null ? void 0 : stop.match(unitRe);\n        if (match) {\n          return match[1];\n        }\n      }\n      return defaultUnit;\n    }\n\n    function getCssValue(el, prop, value) {\n      const prev = el.style[prop];\n      const val = css(css(el, prop, value), prop);\n      el.style[prop] = prev;\n      return val;\n    }\n\n    function fillObject(keys, value) {\n      return keys.reduce((data, prop) => {\n        data[prop] = value;\n        return data;\n      }, {});\n    }\n\n    var parallax = {\n      mixins: [Parallax, Resize, Scroll],\n\n      props: {\n        target: String,\n        viewport: Number, // Deprecated\n        easing: Number,\n        start: String,\n        end: String },\n\n\n      data: {\n        target: false,\n        viewport: 1,\n        easing: 1,\n        start: 0,\n        end: 0 },\n\n\n      computed: {\n        target(_ref, $el) {let { target } = _ref;\n          return getOffsetElement(target && query(target, $el) || $el);\n        },\n\n        start(_ref2) {let { start } = _ref2;\n          return toPx(start, 'height', this.target, true);\n        },\n\n        end(_ref3) {let { end, viewport } = _ref3;\n          return toPx(\n          end || (viewport = (1 - viewport) * 100) && viewport + \"vh+\" + viewport + \"%\",\n          'height',\n          this.target,\n          true);\n\n        } },\n\n\n      update: {\n        read(_ref4, types) {let { percent } = _ref4;\n          if (!types.has('scroll')) {\n            percent = false;\n          }\n\n          if (!this.matchMedia) {\n            return;\n          }\n\n          const prev = percent;\n          percent = ease(scrolledOver(this.target, this.start, this.end), this.easing);\n\n          return {\n            percent,\n            style: prev === percent ? false : this.getCss(percent) };\n\n        },\n\n        write(_ref5) {let { style } = _ref5;\n          if (!this.matchMedia) {\n            this.reset();\n            return;\n          }\n\n          style && css(this.$el, style);\n        },\n\n        events: ['scroll', 'resize'] } };\n\n\n\n    /*\n     * Inspired by https://gist.github.com/gre/1650294?permalink_comment_id=3477425#gistcomment-3477425\n     *\n     * linear: 0\n     * easeInSine: 0.5\n     * easeOutSine: -0.5\n     * easeInQuad: 1\n     * easeOutQuad: -1\n     * easeInCubic: 2\n     * easeOutCubic: -2\n     * easeInQuart: 3\n     * easeOutQuart: -3\n     * easeInQuint: 4\n     * easeOutQuint: -4\n     */\n    function ease(percent, easing) {\n      return easing >= 0 ? Math.pow(percent, easing + 1) : 1 - Math.pow(1 - percent, 1 - easing);\n    }\n\n    // SVG elements do not inherit from HTMLElement\n    function getOffsetElement(el) {\n      return el ? 'offsetTop' in el ? el : getOffsetElement(parent(el)) : document.documentElement;\n    }\n\n    var SliderReactive = {\n      update: {\n        write() {\n          if (this.stack.length || this.dragging) {\n            return;\n          }\n\n          const index = this.getValidIndex(this.index);\n\n          if (!~this.prevIndex || this.index !== index) {\n            this.show(index);\n          } else {\n            this._translate(1, this.prevIndex, this.index);\n          }\n        },\n\n        events: ['resize'] } };\n\n    var SliderPreload = {\n      mixins: [Lazyload],\n\n      connected() {\n        this.lazyload(this.slides, this.getAdjacentSlides);\n      } };\n\n    function Transitioner (prev, next, dir, _ref) {let { center, easing, list } = _ref;\n      const deferred = new Deferred();\n\n      const from = prev ?\n      getLeft(prev, list, center) :\n      getLeft(next, list, center) + dimensions$1(next).width * dir;\n      const to = next ?\n      getLeft(next, list, center) :\n      from + dimensions$1(prev).width * dir * (isRtl ? -1 : 1);\n\n      return {\n        dir,\n\n        show(duration, percent, linear) {if (percent === void 0) {percent = 0;}\n          const timing = linear ? 'linear' : easing;\n          duration -= Math.round(duration * clamp(percent, -1, 1));\n\n          this.translate(percent);\n\n          percent = prev ? percent : clamp(percent, 0, 1);\n          triggerUpdate(this.getItemIn(), 'itemin', { percent, duration, timing, dir });\n          prev &&\n          triggerUpdate(this.getItemIn(true), 'itemout', {\n            percent: 1 - percent,\n            duration,\n            timing,\n            dir });\n\n\n          Transition.start(\n          list,\n          { transform: translate(-to * (isRtl ? -1 : 1), 'px') },\n          duration,\n          timing).\n          then(deferred.resolve, noop);\n\n          return deferred.promise;\n        },\n\n        cancel() {\n          Transition.cancel(list);\n        },\n\n        reset() {\n          css(list, 'transform', '');\n        },\n\n        forward(duration, percent) {if (percent === void 0) {percent = this.percent();}\n          Transition.cancel(list);\n          return this.show(duration, percent, true);\n        },\n\n        translate(percent) {\n          const distance = this.getDistance() * dir * (isRtl ? -1 : 1);\n\n          css(\n          list,\n          'transform',\n          translate(\n          clamp(\n          -to + (distance - distance * percent),\n          -getWidth(list),\n          dimensions$1(list).width) * (\n          isRtl ? -1 : 1),\n          'px'));\n\n\n\n          const actives = this.getActives();\n          const itemIn = this.getItemIn();\n          const itemOut = this.getItemIn(true);\n\n          percent = prev ? clamp(percent, -1, 1) : 0;\n\n          for (const slide of children(list)) {\n            const isActive = includes(actives, slide);\n            const isIn = slide === itemIn;\n            const isOut = slide === itemOut;\n            const translateIn =\n            isIn ||\n            !isOut && (\n            isActive ||\n            dir * (isRtl ? -1 : 1) === -1 ^\n            getElLeft(slide, list) > getElLeft(prev || next));\n\n            triggerUpdate(slide, \"itemtranslate\" + (translateIn ? 'in' : 'out'), {\n              dir,\n              percent: isOut ? 1 - percent : isIn ? percent : isActive ? 1 : 0 });\n\n          }\n        },\n\n        percent() {\n          return Math.abs(\n          (css(list, 'transform').split(',')[4] * (isRtl ? -1 : 1) + from) / (to - from));\n\n        },\n\n        getDistance() {\n          return Math.abs(to - from);\n        },\n\n        getItemIn(out) {if (out === void 0) {out = false;}\n          let actives = this.getActives();\n          let nextActives = inView(list, getLeft(next || prev, list, center));\n\n          if (out) {\n            const temp = actives;\n            actives = nextActives;\n            nextActives = temp;\n          }\n\n          return nextActives[findIndex(nextActives, (el) => !includes(actives, el))];\n        },\n\n        getActives() {\n          return inView(list, getLeft(prev || next, list, center));\n        } };\n\n    }\n\n    function getLeft(el, list, center) {\n      const left = getElLeft(el, list);\n\n      return center ? left - centerEl(el, list) : Math.min(left, getMax(list));\n    }\n\n    function getMax(list) {\n      return Math.max(0, getWidth(list) - dimensions$1(list).width);\n    }\n\n    function getWidth(list) {\n      return children(list).reduce((right, el) => dimensions$1(el).width + right, 0);\n    }\n\n    function centerEl(el, list) {\n      return dimensions$1(list).width / 2 - dimensions$1(el).width / 2;\n    }\n\n    function getElLeft(el, list) {\n      return (\n        el &&\n        (position(el).left + (isRtl ? dimensions$1(el).width - dimensions$1(list).width : 0)) * (\n        isRtl ? -1 : 1) ||\n        0);\n\n    }\n\n    function inView(list, listLeft) {\n      listLeft -= 1;\n      const listWidth = dimensions$1(list).width;\n      const listRight = listLeft + listWidth + 2;\n\n      return children(list).filter((slide) => {\n        const slideLeft = getElLeft(slide, list);\n        const slideRight = slideLeft + Math.min(dimensions$1(slide).width, listWidth);\n\n        return slideLeft >= listLeft && slideRight <= listRight;\n      });\n    }\n\n    function triggerUpdate(el, type, data) {\n      trigger(el, createEvent(type, false, false, data));\n    }\n\n    var slider = {\n      mixins: [Class, Slider, SliderReactive, SliderPreload],\n\n      props: {\n        center: Boolean,\n        sets: Boolean },\n\n\n      data: {\n        center: false,\n        sets: false,\n        attrItem: 'uk-slider-item',\n        selList: '.uk-slider-items',\n        selNav: '.uk-slider-nav',\n        clsContainer: 'uk-slider-container',\n        Transitioner },\n\n\n      computed: {\n        avgWidth() {\n          return getWidth(this.list) / this.length;\n        },\n\n        finite(_ref) {let { finite } = _ref;\n          return (\n            finite ||\n            Math.ceil(getWidth(this.list)) <\n            Math.trunc(dimensions$1(this.list).width + getMaxElWidth(this.list) + this.center));\n\n        },\n\n        maxIndex() {\n          if (!this.finite || this.center && !this.sets) {\n            return this.length - 1;\n          }\n\n          if (this.center) {\n            return last(this.sets);\n          }\n\n          let lft = 0;\n          const max = getMax(this.list);\n          const index = findIndex(this.slides, (el) => {\n            if (lft >= max) {\n              return true;\n            }\n\n            lft += dimensions$1(el).width;\n          });\n\n          return ~index ? index : this.length - 1;\n        },\n\n        sets(_ref2) {let { sets: enabled } = _ref2;\n          if (!enabled) {\n            return;\n          }\n\n          let left = 0;\n          const sets = [];\n          const width = dimensions$1(this.list).width;\n          for (let i = 0; i < this.slides.length; i++) {\n            const slideWidth = dimensions$1(this.slides[i]).width;\n\n            if (left + slideWidth > width) {\n              left = 0;\n            }\n\n            if (this.center) {\n              if (\n              left < width / 2 &&\n              left + slideWidth + dimensions$1(this.slides[+i + 1]).width / 2 > width / 2)\n              {\n                sets.push(+i);\n                left = width / 2 - slideWidth / 2;\n              }\n            } else if (left === 0) {\n              sets.push(Math.min(+i, this.maxIndex));\n            }\n\n            left += slideWidth;\n          }\n\n          if (sets.length) {\n            return sets;\n          }\n        },\n\n        transitionOptions() {\n          return {\n            center: this.center,\n            list: this.list };\n\n        } },\n\n\n      connected() {\n        toggleClass(this.$el, this.clsContainer, !$(\".\" + this.clsContainer, this.$el));\n      },\n\n      update: {\n        write() {\n          for (const el of this.navItems) {\n            const index = toNumber(data(el, this.attrItem));\n            if (index !== false) {\n              el.hidden =\n              !this.maxIndex ||\n              index > this.maxIndex ||\n              this.sets && !includes(this.sets, index);\n            }\n          }\n\n          if (this.length && !this.dragging && !this.stack.length) {\n            this.reorder();\n            this._translate(1);\n          }\n\n          this.updateActiveClasses();\n        },\n\n        events: ['resize'] },\n\n\n      events: {\n        beforeitemshow(e) {\n          if (\n          !this.dragging &&\n          this.sets &&\n          this.stack.length < 2 &&\n          !includes(this.sets, this.index))\n          {\n            this.index = this.getValidIndex();\n          }\n\n          const diff = Math.abs(\n          this.index -\n          this.prevIndex + (\n          this.dir > 0 && this.index < this.prevIndex ||\n          this.dir < 0 && this.index > this.prevIndex ?\n          (this.maxIndex + 1) * this.dir :\n          0));\n\n\n          if (!this.dragging && diff > 1) {\n            for (let i = 0; i < diff; i++) {\n              this.stack.splice(1, 0, this.dir > 0 ? 'next' : 'previous');\n            }\n\n            e.preventDefault();\n            return;\n          }\n\n          const index =\n          this.dir < 0 || !this.slides[this.prevIndex] ? this.index : this.prevIndex;\n          this.duration =\n          speedUp(this.avgWidth / this.velocity) * (\n          dimensions$1(this.slides[index]).width / this.avgWidth);\n\n          this.reorder();\n        },\n\n        itemshow() {\n          if (~this.prevIndex) {\n            addClass(this._getTransitioner().getItemIn(), this.clsActive);\n          }\n        },\n\n        itemshown() {\n          this.updateActiveClasses();\n        } },\n\n\n      methods: {\n        reorder() {\n          if (this.finite) {\n            css(this.slides, 'order', '');\n            return;\n          }\n\n          const index = this.dir > 0 && this.slides[this.prevIndex] ? this.prevIndex : this.index;\n\n          this.slides.forEach((slide, i) =>\n          css(\n          slide,\n          'order',\n          this.dir > 0 && i < index ? 1 : this.dir < 0 && i >= this.index ? -1 : ''));\n\n\n\n          if (!this.center) {\n            return;\n          }\n\n          const next = this.slides[index];\n          let width = dimensions$1(this.list).width / 2 - dimensions$1(next).width / 2;\n          let j = 0;\n\n          while (width > 0) {\n            const slideIndex = this.getIndex(--j + index, index);\n            const slide = this.slides[slideIndex];\n\n            css(slide, 'order', slideIndex > index ? -2 : -1);\n            width -= dimensions$1(slide).width;\n          }\n        },\n\n        updateActiveClasses() {\n          const actives = this._getTransitioner(this.index).getActives();\n          const activeClasses = [\n          this.clsActive,\n          (!this.sets || includes(this.sets, toFloat(this.index))) && this.clsActivated ||\n          ''];\n\n          for (const slide of this.slides) {\n            toggleClass(slide, activeClasses, includes(actives, slide));\n          }\n        },\n\n        getValidIndex(index, prevIndex) {if (index === void 0) {index = this.index;}if (prevIndex === void 0) {prevIndex = this.prevIndex;}\n          index = this.getIndex(index, prevIndex);\n\n          if (!this.sets) {\n            return index;\n          }\n\n          let prev;\n\n          do {\n            if (includes(this.sets, index)) {\n              return index;\n            }\n\n            prev = index;\n            index = this.getIndex(index + this.dir, prevIndex);\n          } while (index !== prev);\n\n          return index;\n        },\n\n        getAdjacentSlides() {\n          const { width } = dimensions$1(this.list);\n          const left = -width;\n          const right = width * 2;\n          const slideWidth = dimensions$1(this.slides[this.index]).width;\n          const slideLeft = this.center ? width / 2 - slideWidth / 2 : 0;\n          const slides = new Set();\n          for (const i of [-1, 1]) {\n            let currentLeft = slideLeft + (i > 0 ? slideWidth : 0);\n            let j = 0;\n            do {\n              const slide = this.slides[this.getIndex(this.index + i + j++ * i)];\n              currentLeft += dimensions$1(slide).width * i;\n              slides.add(slide);\n            } while (this.slides.length > j && currentLeft > left && currentLeft < right);\n          }\n          return Array.from(slides);\n        } } };\n\n\n\n    function getMaxElWidth(list) {\n      return Math.max(0, ...children(list).map((el) => dimensions$1(el).width));\n    }\n\n    var sliderParallax = {\n      mixins: [Parallax],\n\n      data: {\n        selItem: '!li' },\n\n\n      beforeConnect() {\n        this.item = query(this.selItem, this.$el);\n      },\n\n      disconnected() {\n        this.item = null;\n      },\n\n      events: [\n      {\n        name: 'itemin itemout',\n\n        self: true,\n\n        el() {\n          return this.item;\n        },\n\n        handler(_ref) {let { type, detail: { percent, duration, timing, dir } } = _ref;\n          fastdom.read(() => {\n            const propsFrom = this.getCss(getCurrentPercent(type, dir, percent));\n            const propsTo = this.getCss(isIn(type) ? 0.5 : dir > 0 ? 1 : 0);\n            fastdom.write(() => {\n              css(this.$el, propsFrom);\n              Transition.start(this.$el, propsTo, duration, timing).catch(noop);\n            });\n          });\n        } },\n\n\n      {\n        name: 'transitioncanceled transitionend',\n\n        self: true,\n\n        el() {\n          return this.item;\n        },\n\n        handler() {\n          Transition.cancel(this.$el);\n        } },\n\n\n      {\n        name: 'itemtranslatein itemtranslateout',\n\n        self: true,\n\n        el() {\n          return this.item;\n        },\n\n        handler(_ref2) {let { type, detail: { percent, dir } } = _ref2;\n          fastdom.read(() => {\n            const props = this.getCss(getCurrentPercent(type, dir, percent));\n            fastdom.write(() => css(this.$el, props));\n          });\n        } }] };\n\n\n\n\n    function isIn(type) {\n      return endsWith(type, 'in');\n    }\n\n    function getCurrentPercent(type, dir, percent) {\n      percent /= 2;\n\n      return isIn(type) ^ dir < 0 ? percent : 1 - percent;\n    }\n\n    var Animations = {\n      ...Animations$2,\n      fade: {\n        show() {\n          return [{ opacity: 0, zIndex: 0 }, { zIndex: -1 }];\n        },\n\n        percent(current) {\n          return 1 - css(current, 'opacity');\n        },\n\n        translate(percent) {\n          return [{ opacity: 1 - percent, zIndex: 0 }, { zIndex: -1 }];\n        } },\n\n\n      scale: {\n        show() {\n          return [{ opacity: 0, transform: scale3d(1 + 0.5), zIndex: 0 }, { zIndex: -1 }];\n        },\n\n        percent(current) {\n          return 1 - css(current, 'opacity');\n        },\n\n        translate(percent) {\n          return [\n          { opacity: 1 - percent, transform: scale3d(1 + 0.5 * percent), zIndex: 0 },\n          { zIndex: -1 }];\n\n        } },\n\n\n      pull: {\n        show(dir) {\n          return dir < 0 ?\n          [\n          { transform: translate(30), zIndex: -1 },\n          { transform: translate(), zIndex: 0 }] :\n\n          [\n          { transform: translate(-100), zIndex: 0 },\n          { transform: translate(), zIndex: -1 }];\n\n        },\n\n        percent(current, next, dir) {\n          return dir < 0 ? 1 - translated(next) : translated(current);\n        },\n\n        translate(percent, dir) {\n          return dir < 0 ?\n          [\n          { transform: translate(30 * percent), zIndex: -1 },\n          { transform: translate(-100 * (1 - percent)), zIndex: 0 }] :\n\n          [\n          { transform: translate(-percent * 100), zIndex: 0 },\n          { transform: translate(30 * (1 - percent)), zIndex: -1 }];\n\n        } },\n\n\n      push: {\n        show(dir) {\n          return dir < 0 ?\n          [\n          { transform: translate(100), zIndex: 0 },\n          { transform: translate(), zIndex: -1 }] :\n\n          [\n          { transform: translate(-30), zIndex: -1 },\n          { transform: translate(), zIndex: 0 }];\n\n        },\n\n        percent(current, next, dir) {\n          return dir > 0 ? 1 - translated(next) : translated(current);\n        },\n\n        translate(percent, dir) {\n          return dir < 0 ?\n          [\n          { transform: translate(percent * 100), zIndex: 0 },\n          { transform: translate(-30 * (1 - percent)), zIndex: -1 }] :\n\n          [\n          { transform: translate(-30 * percent), zIndex: -1 },\n          { transform: translate(100 * (1 - percent)), zIndex: 0 }];\n\n        } } };\n\n    var slideshow = {\n      mixins: [Class, Slideshow, SliderReactive, SliderPreload],\n\n      props: {\n        ratio: String,\n        minHeight: Number,\n        maxHeight: Number },\n\n\n      data: {\n        ratio: '16:9',\n        minHeight: false,\n        maxHeight: false,\n        selList: '.uk-slideshow-items',\n        attrItem: 'uk-slideshow-item',\n        selNav: '.uk-slideshow-nav',\n        Animations },\n\n\n      update: {\n        read() {\n          if (!this.list) {\n            return false;\n          }\n\n          let [width, height] = this.ratio.split(':').map(Number);\n\n          height = height * this.list.offsetWidth / width || 0;\n\n          if (this.minHeight) {\n            height = Math.max(this.minHeight, height);\n          }\n\n          if (this.maxHeight) {\n            height = Math.min(this.maxHeight, height);\n          }\n\n          return { height: height - boxModelAdjust(this.list, 'height', 'content-box') };\n        },\n\n        write(_ref) {let { height } = _ref;\n          height > 0 && css(this.list, 'minHeight', height);\n        },\n\n        events: ['resize'] },\n\n\n      methods: {\n        getAdjacentSlides() {\n          return [1, -1].map((i) => this.slides[this.getIndex(this.index + i)]);\n        } } };\n\n    var sortable = {\n      mixins: [Class, Animate],\n\n      props: {\n        group: String,\n        threshold: Number,\n        clsItem: String,\n        clsPlaceholder: String,\n        clsDrag: String,\n        clsDragState: String,\n        clsBase: String,\n        clsNoDrag: String,\n        clsEmpty: String,\n        clsCustom: String,\n        handle: String },\n\n\n      data: {\n        group: false,\n        threshold: 5,\n        clsItem: 'uk-sortable-item',\n        clsPlaceholder: 'uk-sortable-placeholder',\n        clsDrag: 'uk-sortable-drag',\n        clsDragState: 'uk-drag',\n        clsBase: 'uk-sortable',\n        clsNoDrag: 'uk-sortable-nodrag',\n        clsEmpty: 'uk-sortable-empty',\n        clsCustom: '',\n        handle: false,\n        pos: {} },\n\n\n      created() {\n        for (const key of ['init', 'start', 'move', 'end']) {\n          const fn = this[key];\n          this[key] = (e) => {\n            assign(this.pos, getEventPos(e));\n            fn(e);\n          };\n        }\n      },\n\n      events: {\n        name: pointerDown$1,\n        passive: false,\n        handler: 'init' },\n\n\n      computed: {\n        target() {\n          return (this.$el.tBodies || [this.$el])[0];\n        },\n\n        items() {\n          return children(this.target);\n        },\n\n        isEmpty: {\n          get() {\n            return isEmpty(this.items);\n          },\n\n          watch(empty) {\n            toggleClass(this.target, this.clsEmpty, empty);\n          },\n\n          immediate: true },\n\n\n        handles: {\n          get(_ref, el) {let { handle } = _ref;\n            return handle ? $$(handle, el) : this.items;\n          },\n\n          watch(handles, prev) {\n            css(prev, { touchAction: '', userSelect: '' });\n            css(handles, { touchAction: hasTouch ? 'none' : '', userSelect: 'none' }); // touchAction set to 'none' causes a performance drop in Chrome 80\n          },\n\n          immediate: true } },\n\n\n\n      update: {\n        write(data) {\n          if (!this.drag || !parent(this.placeholder)) {\n            return;\n          }\n\n          const {\n            pos: { x, y },\n            origin: { offsetTop, offsetLeft },\n            placeholder } =\n          this;\n\n          css(this.drag, {\n            top: y - offsetTop,\n            left: x - offsetLeft });\n\n\n          const sortable = this.getSortable(document.elementFromPoint(x, y));\n\n          if (!sortable) {\n            return;\n          }\n\n          const { items } = sortable;\n\n          if (items.some(Transition.inProgress)) {\n            return;\n          }\n\n          const target = findTarget(items, { x, y });\n\n          if (items.length && (!target || target === placeholder)) {\n            return;\n          }\n\n          const previous = this.getSortable(placeholder);\n          const insertTarget = findInsertTarget(\n          sortable.target,\n          target,\n          placeholder,\n          x,\n          y,\n          sortable === previous && data.moved !== target);\n\n\n          if (insertTarget === false) {\n            return;\n          }\n\n          if (insertTarget && placeholder === insertTarget) {\n            return;\n          }\n\n          if (sortable !== previous) {\n            previous.remove(placeholder);\n            data.moved = target;\n          } else {\n            delete data.moved;\n          }\n\n          sortable.insert(placeholder, insertTarget);\n\n          this.touched.add(sortable);\n        },\n\n        events: ['move'] },\n\n\n      methods: {\n        init(e) {\n          const { target, button, defaultPrevented } = e;\n          const [placeholder] = this.items.filter((el) => within(target, el));\n\n          if (\n          !placeholder ||\n          defaultPrevented ||\n          button > 0 ||\n          isInput(target) ||\n          within(target, \".\" + this.clsNoDrag) ||\n          this.handle && !within(target, this.handle))\n          {\n            return;\n          }\n\n          e.preventDefault();\n\n          this.touched = new Set([this]);\n          this.placeholder = placeholder;\n          this.origin = { target, index: index(placeholder), ...this.pos };\n\n          on(document, pointerMove$1, this.move);\n          on(document, pointerUp$1, this.end);\n\n          if (!this.threshold) {\n            this.start(e);\n          }\n        },\n\n        start(e) {\n          this.drag = appendDrag(this.$container, this.placeholder);\n          const { left, top } = this.placeholder.getBoundingClientRect();\n          assign(this.origin, { offsetLeft: this.pos.x - left, offsetTop: this.pos.y - top });\n\n          addClass(this.drag, this.clsDrag, this.clsCustom);\n          addClass(this.placeholder, this.clsPlaceholder);\n          addClass(this.items, this.clsItem);\n          addClass(document.documentElement, this.clsDragState);\n\n          trigger(this.$el, 'start', [this, this.placeholder]);\n\n          trackScroll(this.pos);\n\n          this.move(e);\n        },\n\n        move(e) {\n          if (this.drag) {\n            this.$emit('move');\n          } else if (\n          Math.abs(this.pos.x - this.origin.x) > this.threshold ||\n          Math.abs(this.pos.y - this.origin.y) > this.threshold)\n          {\n            this.start(e);\n          }\n        },\n\n        end() {\n          off(document, pointerMove$1, this.move);\n          off(document, pointerUp$1, this.end);\n\n          if (!this.drag) {\n            return;\n          }\n\n          untrackScroll();\n\n          const sortable = this.getSortable(this.placeholder);\n\n          if (this === sortable) {\n            if (this.origin.index !== index(this.placeholder)) {\n              trigger(this.$el, 'moved', [this, this.placeholder]);\n            }\n          } else {\n            trigger(sortable.$el, 'added', [sortable, this.placeholder]);\n            trigger(this.$el, 'removed', [this, this.placeholder]);\n          }\n\n          trigger(this.$el, 'stop', [this, this.placeholder]);\n\n          remove$1(this.drag);\n          this.drag = null;\n\n          for (const { clsPlaceholder, clsItem } of this.touched) {\n            for (const sortable of this.touched) {\n              removeClass(sortable.items, clsPlaceholder, clsItem);\n            }\n          }\n          this.touched = null;\n          removeClass(document.documentElement, this.clsDragState);\n        },\n\n        insert(element, target) {\n          addClass(this.items, this.clsItem);\n\n          const insert = () => target ? before(target, element) : append(this.target, element);\n\n          this.animate(insert);\n        },\n\n        remove(element) {\n          if (!within(element, this.target)) {\n            return;\n          }\n\n          this.animate(() => remove$1(element));\n        },\n\n        getSortable(element) {\n          do {\n            const sortable = this.$getComponent(element, 'sortable');\n\n            if (\n            sortable && (\n            sortable === this || this.group !== false && sortable.group === this.group))\n            {\n              return sortable;\n            }\n          } while (element = parent(element));\n        } } };\n\n\n\n    let trackTimer;\n    function trackScroll(pos) {\n      let last = Date.now();\n      trackTimer = setInterval(() => {\n        let { x, y } = pos;\n        y += document.scrollingElement.scrollTop;\n\n        const dist = (Date.now() - last) * 0.3;\n        last = Date.now();\n\n        scrollParents(document.elementFromPoint(x, pos.y), /auto|scroll/).\n        reverse().\n        some((scrollEl) => {\n          let { scrollTop: scroll, scrollHeight } = scrollEl;\n\n          const { top, bottom, height } = offsetViewport(scrollEl);\n\n          if (top < y && top + 35 > y) {\n            scroll -= dist;\n          } else if (bottom > y && bottom - 35 < y) {\n            scroll += dist;\n          } else {\n            return;\n          }\n\n          if (scroll > 0 && scroll < scrollHeight - height) {\n            scrollEl.scrollTop = scroll;\n            return true;\n          }\n        });\n      }, 15);\n    }\n\n    function untrackScroll() {\n      clearInterval(trackTimer);\n    }\n\n    function appendDrag(container, element) {\n      let clone;\n      if (['li', 'tr'].some((tag) => isTag(element, tag))) {\n        clone = $('<div>');\n        append(clone, element.cloneNode(true).children);\n        for (const attribute of element.getAttributeNames()) {\n          attr(clone, attribute, element.getAttribute(attribute));\n        }\n      } else {\n        clone = element.cloneNode(true);\n      }\n\n      append(container, clone);\n\n      css(clone, 'margin', '0', 'important');\n      css(clone, {\n        boxSizing: 'border-box',\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        padding: css(element, 'padding') });\n\n\n      height(clone.firstElementChild, height(element.firstElementChild));\n\n      return clone;\n    }\n\n    function findTarget(items, point) {\n      return items[findIndex(items, (item) => pointInRect(point, item.getBoundingClientRect()))];\n    }\n\n    function findInsertTarget(list, target, placeholder, x, y, sameList) {\n      if (!children(list).length) {\n        return;\n      }\n\n      const rect = target.getBoundingClientRect();\n      if (!sameList) {\n        if (!isHorizontal(list, placeholder)) {\n          return y < rect.top + rect.height / 2 ? target : target.nextElementSibling;\n        }\n\n        return target;\n      }\n\n      const placeholderRect = placeholder.getBoundingClientRect();\n      const sameRow = linesIntersect(\n      [rect.top, rect.bottom],\n      [placeholderRect.top, placeholderRect.bottom]);\n\n\n      const pointerPos = sameRow ? x : y;\n      const lengthProp = sameRow ? 'width' : 'height';\n      const startProp = sameRow ? 'left' : 'top';\n      const endProp = sameRow ? 'right' : 'bottom';\n\n      const diff =\n      placeholderRect[lengthProp] < rect[lengthProp] ?\n      rect[lengthProp] - placeholderRect[lengthProp] :\n      0;\n\n      if (placeholderRect[startProp] < rect[startProp]) {\n        if (diff && pointerPos < rect[startProp] + diff) {\n          return false;\n        }\n\n        return target.nextElementSibling;\n      }\n\n      if (diff && pointerPos > rect[endProp] - diff) {\n        return false;\n      }\n\n      return target;\n    }\n\n    function isHorizontal(list, placeholder) {\n      const single = children(list).length === 1;\n\n      if (single) {\n        append(list, placeholder);\n      }\n\n      const items = children(list);\n      const isHorizontal = items.some((el, i) => {\n        const rectA = el.getBoundingClientRect();\n        return items.slice(i + 1).some((el) => {\n          const rectB = el.getBoundingClientRect();\n          return !linesIntersect([rectA.left, rectA.right], [rectB.left, rectB.right]);\n        });\n      });\n\n      if (single) {\n        remove$1(placeholder);\n      }\n\n      return isHorizontal;\n    }\n\n    function linesIntersect(lineA, lineB) {\n      return lineA[1] > lineB[0] && lineB[1] > lineA[0];\n    }\n\n    var tooltip = {\n      mixins: [Container, Togglable, Position],\n\n      args: 'title',\n\n      props: {\n        delay: Number,\n        title: String },\n\n\n      data: {\n        pos: 'top',\n        title: '',\n        delay: 0,\n        animation: ['uk-animation-scale-up'],\n        duration: 100,\n        cls: 'uk-active' },\n\n\n      beforeConnect() {\n        this.id = \"uk-tooltip-\" + this._uid;\n        this._hasTitle = hasAttr(this.$el, 'title');\n        attr(this.$el, {\n          title: '',\n          'aria-describedby': this.id });\n\n        makeFocusable(this.$el);\n      },\n\n      disconnected() {\n        this.hide();\n        attr(this.$el, 'title', this._hasTitle ? this.title : null);\n      },\n\n      methods: {\n        show() {\n          if (this.isToggled(this.tooltip || null) || !this.title) {\n            return;\n          }\n\n          this._unbind = once(\n          document, \"keydown \" +\n          pointerDown$1,\n          this.hide,\n          false,\n          (e) =>\n          e.type === pointerDown$1 && !within(e.target, this.$el) ||\n          e.type === 'keydown' && e.keyCode === 27);\n\n\n          clearTimeout(this.showTimer);\n          this.showTimer = setTimeout(this._show, this.delay);\n        },\n\n        async hide() {\n          if (matches(this.$el, 'input:focus')) {\n            return;\n          }\n\n          clearTimeout(this.showTimer);\n\n          if (!this.isToggled(this.tooltip || null)) {\n            return;\n          }\n\n          await this.toggleElement(this.tooltip, false, false);\n          remove$1(this.tooltip);\n          this.tooltip = null;\n          this._unbind();\n        },\n\n        _show() {\n          this.tooltip = append(\n          this.container, \"<div id=\\\"\" +\n          this.id + \"\\\" class=\\\"uk-\" + this.$options.name + \"\\\" role=\\\"tooltip\\\"> <div class=\\\"uk-\" +\n          this.$options.name + \"-inner\\\">\" + this.title + \"</div> </div>\");\n\n\n\n          on(this.tooltip, 'toggled', (e, toggled) => {\n            if (!toggled) {\n              return;\n            }\n\n            this.positionAt(this.tooltip, this.$el);\n\n            const [dir, align] = getAlignment(this.tooltip, this.$el, this.pos);\n\n            this.origin =\n            this.axis === 'y' ?\n            flipPosition(dir) + \"-\" + align :\n            align + \"-\" + flipPosition(dir);\n          });\n\n          this.toggleElement(this.tooltip, true);\n        } },\n\n\n      events: {\n        focus: 'show',\n        blur: 'hide',\n\n        [pointerEnter + \" \" + pointerLeave](e) {\n          if (!isTouch(e)) {\n            this[e.type === pointerEnter ? 'show' : 'hide']();\n          }\n        },\n\n        // Clicking a button does not give it focus on all browsers and platforms\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus\n        [pointerDown$1](e) {\n          if (isTouch(e)) {\n            this.show();\n          }\n        } } };\n\n\n\n    function makeFocusable(el) {\n      if (!isFocusable(el)) {\n        attr(el, 'tabindex', '0');\n      }\n    }\n\n    function getAlignment(el, target, _ref) {let [dir, align] = _ref;\n      const elOffset = offset(el);\n      const targetOffset = offset(target);\n      const properties = [\n      ['left', 'right'],\n      ['top', 'bottom']];\n\n\n      for (const props of properties) {\n        if (elOffset[props[0]] >= targetOffset[props[1]]) {\n          dir = props[1];\n          break;\n        }\n        if (elOffset[props[1]] <= targetOffset[props[0]]) {\n          dir = props[0];\n          break;\n        }\n      }\n\n      const props = includes(properties[0], dir) ? properties[1] : properties[0];\n      if (elOffset[props[0]] === targetOffset[props[0]]) {\n        align = props[0];\n      } else if (elOffset[props[1]] === targetOffset[props[1]]) {\n        align = props[1];\n      } else {\n        align = 'center';\n      }\n\n      return [dir, align];\n    }\n\n    var upload = {\n      props: {\n        allow: String,\n        clsDragover: String,\n        concurrent: Number,\n        maxSize: Number,\n        method: String,\n        mime: String,\n        msgInvalidMime: String,\n        msgInvalidName: String,\n        msgInvalidSize: String,\n        multiple: Boolean,\n        name: String,\n        params: Object,\n        type: String,\n        url: String },\n\n\n      data: {\n        allow: false,\n        clsDragover: 'uk-dragover',\n        concurrent: 1,\n        maxSize: 0,\n        method: 'POST',\n        mime: false,\n        msgInvalidMime: 'Invalid File Type: %s',\n        msgInvalidName: 'Invalid File Name: %s',\n        msgInvalidSize: 'Invalid File Size: %s Kilobytes Max',\n        multiple: false,\n        name: 'files[]',\n        params: {},\n        type: '',\n        url: '',\n        abort: noop,\n        beforeAll: noop,\n        beforeSend: noop,\n        complete: noop,\n        completeAll: noop,\n        error: noop,\n        fail: noop,\n        load: noop,\n        loadEnd: noop,\n        loadStart: noop,\n        progress: noop },\n\n\n      events: {\n        change(e) {\n          if (!matches(e.target, 'input[type=\"file\"]')) {\n            return;\n          }\n\n          e.preventDefault();\n\n          if (e.target.files) {\n            this.upload(e.target.files);\n          }\n\n          e.target.value = '';\n        },\n\n        drop(e) {\n          stop(e);\n\n          const transfer = e.dataTransfer;\n\n          if (!(transfer != null && transfer.files)) {\n            return;\n          }\n\n          removeClass(this.$el, this.clsDragover);\n\n          this.upload(transfer.files);\n        },\n\n        dragenter(e) {\n          stop(e);\n        },\n\n        dragover(e) {\n          stop(e);\n          addClass(this.$el, this.clsDragover);\n        },\n\n        dragleave(e) {\n          stop(e);\n          removeClass(this.$el, this.clsDragover);\n        } },\n\n\n      methods: {\n        async upload(files) {\n          files = toArray(files);\n\n          if (!files.length) {\n            return;\n          }\n\n          trigger(this.$el, 'upload', [files]);\n\n          for (const file of files) {\n            if (this.maxSize && this.maxSize * 1000 < file.size) {\n              this.fail(this.msgInvalidSize.replace('%s', this.maxSize));\n              return;\n            }\n\n            if (this.allow && !match(this.allow, file.name)) {\n              this.fail(this.msgInvalidName.replace('%s', this.allow));\n              return;\n            }\n\n            if (this.mime && !match(this.mime, file.type)) {\n              this.fail(this.msgInvalidMime.replace('%s', this.mime));\n              return;\n            }\n          }\n\n          if (!this.multiple) {\n            files = files.slice(0, 1);\n          }\n\n          this.beforeAll(this, files);\n\n          const chunks = chunk(files, this.concurrent);\n          const upload = async (files) => {\n            const data = new FormData();\n\n            files.forEach((file) => data.append(this.name, file));\n\n            for (const key in this.params) {\n              data.append(key, this.params[key]);\n            }\n\n            try {\n              const xhr = await ajax(this.url, {\n                data,\n                method: this.method,\n                responseType: this.type,\n                beforeSend: (env) => {\n                  const { xhr } = env;\n                  xhr.upload && on(xhr.upload, 'progress', this.progress);\n                  for (const type of ['loadStart', 'load', 'loadEnd', 'abort']) {\n                    on(xhr, type.toLowerCase(), this[type]);\n                  }\n\n                  return this.beforeSend(env);\n                } });\n\n\n              this.complete(xhr);\n\n              if (chunks.length) {\n                await upload(chunks.shift());\n              } else {\n                this.completeAll(xhr);\n              }\n            } catch (e) {\n              this.error(e);\n            }\n          };\n\n          await upload(chunks.shift());\n        } } };\n\n\n\n    function match(pattern, path) {\n      return path.match(\n      new RegExp(\"^\" +\n      pattern.\n      replace(/\\//g, '\\\\/').\n      replace(/\\*\\*/g, '(\\\\/[^\\\\/]+)*').\n      replace(/\\*/g, '[^\\\\/]+').\n      replace(/((?!\\\\))\\?/g, '$1.') + \"$\",\n      'i'));\n\n\n    }\n\n    function chunk(files, size) {\n      const chunks = [];\n      for (let i = 0; i < files.length; i += size) {\n        chunks.push(files.slice(i, i + size));\n      }\n      return chunks;\n    }\n\n    function stop(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    var components = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        Countdown: countdown,\n        Filter: filter,\n        Lightbox: lightbox,\n        LightboxPanel: LightboxPanel,\n        Notification: notification,\n        Parallax: parallax,\n        Slider: slider,\n        SliderParallax: sliderParallax,\n        Slideshow: slideshow,\n        SlideshowParallax: sliderParallax,\n        Sortable: sortable,\n        Tooltip: tooltip,\n        Upload: upload\n    });\n\n    each(components, (component, name) => UIkit.component(name, component));\n\n    return UIkit;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/uikit/dist/js/uikit.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/style/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;